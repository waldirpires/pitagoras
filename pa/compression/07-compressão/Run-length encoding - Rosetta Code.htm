<!DOCTYPE html>
<!-- saved from url=(0047)http://rosettacode.org/wiki/Run-length_encoding -->
<html lang="en" dir="ltr" class="client-js"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Run-length encoding - Rosetta Code</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.18.0">
<link rel="alternate" type="application/x-wiki" title="Edit" href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit">
<link rel="edit" title="Edit" href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit">
<link rel="shortcut icon" href="http://rosettacode.org/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="http://rosettacode.org/mw/opensearch_desc.php" title="Rosetta Code (en)">
<link rel="EditURI" type="application/rsd+xml" href="http://rosettacode.org/mw/api.php?action=rsd">
<link rel="copyright" href="http://www.gnu.org/licenses/fdl-1.2.html">
<link rel="alternate" type="application/atom+xml" title="Rosetta Code Atom feed" href="http://rosettacode.org/mw/index.php?title=Special:RecentChanges&feed=atom">
<link rel="stylesheet" href="http://rosettacode.org/mw/load.php?debug=false&lang=en&modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&only=styles&skin=vector&*">
<style type="text/css" media="all">.mw-collapsible-toggle{float:right} li .mw-collapsible-toggle{float:none} .mw-collapsible-toggle-li{list-style:none}

/* cache key: rosettacode:resourceloader:filter:minify-css:4:4250852ed2349a0d4d0fc6509a3e7d4c */</style><style type="text/css" media="all">.js-messagebox{margin:1em 5%;padding:0.5em 2.5%;border:1px solid #ccc;background-color:#fcfcfc;font-size:0.8em}.js-messagebox .js-messagebox-group{margin:1px;padding:0.5em 2.5%;border-bottom:1px solid #ddd}.js-messagebox .js-messagebox-group:last-child{border-bottom:thin none transparent}

/* cache key: rosettacode:resourceloader:filter:minify-css:4:8b08bdc91c52a9ffba396dccfb5b473c */</style><meta name="ResourceLoaderDynamicStyles" content="">
<link rel="stylesheet" href="http://rosettacode.org/mw/load.php?debug=false&lang=en&modules=site&only=styles&skin=vector&*">
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: rosettacode:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */</style>
<script src="./Run-length encoding - Rosetta Code_files/cb=gapi.loaded_0" async=""></script><script type="text/javascript" async="" src="./Run-length encoding - Rosetta Code_files/ga.js"></script><script type="text/javascript" async="" src="./Run-length encoding - Rosetta Code_files/widgets.js"></script><script id="twitter-wjs" src="./Run-length encoding - Rosetta Code_files/widgets(1).js"></script><script type="text/javascript" async="" src="./Run-length encoding - Rosetta Code_files/plusone.js" gapi_processed="true"></script><script src="./Run-length encoding - Rosetta Code_files/load.php"></script><script src="./Run-length encoding - Rosetta Code_files/load(1).php"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Run-length_encoding", "wgTitle": "Run-length encoding", "wgCurRevisionId": 143104, "wgArticleId": 4080, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["WikipediaSourced", "Programming Tasks", "Compression", "Ada", "AWK", "ALGOL 68", "APL", "AutoHotkey", "BASIC", "BBC BASIC", "Bracmat", "C", "C++", "Boost", "C sharp", "Clojure", "CoffeeScript", "Common Lisp", "D", "E", "Erlang", "Euphoria", "F Sharp", "FALSE", "Fan", "Forth", "Fortran", "Go", "Groovy", "Haskell", "Icon", "Unicon", "J", "Java", "JUnit", "JavaScript", "K", "Liberty BASIC", "Logo", "Lua", "Mathematica", "Maxima", "MMIX", "Objective-C", "OCaml", "Oz", "PARI/GP", "Pascal", "Perl", "Perl 6", "PHP", "PicoLisp", "PL/I", "PowerBASIC", "PowerShell", "Prolog", "Pure", "PureBasic", "Python", "R", "REXX", "Ruby", "Run BASIC", "Scala", "Scheme", "Sed", "Seed7", "Smalltalk", "SNOBOL4", "Standard ML", "Tcl", "TUSCRIPT", "Ursala", "Vedit macro language", "XPL0"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": [], "sfgRemoveText": "Remove", "sfgAutocompleteOnAllChars": false, "sfgAutocompleteValues": {}, "sfgShowOnSelect": {}, "sfgFormErrorsHeader": "There were errors with your form input; see below", "sfgBlankErrorStr": "cannot be blank", "sfgBadURLErrorStr": "must have the correct URL format, starting with \"http\"", "sfgBadEmailErrorStr": "must have a valid email address format", "sfgBadNumberErrorStr": "must be a valid number", "sfgBadDateErrorStr": "must be a valid date", "sfgAnonEditWarning": "Warning: You are not logged in. Your IP address will be recorded in this page\'s edit history."});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script><script type="text/javascript" src="./Run-length encoding - Rosetta Code_files/load(2).php"></script>
		<link rel="alternate" type="application/rdf+xml" title="Run-length encoding" href="http://rosettacode.org/mw/index.php?title=Special:ExportRDF/Run-length_encoding&xmlmime=rdf">
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/mw/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Run-length_encoding action-view skin-vector" data-twttr-rendered="true">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;" class="js-messagebox"></div>
						<!-- sitenotice -->
			<div id="siteNotice"><div id="localNotice" lang="en" dir="ltr"><center>
<table class="messagebox" style="text-align: center; background-color: lightyellow; clear: both;">
<tbody><tr>
<td> In Talk pages, please remember to sign your comments, and please remember to maintain proper indentation for thread tracking. -<a href="http://rosettacode.org/wiki/User:Short_Circuit" title="User:Short Circuit">Michael Mol</a> 13:20, 15 October 2012 (UTC)
</td></tr></tbody></table></center>
</div></div>
			<!-- /sitenotice -->
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Run-length encoding</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From Rosetta Code</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="http://rosettacode.org/wiki/Run-length_encoding#mw-head">navigation</a>,
					<a href="http://rosettacode.org/wiki/Run-length_encoding#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><table align="center" border="0" cellpadding="3" cellspacing="3" style="border: 1px solid #E0E0E0; background-color: #F8F8F8; color:black;">
<tbody><tr>
<td style="font-size: 90%"> This page uses content from <b><a rel="nofollow" class="external text" href="http://en.wikipedia.org/">Wikipedia</a></b>. The original article was at <a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Run-length_encoding">Run-length_encoding</a>. The list of authors can be seen in the <a rel="nofollow" class="external text" href="http://en.wikipedia.org/w/index.php?title=Run-length_encoding&action=history"><b>page history</b></a>. <a href="http://rosettacode.org/wiki/Rosetta_Code:Copyrights" title="Rosetta Code:Copyrights">As with Rosetta Code</a>, the text of Wikipedia <a href="http://en.wikipedia.org/wiki/Project:Copyrights" class="extiw" title="wp:Project:Copyrights">is available</a> under the <a rel="nofollow" class="external text" href="http://www.gnu.org/licenses/fdl.html">GNU FDL</a>. (See links for details on variance)
</td></tr></tbody></table>
<div class="infobox" style="width: 2in"><div class="floatleft"><a href="http://rosettacode.org/wiki/Category:Solutions_by_Programming_Task" title="Category:Solutions by Programming Task"><img alt="Task" src="./Run-length encoding - Rosetta Code_files/64px-Rcode-button-task-crushed.png" width="64" height="64"></a></div><b>Run-length encoding</b><br>
You are encouraged to <a href="http://rosettacode.org/wiki/Rosetta_Code:Solve_a_Task" title="Rosetta Code:Solve a Task">solve this task</a> according to the task description, using any language you may know.</div>
<p>Given a string containing uppercase characters (A-Z), compress repeated 'runs' of the same character by storing the length of that run, and provide a function to reverse the compression. The output can be anything, as long as you can recreate the input with it.
</p><p>Example:
</p>
<dl><dd> Input:  <code>WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</code>
</dd><dd> Output: <code>12W1B12W3B24W1B14W</code>
</dd></dl>
<p>Note: the encoding step in the above example is the same as a step of the <a href="http://rosettacode.org/wiki/Look-and-say_sequence" title="Look-and-say sequence">Look-and-say sequence</a>.
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2><span class="toctoggle">&nbsp;[<a href="http://rosettacode.org/wiki/Run-length_encoding#" class="internal" id="togglelink">hide</a>]&nbsp;</span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="http://rosettacode.org/wiki/Run-length_encoding#Ada"><span class="tocnumber">1</span> <span class="toctext">Ada</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="http://rosettacode.org/wiki/Run-length_encoding#AWK"><span class="tocnumber">2</span> <span class="toctext">AWK</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="http://rosettacode.org/wiki/Run-length_encoding#ALGOL_68"><span class="tocnumber">3</span> <span class="toctext">ALGOL 68</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="http://rosettacode.org/wiki/Run-length_encoding#APL"><span class="tocnumber">4</span> <span class="toctext">APL</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="http://rosettacode.org/wiki/Run-length_encoding#AutoHotkey"><span class="tocnumber">5</span> <span class="toctext">AutoHotkey</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="http://rosettacode.org/wiki/Run-length_encoding#BASIC"><span class="tocnumber">6</span> <span class="toctext">BASIC</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="http://rosettacode.org/wiki/Run-length_encoding#BBC_BASIC"><span class="tocnumber">7</span> <span class="toctext">BBC BASIC</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="http://rosettacode.org/wiki/Run-length_encoding#Bracmat"><span class="tocnumber">8</span> <span class="toctext">Bracmat</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="http://rosettacode.org/wiki/Run-length_encoding#C"><span class="tocnumber">9</span> <span class="toctext">C</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="http://rosettacode.org/wiki/Run-length_encoding#C.2B.2B"><span class="tocnumber">10</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="http://rosettacode.org/wiki/Run-length_encoding#C.23"><span class="tocnumber">11</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="http://rosettacode.org/wiki/Run-length_encoding#Clojure"><span class="tocnumber">12</span> <span class="toctext">Clojure</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="http://rosettacode.org/wiki/Run-length_encoding#CoffeeScript"><span class="tocnumber">13</span> <span class="toctext">CoffeeScript</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="http://rosettacode.org/wiki/Run-length_encoding#Common_Lisp"><span class="tocnumber">14</span> <span class="toctext">Common Lisp</span></a></li>
<li class="toclevel-1 tocsection-15"><a href="http://rosettacode.org/wiki/Run-length_encoding#D"><span class="tocnumber">15</span> <span class="toctext">D</span></a>
<ul>
<li class="toclevel-2 tocsection-16"><a href="http://rosettacode.org/wiki/Run-length_encoding#Short_Functional_Version"><span class="tocnumber">15.1</span> <span class="toctext">Short Functional Version</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="http://rosettacode.org/wiki/Run-length_encoding#Basic_Imperative_Version"><span class="tocnumber">15.2</span> <span class="toctext">Basic Imperative Version</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="http://rosettacode.org/wiki/Run-length_encoding#UTF_String_Version"><span class="tocnumber">15.3</span> <span class="toctext">UTF String Version</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="http://rosettacode.org/wiki/Run-length_encoding#UTF_String_Version_with_Regular_Expression"><span class="tocnumber">15.4</span> <span class="toctext">UTF String Version with Regular Expression</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-20"><a href="http://rosettacode.org/wiki/Run-length_encoding#E"><span class="tocnumber">16</span> <span class="toctext">E</span></a></li>
<li class="toclevel-1 tocsection-21"><a href="http://rosettacode.org/wiki/Run-length_encoding#Erlang"><span class="tocnumber">17</span> <span class="toctext">Erlang</span></a></li>
<li class="toclevel-1 tocsection-22"><a href="http://rosettacode.org/wiki/Run-length_encoding#Euphoria"><span class="tocnumber">18</span> <span class="toctext">Euphoria</span></a></li>
<li class="toclevel-1 tocsection-23"><a href="http://rosettacode.org/wiki/Run-length_encoding#F.23"><span class="tocnumber">19</span> <span class="toctext">F#</span></a></li>
<li class="toclevel-1 tocsection-24"><a href="http://rosettacode.org/wiki/Run-length_encoding#FALSE"><span class="tocnumber">20</span> <span class="toctext">FALSE</span></a></li>
<li class="toclevel-1 tocsection-25"><a href="http://rosettacode.org/wiki/Run-length_encoding#Fan"><span class="tocnumber">21</span> <span class="toctext">Fan</span></a></li>
<li class="toclevel-1 tocsection-26"><a href="http://rosettacode.org/wiki/Run-length_encoding#Forth"><span class="tocnumber">22</span> <span class="toctext">Forth</span></a></li>
<li class="toclevel-1 tocsection-27"><a href="http://rosettacode.org/wiki/Run-length_encoding#Fortran"><span class="tocnumber">23</span> <span class="toctext">Fortran</span></a></li>
<li class="toclevel-1 tocsection-28"><a href="http://rosettacode.org/wiki/Run-length_encoding#Go"><span class="tocnumber">24</span> <span class="toctext">Go</span></a></li>
<li class="toclevel-1 tocsection-29"><a href="http://rosettacode.org/wiki/Run-length_encoding#Groovy"><span class="tocnumber">25</span> <span class="toctext">Groovy</span></a></li>
<li class="toclevel-1 tocsection-30"><a href="http://rosettacode.org/wiki/Run-length_encoding#Haskell"><span class="tocnumber">26</span> <span class="toctext">Haskell</span></a></li>
<li class="toclevel-1 tocsection-31"><a href="http://rosettacode.org/wiki/Run-length_encoding#Icon_and_Unicon"><span class="tocnumber">27</span> <span class="toctext">Icon and Unicon</span></a></li>
<li class="toclevel-1 tocsection-32"><a href="http://rosettacode.org/wiki/Run-length_encoding#J"><span class="tocnumber">28</span> <span class="toctext">J</span></a></li>
<li class="toclevel-1 tocsection-33"><a href="http://rosettacode.org/wiki/Run-length_encoding#Java"><span class="tocnumber">29</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-1 tocsection-34"><a href="http://rosettacode.org/wiki/Run-length_encoding#JavaScript"><span class="tocnumber">30</span> <span class="toctext">JavaScript</span></a></li>
<li class="toclevel-1 tocsection-35"><a href="http://rosettacode.org/wiki/Run-length_encoding#K"><span class="tocnumber">31</span> <span class="toctext">K</span></a></li>
<li class="toclevel-1 tocsection-36"><a href="http://rosettacode.org/wiki/Run-length_encoding#Liberty_BASIC"><span class="tocnumber">32</span> <span class="toctext">Liberty BASIC</span></a></li>
<li class="toclevel-1 tocsection-37"><a href="http://rosettacode.org/wiki/Run-length_encoding#Logo"><span class="tocnumber">33</span> <span class="toctext">Logo</span></a></li>
<li class="toclevel-1 tocsection-38"><a href="http://rosettacode.org/wiki/Run-length_encoding#Lua"><span class="tocnumber">34</span> <span class="toctext">Lua</span></a></li>
<li class="toclevel-1 tocsection-39"><a href="http://rosettacode.org/wiki/Run-length_encoding#Mathematica"><span class="tocnumber">35</span> <span class="toctext">Mathematica</span></a></li>
<li class="toclevel-1 tocsection-40"><a href="http://rosettacode.org/wiki/Run-length_encoding#Maxima"><span class="tocnumber">36</span> <span class="toctext">Maxima</span></a></li>
<li class="toclevel-1 tocsection-41"><a href="http://rosettacode.org/wiki/Run-length_encoding#MMIX"><span class="tocnumber">37</span> <span class="toctext">MMIX</span></a></li>
<li class="toclevel-1 tocsection-42"><a href="http://rosettacode.org/wiki/Run-length_encoding#Objective-C"><span class="tocnumber">38</span> <span class="toctext">Objective-C</span></a></li>
<li class="toclevel-1 tocsection-43"><a href="http://rosettacode.org/wiki/Run-length_encoding#OCaml"><span class="tocnumber">39</span> <span class="toctext">OCaml</span></a></li>
<li class="toclevel-1 tocsection-44"><a href="http://rosettacode.org/wiki/Run-length_encoding#Oz"><span class="tocnumber">40</span> <span class="toctext">Oz</span></a></li>
<li class="toclevel-1 tocsection-45"><a href="http://rosettacode.org/wiki/Run-length_encoding#PARI.2FGP"><span class="tocnumber">41</span> <span class="toctext">PARI/GP</span></a></li>
<li class="toclevel-1 tocsection-46"><a href="http://rosettacode.org/wiki/Run-length_encoding#Pascal"><span class="tocnumber">42</span> <span class="toctext">Pascal</span></a></li>
<li class="toclevel-1 tocsection-47"><a href="http://rosettacode.org/wiki/Run-length_encoding#Perl"><span class="tocnumber">43</span> <span class="toctext">Perl</span></a></li>
<li class="toclevel-1 tocsection-48"><a href="http://rosettacode.org/wiki/Run-length_encoding#Perl_6"><span class="tocnumber">44</span> <span class="toctext">Perl 6</span></a></li>
<li class="toclevel-1 tocsection-49"><a href="http://rosettacode.org/wiki/Run-length_encoding#PHP"><span class="tocnumber">45</span> <span class="toctext">PHP</span></a></li>
<li class="toclevel-1 tocsection-50"><a href="http://rosettacode.org/wiki/Run-length_encoding#PicoLisp"><span class="tocnumber">46</span> <span class="toctext">PicoLisp</span></a></li>
<li class="toclevel-1 tocsection-51"><a href="http://rosettacode.org/wiki/Run-length_encoding#PL.2FI"><span class="tocnumber">47</span> <span class="toctext">PL/I</span></a></li>
<li class="toclevel-1 tocsection-52"><a href="http://rosettacode.org/wiki/Run-length_encoding#PowerBASIC"><span class="tocnumber">48</span> <span class="toctext">PowerBASIC</span></a></li>
<li class="toclevel-1 tocsection-53"><a href="http://rosettacode.org/wiki/Run-length_encoding#PowerShell"><span class="tocnumber">49</span> <span class="toctext">PowerShell</span></a></li>
<li class="toclevel-1 tocsection-54"><a href="http://rosettacode.org/wiki/Run-length_encoding#Prolog"><span class="tocnumber">50</span> <span class="toctext">Prolog</span></a></li>
<li class="toclevel-1 tocsection-55"><a href="http://rosettacode.org/wiki/Run-length_encoding#Pure"><span class="tocnumber">51</span> <span class="toctext">Pure</span></a></li>
<li class="toclevel-1 tocsection-56"><a href="http://rosettacode.org/wiki/Run-length_encoding#PureBasic"><span class="tocnumber">52</span> <span class="toctext">PureBasic</span></a></li>
<li class="toclevel-1 tocsection-57"><a href="http://rosettacode.org/wiki/Run-length_encoding#Python"><span class="tocnumber">53</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-1 tocsection-58"><a href="http://rosettacode.org/wiki/Run-length_encoding#R"><span class="tocnumber">54</span> <span class="toctext">R</span></a></li>
<li class="toclevel-1 tocsection-59"><a href="http://rosettacode.org/wiki/Run-length_encoding#REXX"><span class="tocnumber">55</span> <span class="toctext">REXX</span></a>
<ul>
<li class="toclevel-2 tocsection-60"><a href="http://rosettacode.org/wiki/Run-length_encoding#encoding"><span class="tocnumber">55.1</span> <span class="toctext">encoding</span></a></li>
<li class="toclevel-2 tocsection-61"><a href="http://rosettacode.org/wiki/Run-length_encoding#decoding"><span class="tocnumber">55.2</span> <span class="toctext">decoding</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-62"><a href="http://rosettacode.org/wiki/Run-length_encoding#Ruby"><span class="tocnumber">56</span> <span class="toctext">Ruby</span></a></li>
<li class="toclevel-1 tocsection-63"><a href="http://rosettacode.org/wiki/Run-length_encoding#Run_BASIC"><span class="tocnumber">57</span> <span class="toctext">Run BASIC</span></a></li>
<li class="toclevel-1 tocsection-64"><a href="http://rosettacode.org/wiki/Run-length_encoding#Scala"><span class="tocnumber">58</span> <span class="toctext">Scala</span></a></li>
<li class="toclevel-1 tocsection-65"><a href="http://rosettacode.org/wiki/Run-length_encoding#Scheme"><span class="tocnumber">59</span> <span class="toctext">Scheme</span></a></li>
<li class="toclevel-1 tocsection-66"><a href="http://rosettacode.org/wiki/Run-length_encoding#sed"><span class="tocnumber">60</span> <span class="toctext">sed</span></a></li>
<li class="toclevel-1 tocsection-67"><a href="http://rosettacode.org/wiki/Run-length_encoding#Seed7"><span class="tocnumber">61</span> <span class="toctext">Seed7</span></a></li>
<li class="toclevel-1 tocsection-68"><a href="http://rosettacode.org/wiki/Run-length_encoding#Smalltalk"><span class="tocnumber">62</span> <span class="toctext">Smalltalk</span></a></li>
<li class="toclevel-1 tocsection-69"><a href="http://rosettacode.org/wiki/Run-length_encoding#SNOBOL4"><span class="tocnumber">63</span> <span class="toctext">SNOBOL4</span></a></li>
<li class="toclevel-1 tocsection-70"><a href="http://rosettacode.org/wiki/Run-length_encoding#Standard_ML"><span class="tocnumber">64</span> <span class="toctext">Standard ML</span></a></li>
<li class="toclevel-1 tocsection-71"><a href="http://rosettacode.org/wiki/Run-length_encoding#Tcl"><span class="tocnumber">65</span> <span class="toctext">Tcl</span></a></li>
<li class="toclevel-1 tocsection-72"><a href="http://rosettacode.org/wiki/Run-length_encoding#TUSCRIPT"><span class="tocnumber">66</span> <span class="toctext">TUSCRIPT</span></a></li>
<li class="toclevel-1 tocsection-73"><a href="http://rosettacode.org/wiki/Run-length_encoding#Ursala"><span class="tocnumber">67</span> <span class="toctext">Ursala</span></a></li>
<li class="toclevel-1 tocsection-74"><a href="http://rosettacode.org/wiki/Run-length_encoding#Vedit_macro_language"><span class="tocnumber">68</span> <span class="toctext">Vedit macro language</span></a></li>
<li class="toclevel-1 tocsection-75"><a href="http://rosettacode.org/wiki/Run-length_encoding#XPL0"><span class="tocnumber">69</span> <span class="toctext">XPL0</span></a></li>
</ul>
</td></tr></tbody></table>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=1" title="Edit section: Ada">edit</a>]</span> <span class="mw-headline" id="Ada"><a href="http://rosettacode.org/wiki/Category:Ada" title="Category:Ada">Ada</a></span></h2>
<pre class="ada highlighted_source"><span class="kw3">with</span> Ada.<span class="me1">Text_IO</span>;        <span class="kw3">use</span> Ada.<span class="me1">Text_IO</span>;<br><span class="kw3">with</span> Ada.<span class="me1">Strings</span>.<span class="me1">Fixed</span>;  <span class="kw3">use</span> Ada.<span class="me1">Strings</span>.<span class="me1">Fixed</span>;<br><span class="kw3">procedure</span> Test_Run_Length_Encoding <span class="kw1">is</span><br>   <span class="kw3">function</span> Encode <span class="br0">(</span>Data&nbsp;: String<span class="br0">)</span> <span class="kw1">return</span> String <span class="kw1">is</span><br>   <span class="kw1">begin</span><br>      <span class="kw1">if</span> Data'Length = <span class="nu0">0</span> <span class="kw1">then</span><br>         <span class="kw1">return</span> <span class="st0">""</span>;<br>      <span class="kw1">else</span><br>         <span class="kw1">declare</span><br>            Code &nbsp;: <span class="kw3">constant</span> Character&nbsp;:= Data <span class="br0">(</span>Data'First<span class="br0">)</span>;<br>            Index&nbsp;: Integer&nbsp;:= Data'First + <span class="nu0">1</span>;<br>         <span class="kw1">begin</span><br>            <span class="kw1">while</span> Index &lt;= Data'Last <span class="kw2">and</span> <span class="kw1">then</span> Code = Data <span class="br0">(</span>Index<span class="br0">)</span> <span class="kw1">loop</span><br>               Index&nbsp;:= Index + <span class="nu0">1</span>;<br>            <span class="kw1">end</span> <span class="kw1">loop</span>;<br>            <span class="kw1">declare</span><br>               Prefix&nbsp;: <span class="kw3">constant</span> String&nbsp;:= Integer'Image <span class="br0">(</span>Index - Data'First<span class="br0">)</span>;<br>            <span class="kw1">begin</span><br>               <span class="kw1">return</span> Prefix <span class="br0">(</span><span class="nu0">2</span>..<span class="me1">Prefix</span>'Last<span class="br0">)</span> &amp; Code &amp; Encode <span class="br0">(</span>Data <span class="br0">(</span>Index..<span class="me1">Data</span>'Last<span class="br0">)</span><span class="br0">)</span>;<br>            <span class="kw1">end</span>;<br>         <span class="kw1">end</span>;<br>      <span class="kw1">end</span> <span class="kw1">if</span>;<br>   <span class="kw1">end</span> Encode;<br>   <span class="kw3">function</span> Decode <span class="br0">(</span>Data&nbsp;: String<span class="br0">)</span> <span class="kw1">return</span> String <span class="kw1">is</span><br>   <span class="kw1">begin</span><br>      <span class="kw1">if</span> Data'Length = <span class="nu0">0</span> <span class="kw1">then</span><br>         <span class="kw1">return</span> <span class="st0">""</span>;<br>      <span class="kw1">else</span><br>         <span class="kw1">declare</span><br>            Index&nbsp;: Integer&nbsp;:= Data'First;<br>            Count&nbsp;: Natural&nbsp;:= <span class="nu0">0</span>;<br>         <span class="kw1">begin</span><br>            <span class="kw1">while</span> Index &lt; Data'Last <span class="kw2">and</span> <span class="kw1">then</span> Data <span class="br0">(</span>Index<span class="br0">)</span> <span class="kw3">in</span> '<span class="nu0">0</span>'..'<span class="nu0">9</span>' <span class="kw1">loop</span><br>               Count&nbsp;:= Count * <span class="nu0">10</span> + Character'Pos <span class="br0">(</span>Data <span class="br0">(</span>Index<span class="br0">)</span><span class="br0">)</span> - Character'Pos <span class="br0">(</span>'<span class="nu0">0</span>'<span class="br0">)</span>;<br>               Index&nbsp;:= Index + <span class="nu0">1</span>;<br>            <span class="kw1">end</span> <span class="kw1">loop</span>;<br>            <span class="kw1">if</span> Index &gt; Data'First <span class="kw1">then</span><br>               <span class="kw1">return</span> Count * Data <span class="br0">(</span>Index<span class="br0">)</span> &amp; Decode <span class="br0">(</span>Data <span class="br0">(</span>Index + <span class="nu0">1</span>..<span class="me1">Data</span>'Last<span class="br0">)</span><span class="br0">)</span>;<br>            <span class="kw1">else</span><br>               <span class="kw1">return</span> Data;<br>            <span class="kw1">end</span> <span class="kw1">if</span>;<br>         <span class="kw1">end</span>;<br>      <span class="kw1">end</span> <span class="kw1">if</span>;<br>   <span class="kw1">end</span> Decode;<br><span class="kw1">begin</span><br>   Put_Line <span class="br0">(</span>Encode <span class="br0">(</span><span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="br0">)</span><span class="br0">)</span>;<br>   Put_Line <span class="br0">(</span>Decode <span class="br0">(</span><span class="st0">"12W1B12W3B24W1B14W"</span><span class="br0">)</span><span class="br0">)</span>;<br><span class="kw1">end</span> Test_Run_Length_Encoding;</pre>
<p>Sample output:
</p>
<pre>12W1B12W3B24W1B14W
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=2" title="Edit section: AWK">edit</a>]</span> <span class="mw-headline" id="AWK"><a href="http://rosettacode.org/wiki/Category:AWK" title="Category:AWK">AWK</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/Gawk" title="Gawk">gawk</a></div>
<p>It works with "textual" input. Lines containing numbers are skipped, since they can't be represented in a not ambiguous way in this implementation (e.g. "11AA" would be encoded as "212A", which would be decoded as A repeated 212 times!)
</p><p><b>Encoding</b>
</p>
<pre class="awk highlighted_source"><span class="kw2">BEGIN</span> <span class="br0">{</span><br> <span class="kw3">FS</span>=<span class="st0">""</span><br><span class="br0">}</span><br><span class="sy3">/^</span><span class="br0">[</span><span class="sy3">^</span><span class="nu0">0</span><span class="sy3">-</span><span class="nu0">9</span><span class="br0">]</span><span class="sy3">+</span>$<span class="sy3">/</span> <span class="br0">{</span><br>  cp = <span class="re0">$1</span>; j = <span class="nu0">0</span><br>  <span class="kw1">for</span><span class="br0">(</span>i=<span class="nu0">1</span>; i <span class="sy2">&lt;=</span> <span class="kw3">NF</span>; i<span class="sy3">++</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw1">if</span> <span class="br0">(</span> <span class="re0">$i</span> <span class="sy2">==</span> cp <span class="br0">)</span> <span class="br0">{</span><br>      j<span class="sy3">++</span>; <br>    <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>      <span class="kw5">printf</span><span class="br0">(</span><span class="st0">"%d%c"</span>, j, cp<span class="br0">)</span><br>      j = <span class="nu0">1</span><br>    <span class="br0">}</span><br>    cp = <span class="re0">$i</span><br>  <span class="br0">}</span><br>  <span class="kw5">printf</span><span class="br0">(</span><span class="st0">"%d%c"</span>, j, cp<span class="br0">)</span><br><span class="br0">}</span></pre>
<p><b>Decoding</b>
</p>
<pre class="awk highlighted_source"><span class="kw2">BEGIN</span> <span class="br0">{</span><br>  <span class="kw3">RS</span>=<span class="st0">"[0-9]+[^0-9]"</span><br>  final = <span class="st0">""</span>;<br><span class="br0">}</span><br><span class="br0">{</span><br>  <span class="kw4">match</span><span class="br0">(</span>RT, <span class="sy3">/</span><span class="br0">(</span><span class="br0">[</span><span class="nu0">0</span><span class="sy3">-</span><span class="nu0">9</span><span class="br0">]</span><span class="sy3">+</span><span class="br0">)</span><span class="br0">(</span><span class="br0">[</span><span class="sy3">^</span><span class="nu0">0</span><span class="sy3">-</span><span class="nu0">9</span><span class="br0">]</span><span class="br0">)</span><span class="sy3">/</span>, r<span class="br0">)</span><br>  <span class="kw1">for</span><span class="br0">(</span>i=<span class="nu0">0</span>; i <span class="sy2">&lt;</span> <span class="kw4">int</span><span class="br0">(</span>r<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span>; i<span class="sy3">++</span><span class="br0">)</span> <span class="br0">{</span><br>    final = final r<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><br>  <span class="br0">}</span><br><span class="br0">}</span><br><span class="kw2">END</span> <span class="br0">{</span><br>  <span class="kw5">print</span> final<br><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=3" title="Edit section: ALGOL 68">edit</a>]</span> <span class="mw-headline" id="ALGOL_68"><a href="http://rosettacode.org/wiki/Category:ALGOL_68" title="Category:ALGOL 68">ALGOL 68</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/ALGOL_68" title="ALGOL 68" class="mw-redirect">ALGOL 68</a> version Revision 1 - no extensions to language used</div>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/ALGOL_68G" title="ALGOL 68G" class="mw-redirect">ALGOL 68G</a> version Any - tested with release <a rel="nofollow" class="external text" href="http://sourceforge.net/projects/algol68/files/algol68g/algol68g-1.18.0/algol68g-1.18.0-9h.tiny.el5.centos.fc11.i386.rpm/download">1.18.0-9h.tiny</a></div>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/ELLA_ALGOL_68" title="ELLA ALGOL 68" class="mw-redirect">ELLA ALGOL 68</a> version Any (with appropriate job cards) - tested with release <a rel="nofollow" class="external text" href="http://sourceforge.net/projects/algol68/files/algol68toc/algol68toc-1.8.8d/algol68toc-1.8-8d.fc9.i386.rpm/download">1.8-8d</a></div>
<p>Note: The following uses iterators, eliminating the need of declaring arbitrarily large CHAR arrays for caching.
</p>
<pre class="algol68 highlighted_source"><span class="kw3">STRING</span> input <span class="sy1">:=</span> <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="sy1">;</span><br><span class="kw3">STRING</span> output <span class="sy1">:=</span> <span class="st0">"12W1B12W3B24W1B14W"</span><span class="sy1">;</span><br>&nbsp;<br><span class="kw4">MODE</span> YIELDCHAR <span class="sy1">=</span> <span class="kw4">PROC</span><span class="br0">(</span><span class="kw3">CHAR</span><span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">;</span><br><span class="kw4">MODE</span> GENCHAR <span class="sy1">=</span> <span class="kw4">PROC</span><span class="br0">(</span>YIELDCHAR<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">;</span><br>&nbsp;<br><span class="kw4">PROC</span> gen char string <span class="sy1">=</span> <span class="br0">(</span><span class="kw4">REF</span> <span class="kw3">STRING</span> s<span class="sy1">,</span> YIELDCHAR yield<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">:</span><br>  <span class="kw2">FOR</span> i <span class="kw2">FROM</span> <span class="kw8">LWB</span> s <span class="kw2">TO</span> <span class="kw8">UPB</span> s <span class="kw2">DO</span> yield<span class="br0">(</span>s<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span> <span class="kw2">OD</span><span class="sy1">;</span><br>&nbsp;<br>CO<br><span class="coMULTI"># Note: The following 2 lines use currying. This not supported by ELLA ALGOL 68RS #</span><br>GENCHAR input seq <span class="sy1">=</span> gen char string<span class="br0">(</span>input<span class="sy1">,</span><span class="br0">)</span><span class="sy1">,</span><br>        output seq <span class="sy1">=</span> gen char string<span class="br0">(</span>output<span class="sy1">,</span><span class="br0">)</span><span class="sy1">;</span><br><span class="kw2">END</span> CO<br>&nbsp;<br>GENCHAR<br>  input seq <span class="sy1">=</span> <span class="br0">(</span>YIELDCHAR yield<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">:</span> gen char string<span class="br0">(</span>input<span class="sy1">,</span> yield<span class="br0">)</span><span class="sy1">,</span><br>  output seq <span class="sy1">=</span> <span class="br0">(</span>YIELDCHAR yield<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">:</span> gen char string<span class="br0">(</span>output<span class="sy1">,</span> yield<span class="br0">)</span><span class="sy1">;</span><br>&nbsp;<br><span class="kw4">PROC</span> gen encode <span class="sy1">=</span> <span class="br0">(</span>GENCHAR gen char<span class="sy1">,</span> YIELDCHAR yield<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">:</span> <span class="br0">(</span><br>  <span class="kw3">INT</span> count <span class="sy1">:=</span> 0<span class="sy1">;</span><br>  <span class="kw3">CHAR</span> prev<span class="sy1">;</span><br><span class="coMULTI"># FOR CHAR c IN #</span> gen char<span class="br0">(</span> <span class="coMULTI"># ) DO ( #</span><br><span class="coMULTI">##</span>   <span class="br0">(</span><span class="kw3">CHAR</span> c<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">:</span> <span class="br0">(</span><br>      <span class="kw2">IF</span> count <span class="sy1">=</span> 0 <span class="kw2">THEN</span><br>        count <span class="sy1">:=</span> 1<span class="sy1">;</span><br>        prev <span class="sy1">:=</span> c<br>      <span class="kw2">ELIF</span> c <span class="kw15">NE</span> prev <span class="kw2">THEN</span><br>        <span class="kw3">STRING</span> str count <span class="sy1">:=</span> <span class="kw22">whole</span><span class="br0">(</span>count<span class="sy1">,</span>0<span class="br0">)</span><span class="sy1">;</span><br>        gen char string<span class="br0">(</span>str count<span class="sy1">,</span> yield<span class="br0">)</span><span class="sy1">;</span> count <span class="sy1">:=</span> 1<span class="sy1">;</span><br>        yield<span class="br0">(</span>prev<span class="br0">)</span><span class="sy1">;</span> prev <span class="sy1">:=</span> c<br>      <span class="kw2">ELSE</span><br>        count <span class="sy1">+:=</span>1<br>      <span class="kw2">FI</span><br><span class="coMULTI"># OD #</span> <span class="br0">)</span><span class="br0">)</span><span class="sy1">;</span><br>  <span class="kw2">IF</span> count <span class="kw15">NE</span> 0 <span class="kw2">THEN</span><br>    <span class="kw3">STRING</span> str count <span class="sy1">:=</span> <span class="kw22">whole</span><span class="br0">(</span>count<span class="sy1">,</span>0<span class="br0">)</span><span class="sy1">;</span><br>    gen char string<span class="br0">(</span>str count<span class="sy1">,</span>yield<span class="br0">)</span><span class="sy1">;</span><br>    yield<span class="br0">(</span>prev<span class="br0">)</span><br>  <span class="kw2">FI</span><br><span class="br0">)</span><span class="sy1">;</span><br>&nbsp;<br><span class="kw3">STRING</span> zero2nine <span class="sy1">=</span> <span class="st0">"0123456789"</span><span class="sy1">;</span><br>&nbsp;<br><span class="kw4">PROC</span> gen decode <span class="sy1">=</span> <span class="br0">(</span>GENCHAR gen char<span class="sy1">,</span> YIELDCHAR yield<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">:</span> <span class="br0">(</span><br>  <span class="kw3">INT</span> repeat <span class="sy1">:=</span> 0<span class="sy1">;</span><br><span class="coMULTI"># FOR CHAR c IN #</span> gen char<span class="br0">(</span> <span class="coMULTI"># ) DO ( #</span><br><span class="coMULTI">##</span>   <span class="br0">(</span><span class="kw3">CHAR</span> c<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">:</span> <span class="br0">(</span><br>    <span class="kw2">IF</span> <span class="kw26">char in string</span><span class="br0">(</span>c<span class="sy1">,</span> <span class="kw4">LOC</span> <span class="kw3">INT</span><span class="sy1">,</span> zero2nine<span class="br0">)</span> <span class="kw2">THEN</span><br>      repeat <span class="sy1">:=</span> repeat<span class="sy1">*</span>10 <span class="sy1">+</span> <span class="kw8">ABS</span> c <span class="sy1">-</span> <span class="kw8">ABS</span> <span class="st0">"0"</span><br>    <span class="kw2">ELSE</span><br>      <span class="kw2">FOR</span> i <span class="kw2">TO</span> repeat <span class="kw2">DO</span> yield<span class="br0">(</span>c<span class="br0">)</span> <span class="kw2">OD</span><span class="sy1">;</span><br>      repeat <span class="sy1">:=</span> 0<br>    <span class="kw2">FI</span><br><span class="coMULTI"># OD #</span>  <span class="br0">)</span><span class="br0">)</span><br><span class="br0">)</span><span class="sy1">;</span><br>&nbsp;<br><span class="coMULTI"># iterate through input string #</span><br><span class="kw22">print</span><span class="br0">(</span><span class="st0">"Encode input: "</span><span class="br0">)</span><span class="sy1">;</span><br><span class="coMULTI"># FOR CHAR c IN #</span> gen encode<span class="br0">(</span>input seq<span class="sy1">,</span> <span class="coMULTI"># ) DO ( #</span><br><span class="coMULTI">##</span>   <span class="br0">(</span><span class="kw3">CHAR</span> c<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">:</span><br>    <span class="kw22">print</span><span class="br0">(</span>c<span class="br0">)</span><br><span class="coMULTI"># OD #</span> <span class="br0">)</span><span class="sy1">;</span><br><span class="kw22">print</span><span class="br0">(</span><span class="kw22">new line</span><span class="br0">)</span><span class="sy1">;</span><br>&nbsp;<br><span class="coMULTI"># iterate through output string #</span><br><span class="kw22">print</span><span class="br0">(</span><span class="st0">"Decode output: "</span><span class="br0">)</span><span class="sy1">;</span><br><span class="coMULTI"># FOR CHAR c IN #</span> gen decode<span class="br0">(</span>output seq<span class="sy1">,</span> <span class="coMULTI"># ) DO ( #</span><br><span class="coMULTI">##</span>   <span class="br0">(</span><span class="kw3">CHAR</span> c<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">:</span><br>    <span class="kw22">print</span><span class="br0">(</span>c<span class="br0">)</span><br><span class="coMULTI"># OD #</span> <span class="br0">)</span><span class="sy1">;</span><br><span class="kw22">print</span><span class="br0">(</span><span class="kw22">new line</span><span class="br0">)</span></pre>
<p>Output:
</p>
<pre>Encode input: 12W1B12W3B24W1B14W
Decode output: WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=4" title="Edit section: APL">edit</a>]</span> <span class="mw-headline" id="APL"><a href="http://rosettacode.org/wiki/Category:APL" title="Category:APL">APL</a></span></h2>
<pre class="text highlighted_source">    ∇ ret←RLL rll;count<br>[1]   count←∣2-/((1,(2≠/rll),1)×⍳1+⍴rll)~0<br>[2]   ret←(⍕count,¨(1,2≠/rll)/rll)~' '<br>    ∇<br>&nbsp;</pre>
<p>Sample Output:
</p>
<pre>      RLL 'WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW'
12W1B12W3B24W1B14W
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=5" title="Edit section: AutoHotkey">edit</a>]</span> <span class="mw-headline" id="AutoHotkey"><a href="http://rosettacode.org/wiki/Category:AutoHotkey" title="Category:AutoHotkey">AutoHotkey</a></span></h2>
<pre class="autohotkey highlighted_source"><a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a>&nbsp;% key <span class="sy0">:=</span> rle_encode<span class="br0">(</span><span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="br0">)</span><br><a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a>&nbsp;% rle_decode<span class="br0">(</span>key<span class="br0">)</span><br>&nbsp;<br>rle_encode<span class="br0">(</span>message<span class="br0">)</span><br><span class="br0">{</span><br>  <a href="http://www.autohotkey.com/docs/commands/StringLeft.htm"><span class="kw3">StringLeft</span></a><span class="sy0">,</span> previous<span class="sy0">,</span> message<span class="sy0">,</span> <span class="nu0">1</span><br>  <a href="http://www.autohotkey.com/docs/commands/StringRight.htm"><span class="kw3">StringRight</span></a><span class="sy0">,</span> last<span class="sy0">,</span> message<span class="sy0">,</span> <span class="nu0">1</span><br>  message <span class="sy0">.=</span> <a href="http://www.autohotkey.com/docs/Functions.htm#BuiltIn"><span class="kw4">Asc</span></a><span class="br0">(</span><a href="http://www.autohotkey.com/docs/Functions.htm#BuiltIn"><span class="kw4">Chr</span></a><span class="br0">(</span>last<span class="br0">)</span><span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span><br>  count <span class="sy0">=</span> <span class="nu0">0</span><br>  <a href="http://www.autohotkey.com/docs/commands/Loop.htm"><span class="kw3">Loop</span></a><span class="sy0">,</span> Parse<span class="sy0">,</span> message<br>  <span class="br0">{</span><br>    <span class="kw1">If</span> <span class="br0">(</span>previous <span class="sy0">==</span> <a href="http://www.autohotkey.com/docs/Variables.htm#A_LoopField"><span class="kw2">A_LoopField</span></a><span class="br0">)</span><br>      count <span class="sy0">+=</span><span class="nu0">1</span><br>    <span class="kw1">Else</span><br>    <span class="br0">{</span><br>      output <span class="sy0">.=</span> previous <span class="sy0">.</span> count<br>      previous <span class="sy0">:=</span> <a href="http://www.autohotkey.com/docs/Variables.htm#A_LoopField"><span class="kw2">A_LoopField</span></a> <br>      count <span class="sy0">=</span> <span class="nu0">1</span><br>    <span class="br0">}</span><br>  <span class="br0">}</span><br>  <span class="kw1">Return</span> output<br><span class="br0">}</span><br>&nbsp;<br>rle_decode<span class="br0">(</span>message<span class="br0">)</span><br><span class="br0">{</span><br>  pos <span class="sy0">=</span> <span class="nu0">1</span><br>  <span class="kw1">While</span><span class="sy0">,</span> item <span class="sy0">:=</span> <a href="http://www.autohotkey.com/docs/commands/RegExMatch.htm"><span class="kw3">RegExMatch</span></a><span class="br0">(</span>message<span class="sy0">,</span> <span class="st0">"\D"</span><span class="sy0">,</span> char<span class="sy0">,</span> pos<span class="br0">)</span><br>  <span class="br0">{</span><br>    digpos <span class="sy0">:=</span> <a href="http://www.autohotkey.com/docs/commands/RegExMatch.htm"><span class="kw3">RegExMatch</span></a><span class="br0">(</span>message<span class="sy0">,</span> <span class="st0">"\d+"</span><span class="sy0">,</span> dig<span class="sy0">,</span> item<span class="br0">)</span><br>    <a href="http://www.autohotkey.com/docs/commands/Loop.htm"><span class="kw3">Loop</span></a><span class="sy0">,</span>&nbsp;% dig<br>      output <span class="sy0">.=</span> char<br>    pos <span class="sy0">:=</span> digpos <br>  <span class="br0">}</span><br>  <span class="kw1">Return</span> output<br><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=6" title="Edit section: BASIC">edit</a>]</span> <span class="mw-headline" id="BASIC"><a href="http://rosettacode.org/wiki/Category:BASIC" title="Category:BASIC">BASIC</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/QBasic" title="QBasic" class="mw-redirect">QBasic</a></div>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/Run-length_encoding#PowerBASIC" title="Run-length encoding">PowerBASIC</a></div>
<pre class="qbasic highlighted_source"><a href="http://www.qbasicnews.com/qboho/qckdeclare.shtml"><span class="kw3">DECLARE</span></a> <span class="kw1">FUNCTION</span> RLDecode$ <span class="br0">(</span>i <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qckstring.shtml"><span class="kw3">STRING</span></a><span class="br0">)</span><br><a href="http://www.qbasicnews.com/qboho/qckdeclare.shtml"><span class="kw3">DECLARE</span></a> <span class="kw1">FUNCTION</span> RLEncode$ <span class="br0">(</span>i <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qckstring.shtml"><span class="kw3">STRING</span></a><span class="br0">)</span><br>&nbsp;<br><a href="http://www.qbasicnews.com/qboho/qckdim.shtml"><span class="kw3">DIM</span></a> initial <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qckstring.shtml"><span class="kw3">STRING</span></a><span class="sy0">,</span> encoded <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qckstring.shtml"><span class="kw3">STRING</span></a><span class="sy0">,</span> decoded <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qckstring.shtml"><span class="kw3">STRING</span></a><br>&nbsp;<br><a href="http://www.qbasicnews.com/qboho/qckinput.shtml"><span class="kw3">INPUT</span></a> <span class="st0">"Type something: "</span><span class="sy0">,</span> initial<br>encoded <span class="sy0">=</span> RLEncode<span class="br0">(</span>initial<span class="br0">)</span><br>decoded <span class="sy0">=</span> RLDecode<span class="br0">(</span>encoded<span class="br0">)</span><br><a href="http://www.qbasicnews.com/qboho/qckprint.shtml"><span class="kw3">PRINT</span></a> initial<br><a href="http://www.qbasicnews.com/qboho/qckprint.shtml"><span class="kw3">PRINT</span></a> encoded<br><a href="http://www.qbasicnews.com/qboho/qckprint.shtml"><span class="kw3">PRINT</span></a> decoded<br>&nbsp;<br><span class="kw1">FUNCTION</span> RLDecode$ <span class="br0">(</span>i <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qckstring.shtml"><span class="kw3">STRING</span></a><span class="br0">)</span><br>    <a href="http://www.qbasicnews.com/qboho/qckdim.shtml"><span class="kw3">DIM</span></a> Loop0 <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qcklong.shtml"><span class="kw3">LONG</span></a><span class="sy0">,</span> rCount <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qckstring.shtml"><span class="kw3">STRING</span></a><span class="sy0">,</span> outP <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qckstring.shtml"><span class="kw3">STRING</span></a><span class="sy0">,</span> m <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qckstring.shtml"><span class="kw3">STRING</span></a><br>&nbsp;<br>    <span class="kw1">FOR</span> Loop0 <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">TO</span> <a href="http://www.qbasicnews.com/qboho/qcklen.shtml"><span class="kw3">LEN</span></a><span class="br0">(</span>i<span class="br0">)</span><br>        m <span class="sy0">=</span> <a href="http://www.qbasicnews.com/qboho/qckmid%24.shtml"><span class="kw3">MID$</span></a><span class="br0">(</span>i<span class="sy0">,</span> Loop0<span class="sy0">,</span> <span class="nu0">1</span><span class="br0">)</span><br>        <span class="kw1">SELECT</span> <span class="kw1">CASE</span> m<br>            <span class="kw1">CASE</span> <span class="st0">"0"</span> <span class="kw1">TO</span> <span class="st0">"9"</span><br>                rCount <span class="sy0">=</span> rCount <span class="sy0">+</span> m<br>            <span class="kw1">CASE</span> <span class="kw1">ELSE</span><br>                <span class="kw1">IF</span> <a href="http://www.qbasicnews.com/qboho/qcklen.shtml"><span class="kw3">LEN</span></a><span class="br0">(</span>rCount<span class="br0">)</span> <span class="kw1">THEN</span><br>                    outP <span class="sy0">=</span> outP <span class="sy0">+</span> <a href="http://www.qbasicnews.com/qboho/qckstring%24.shtml"><span class="kw3">STRING$</span></a><span class="br0">(</span><a href="http://www.qbasicnews.com/qboho/qckval.shtml"><span class="kw3">VAL</span></a><span class="br0">(</span>rCount<span class="br0">)</span><span class="sy0">,</span> m<span class="br0">)</span><br>                    rCount <span class="sy0">=</span> <span class="st0">""</span><br>                <span class="kw1">ELSE</span><br>                    outP <span class="sy0">=</span> outP <span class="sy0">+</span> m<br>                <a href="http://www.qbasicnews.com/qboho/qckend.shtml"><span class="kw3">END</span></a> <span class="kw1">IF</span><br>        <a href="http://www.qbasicnews.com/qboho/qckend.shtml"><span class="kw3">END</span></a> <span class="kw1">SELECT</span><br>    <span class="kw1">NEXT</span><br>    RLDecode$ <span class="sy0">=</span> outP<br><a href="http://www.qbasicnews.com/qboho/qckend.shtml"><span class="kw3">END</span></a> <span class="kw1">FUNCTION</span><br>&nbsp;<br><span class="kw1">FUNCTION</span> RLEncode$ <span class="br0">(</span>i <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qckstring.shtml"><span class="kw3">STRING</span></a><span class="br0">)</span><br>    <a href="http://www.qbasicnews.com/qboho/qckdim.shtml"><span class="kw3">DIM</span></a> tmp1 <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qckstring.shtml"><span class="kw3">STRING</span></a><span class="sy0">,</span> tmp2 <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qckstring.shtml"><span class="kw3">STRING</span></a><span class="sy0">,</span> outP <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qckstring.shtml"><span class="kw3">STRING</span></a><br>    <a href="http://www.qbasicnews.com/qboho/qckdim.shtml"><span class="kw3">DIM</span></a> Loop0 <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qcklong.shtml"><span class="kw3">LONG</span></a><span class="sy0">,</span> rCount <a href="http://www.qbasicnews.com/qboho/qckas.shtml"><span class="kw3">AS</span></a> <a href="http://www.qbasicnews.com/qboho/qcklong.shtml"><span class="kw3">LONG</span></a><br>&nbsp;<br>    tmp1 <span class="sy0">=</span> <a href="http://www.qbasicnews.com/qboho/qckmid%24.shtml"><span class="kw3">MID$</span></a><span class="br0">(</span>i<span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">1</span><span class="br0">)</span><br>    tmp2 <span class="sy0">=</span> tmp1<br>    rCount <span class="sy0">=</span> <span class="nu0">1</span><br>&nbsp;<br>    <span class="kw1">FOR</span> Loop0 <span class="sy0">=</span> <span class="nu0">2</span> <span class="kw1">TO</span> <a href="http://www.qbasicnews.com/qboho/qcklen.shtml"><span class="kw3">LEN</span></a><span class="br0">(</span>i<span class="br0">)</span><br>        tmp1 <span class="sy0">=</span> <a href="http://www.qbasicnews.com/qboho/qckmid%24.shtml"><span class="kw3">MID$</span></a><span class="br0">(</span>i<span class="sy0">,</span> Loop0<span class="sy0">,</span> <span class="nu0">1</span><span class="br0">)</span><br>        <span class="kw1">IF</span> tmp1 <span class="sy0">&lt;&gt;</span> tmp2 <span class="kw1">THEN</span><br>            outP <span class="sy0">=</span> outP <span class="sy0">+</span> <a href="http://www.qbasicnews.com/qboho/qckltrim%24.shtml"><span class="kw3">LTRIM$</span></a><span class="br0">(</span><a href="http://www.qbasicnews.com/qboho/qckrtrim%24.shtml"><span class="kw3">RTRIM$</span></a><span class="br0">(</span><a href="http://www.qbasicnews.com/qboho/qckstr%24.shtml"><span class="kw3">STR$</span></a><span class="br0">(</span>rCount<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">+</span> tmp2<br>            tmp2 <span class="sy0">=</span> tmp1<br>            rCount <span class="sy0">=</span> <span class="nu0">1</span><br>        <span class="kw1">ELSE</span><br>            rCount <span class="sy0">=</span> rCount <span class="sy0">+</span> <span class="nu0">1</span><br>        <a href="http://www.qbasicnews.com/qboho/qckend.shtml"><span class="kw3">END</span></a> <span class="kw1">IF</span><br>    <span class="kw1">NEXT</span><br>&nbsp;<br>    outP <span class="sy0">=</span> outP <span class="sy0">+</span> <a href="http://www.qbasicnews.com/qboho/qckltrim%24.shtml"><span class="kw3">LTRIM$</span></a><span class="br0">(</span><a href="http://www.qbasicnews.com/qboho/qckrtrim%24.shtml"><span class="kw3">RTRIM$</span></a><span class="br0">(</span><a href="http://www.qbasicnews.com/qboho/qckstr%24.shtml"><span class="kw3">STR$</span></a><span class="br0">(</span>rCount<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    outP <span class="sy0">=</span> outP <span class="sy0">+</span> tmp2<br>    RLEncode$ <span class="sy0">=</span> outP<br><a href="http://www.qbasicnews.com/qboho/qckend.shtml"><span class="kw3">END</span></a> <span class="kw1">FUNCTION</span></pre>
<p>Sample output (last one shows errors from using numbers in input string):
</p>
<pre>Type something: aaaaeeeeeeiiiioooouuy
aaaaeeeeeeiiiioooouuy
4a6e4i4o2u1y
aaaaeeeeeeiiiioooouuy

Type something: My dog has fleas.
My dog has fleas.
1M1y1 1d1o1g1 1h1a1s1 1f1l1e1a1s1.
My dog has fleas.

Type something: 1r
1r
111r
rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=7" title="Edit section: BBC BASIC">edit</a>]</span> <span class="mw-headline" id="BBC_BASIC"><a href="http://rosettacode.org/wiki/Category:BBC_BASIC" title="Category:BBC BASIC">BBC BASIC</a></span></h2>
<p>The run counts are indicated by means of character codes in the range 131 to 255.
</p>
<pre class="text highlighted_source">      input$ = "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"<br>      PRINT "Input:  " input$<br>      rle$ = FNencodeRLE(input$)<br>      output$ = FNdecodeRLE(rle$)<br>      PRINT "Output: " output$<br>      END<br>&nbsp;<br>      DEF FNencodeRLE(text$)<br>      LOCAL n%, r%, c$, o$<br>      n% = 1<br>      WHILE n% &lt;= LEN(text$)<br>        c$ = MID$(text$, n%, 1)<br>        n% += 1<br>        r% = 1<br>        WHILE c$ = MID$(text$, n%, 1) AND r% &lt; 127<br>          r% += 1<br>          n% += 1<br>        ENDWHILE<br>        IF r% &lt; 3 o$ += STRING$(r%, c$) ELSE o$ += CHR$(128+r%) + c$<br>      ENDWHILE<br>      = o$<br>&nbsp;<br>      DEF FNdecodeRLE(rle$)<br>      LOCAL n%, c$, o$<br>      n% = 1<br>      WHILE n% &lt;= LEN(rle$)<br>        c$ = MID$(rle$, n%, 1)<br>        n% += 1<br>        IF ASC(c$) &gt; 128 THEN<br>          o$ += STRING$(ASC(c$)-128, MID$(rle$, n%, 1))<br>          n% += 1<br>        ELSE<br>          o$ += c$<br>        ENDIF<br>      ENDWHILE<br>      = o$</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=8" title="Edit section: Bracmat">edit</a>]</span> <span class="mw-headline" id="Bracmat"><a href="http://rosettacode.org/wiki/Category:Bracmat" title="Category:Bracmat">Bracmat</a></span></h2>
<pre class="text highlighted_source">  ( run-length<br>  = character otherCharacter acc begin end<br>    .  &nbsp;:?acc<br>      &amp; 0:?begin<br>      &amp; @(&nbsp;!arg<br>        &nbsp;:  &nbsp;?<br>             [!begin<br>            &nbsp;%@?character<br>            &nbsp;?<br>             [?end<br>             (   (%@:~!character:?otherCharacter)&nbsp;?<br>               &amp;&nbsp;!acc&nbsp;!end+-1*!begin&nbsp;!character:?acc<br>               &amp;&nbsp;!otherCharacter:?character<br>               &amp;&nbsp;!end:?begin<br>               &amp; ~`<br>             | &amp;!acc&nbsp;!end+-1*!begin&nbsp;!character:?acc<br>             )<br>         )<br>      &amp; str$!acc<br>  )<br>&amp;   run-length$WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW<br>&nbsp;</pre>
<pre>  12W1B12W3B24W1B14W</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=9" title="Edit section: C">edit</a>]</span> <span class="mw-headline" id="C"><a href="http://rosettacode.org/wiki/Category:C" title="Category:C">C</a></span></h2>
<p>Encoder that can deal with byte streams.  Can encode/decode any byte values and any length with reasonable efficiency.  Also showing OO and polymophism with structs.
</p>
<pre class="c highlighted_source"><span class="co2">#include &lt;stdio.h&gt;</span><br><span class="co2">#include &lt;stdlib.h&gt;</span><br>&nbsp;<br><span class="kw4">typedef</span> <span class="kw4">struct</span> stream_t stream_t<span class="sy0">,</span> <span class="sy0">*</span>stream<span class="sy0">;</span><br><span class="kw4">struct</span> stream_t <span class="br0">{</span><br>	<span class="coMULTI">/* get funciton is supposed to return a byte value (0-255),<br>		or -1 to signify end of input */</span><br>	<span class="kw4">int</span> <span class="br0">(</span><span class="sy0">*</span>get<span class="br0">)</span><span class="br0">(</span>stream<span class="br0">)</span><span class="sy0">;</span><br>	<span class="coMULTI">/* put function does output, one byte at a time */</span><br>	<span class="kw4">int</span> <span class="br0">(</span><span class="sy0">*</span>put<span class="br0">)</span><span class="br0">(</span>stream<span class="sy0">,</span> <span class="kw4">int</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><span class="sy0">;</span><br>&nbsp;<br><span class="coMULTI">/* next two structs inherit from stream_t */</span><br><span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">{</span><br>	<span class="kw4">int</span> <span class="br0">(</span><span class="sy0">*</span>get<span class="br0">)</span><span class="br0">(</span>stream<span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw4">int</span> <span class="br0">(</span><span class="sy0">*</span>put<span class="br0">)</span><span class="br0">(</span>stream<span class="sy0">,</span> <span class="kw4">int</span><span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw4">char</span> <span class="sy0">*</span>string<span class="sy0">;</span><br>	<span class="kw4">int</span> pos<span class="sy0">;</span><br><span class="br0">}</span> string_stream<span class="sy0">;</span><br>&nbsp;<br><span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">{</span><br>	<span class="kw4">int</span> <span class="br0">(</span><span class="sy0">*</span>get<span class="br0">)</span><span class="br0">(</span>stream<span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw4">int</span> <span class="br0">(</span><span class="sy0">*</span>put<span class="br0">)</span><span class="br0">(</span>stream<span class="sy0">,</span> <span class="kw4">int</span><span class="br0">)</span><span class="sy0">;</span><br>	FILE <span class="sy0">*</span>fp<span class="sy0">;</span><br><span class="br0">}</span> file_stream<span class="sy0">;</span><br>&nbsp;<br><span class="coMULTI">/* methods for above streams */</span><br><span class="kw4">int</span> sget<span class="br0">(</span>stream in<span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">int</span> c<span class="sy0">;</span><br>	string_stream<span class="sy0">*</span> s <span class="sy0">=</span> <span class="br0">(</span>string_stream<span class="sy0">*</span><span class="br0">)</span> in<span class="sy0">;</span><br>	c <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span><span class="br0">)</span><span class="br0">(</span>s<span class="sy0">-&gt;</span>string<span class="br0">[</span>s<span class="sy0">-&gt;</span>pos<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw1">if</span> <span class="br0">(</span>c <span class="sy0">==</span> <span class="st0">'<span class="es5">\0</span>'</span><span class="br0">)</span> <span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span><br>	s<span class="sy0">-&gt;</span>pos<span class="sy0">++;</span><br>	<span class="kw1">return</span> c<span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">int</span> sput<span class="br0">(</span>stream out<span class="sy0">,</span> <span class="kw4">int</span> c<span class="br0">)</span><br><span class="br0">{</span><br>	string_stream<span class="sy0">*</span> s <span class="sy0">=</span> <span class="br0">(</span>string_stream<span class="sy0">*</span><span class="br0">)</span> out<span class="sy0">;</span><br>	s<span class="sy0">-&gt;</span>string<span class="br0">[</span>s<span class="sy0">-&gt;</span>pos<span class="sy0">++</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">(</span>c <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span> <span class="sy0">?</span> <span class="st0">'<span class="es5">\0</span>'</span> <span class="sy0">:</span> c<span class="sy0">;</span><br>	<span class="kw1">if</span> <span class="br0">(</span>c <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span> s<span class="sy0">-&gt;</span>pos <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">int</span> file_put<span class="br0">(</span>stream out<span class="sy0">,</span> <span class="kw4">int</span> c<span class="br0">)</span><br><span class="br0">{</span><br>	file_stream <span class="sy0">*</span>f <span class="sy0">=</span> <span class="br0">(</span>file_stream<span class="sy0">*</span><span class="br0">)</span> out<span class="sy0">;</span><br>	<span class="kw1">return</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/fputc.html"><span class="kw3">fputc</span></a><span class="br0">(</span>c<span class="sy0">,</span> f<span class="sy0">-&gt;</span>fp<span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="coMULTI">/* helper function */</span><br><span class="kw4">void</span> output<span class="br0">(</span>stream out<span class="sy0">,</span> <span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span> buf<span class="sy0">,</span> <span class="kw4">int</span> len<span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">int</span> i<span class="sy0">;</span><br>	out<span class="sy0">-&gt;</span>put<span class="br0">(</span>out<span class="sy0">,</span> <span class="nu0">128</span> <span class="sy0">+</span> len<span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> len<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span><br>		out<span class="sy0">-&gt;</span>put<span class="br0">(</span>out<span class="sy0">,</span> buf<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="coMULTI">/* Specification: encoded stream are unsigned bytes consisting of sequences.<br> * First byte of each sequence is the length, followed by a number of bytes.<br> * If length &lt;=128, the next byte is to be repeated length times;<br> * If length &gt; 128, the next (length - 128) bytes are not repeated.<br> * this is to improve efficiency for long non-repeating sequences.<br> * This scheme can encode arbitrary byte values efficiently.<br> * c.f. Adobe PDF spec RLE stream encoding (not exactly the same)<br> */</span><br><span class="kw4">void</span> encode<span class="br0">(</span>stream in<span class="sy0">,</span> stream out<span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">unsigned</span> <span class="kw4">char</span> buf<span class="br0">[</span><span class="nu0">256</span><span class="br0">]</span><span class="sy0">;</span><br>	<span class="kw4">int</span> len <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> repeat <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> end <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> c<span class="sy0">;</span><br>	<span class="kw4">int</span> <span class="br0">(</span><span class="sy0">*</span>get<span class="br0">)</span><span class="br0">(</span>stream<span class="br0">)</span> <span class="sy0">=</span> in<span class="sy0">-&gt;</span>get<span class="sy0">;</span><br>	<span class="kw4">int</span> <span class="br0">(</span><span class="sy0">*</span>put<span class="br0">)</span><span class="br0">(</span>stream<span class="sy0">,</span> <span class="kw4">int</span><span class="br0">)</span> <span class="sy0">=</span> out<span class="sy0">-&gt;</span>put<span class="sy0">;</span><br>&nbsp;<br>	<span class="kw1">while</span> <span class="br0">(</span><span class="sy0">!</span>end<span class="br0">)</span> <span class="br0">{</span><br>		end <span class="sy0">=</span> <span class="br0">(</span><span class="br0">(</span>c <span class="sy0">=</span> get<span class="br0">(</span>in<span class="br0">)</span><span class="br0">)</span> <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br>		<span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>end<span class="br0">)</span> <span class="br0">{</span><br>			buf<span class="br0">[</span>len<span class="sy0">++</span><span class="br0">]</span> <span class="sy0">=</span> c<span class="sy0">;</span><br>			<span class="kw1">if</span> <span class="br0">(</span>len <span class="sy0">&lt;=</span> <span class="nu0">1</span><span class="br0">)</span> <span class="kw1">continue</span><span class="sy0">;</span><br>		<span class="br0">}</span><br>&nbsp;<br>		<span class="kw1">if</span> <span class="br0">(</span>repeat<span class="br0">)</span> <span class="br0">{</span><br>			<span class="kw1">if</span> <span class="br0">(</span>buf<span class="br0">[</span>len <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span> <span class="sy0">!=</span> buf<span class="br0">[</span>len <span class="sy0">-</span> <span class="nu0">2</span><span class="br0">]</span><span class="br0">)</span><br>				repeat <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>			<span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>repeat <span class="sy0">||</span> len <span class="sy0">==</span> <span class="nu0">129</span> <span class="sy0">||</span> end<span class="br0">)</span> <span class="br0">{</span><br>				<span class="coMULTI">/* write out repeating bytes */</span><br>				put<span class="br0">(</span>out<span class="sy0">,</span> end <span class="sy0">?</span> len <span class="sy0">:</span> len <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br>				put<span class="br0">(</span>out<span class="sy0">,</span> buf<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>				buf<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=</span> buf<span class="br0">[</span>len <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span><span class="sy0">;</span><br>				len <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span><br>			<span class="br0">}</span><br>		<span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>			<span class="kw1">if</span> <span class="br0">(</span>buf<span class="br0">[</span>len <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span> <span class="sy0">==</span> buf<span class="br0">[</span>len <span class="sy0">-</span> <span class="nu0">2</span><span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span><br>				repeat <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span><br>				<span class="kw1">if</span> <span class="br0">(</span>len <span class="sy0">&gt;</span> <span class="nu0">2</span><span class="br0">)</span> <span class="br0">{</span><br>					output<span class="br0">(</span>out<span class="sy0">,</span> buf<span class="sy0">,</span> len <span class="sy0">-</span> <span class="nu0">2</span><span class="br0">)</span><span class="sy0">;</span><br>					buf<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=</span> buf<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> buf<span class="br0">[</span>len <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span><span class="sy0">;</span><br>					len <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span><br>				<span class="br0">}</span><br>				<span class="kw1">continue</span><span class="sy0">;</span><br>			<span class="br0">}</span><br>			<span class="kw1">if</span> <span class="br0">(</span>len <span class="sy0">==</span> <span class="nu0">128</span> <span class="sy0">||</span> end<span class="br0">)</span> <span class="br0">{</span><br>				output<span class="br0">(</span>out<span class="sy0">,</span> buf<span class="sy0">,</span> len<span class="br0">)</span><span class="sy0">;</span><br>				len <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>				repeat <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>			<span class="br0">}</span><br>		<span class="br0">}</span><br>	<span class="br0">}</span><br>	put<span class="br0">(</span>out<span class="sy0">,</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">void</span> decode<span class="br0">(</span>stream in<span class="sy0">,</span> stream out<span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">int</span> c<span class="sy0">,</span> i<span class="sy0">,</span> cnt<span class="sy0">;</span><br>	<span class="kw1">while</span> <span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span> <span class="br0">{</span><br>		c <span class="sy0">=</span> in<span class="sy0">-&gt;</span>get<span class="br0">(</span>in<span class="br0">)</span><span class="sy0">;</span><br>		<span class="kw1">if</span> <span class="br0">(</span>c <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span> <span class="kw1">return</span><span class="sy0">;</span><br>		<span class="kw1">if</span> <span class="br0">(</span>c <span class="sy0">&gt;</span> <span class="nu0">128</span><span class="br0">)</span> <span class="br0">{</span><br>			cnt <span class="sy0">=</span> c <span class="sy0">-</span> <span class="nu0">128</span><span class="sy0">;</span><br>			<span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> cnt<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span><br>				out<span class="sy0">-&gt;</span>put<span class="br0">(</span>out<span class="sy0">,</span> in<span class="sy0">-&gt;</span>get<span class="br0">(</span>in<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>		<span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>			cnt <span class="sy0">=</span> c<span class="sy0">;</span><br>			c <span class="sy0">=</span> in<span class="sy0">-&gt;</span>get<span class="br0">(</span>in<span class="br0">)</span><span class="sy0">;</span><br>			<span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> cnt<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span><br>				out<span class="sy0">-&gt;</span>put<span class="br0">(</span>out<span class="sy0">,</span> c<span class="br0">)</span><span class="sy0">;</span><br>		<span class="br0">}</span><br>	<span class="br0">}</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">char</span> buf<span class="br0">[</span><span class="nu0">256</span><span class="br0">]</span><span class="sy0">;</span><br>	string_stream str_in <span class="sy0">=</span> <span class="br0">{</span> sget<span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span><br>		<span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">}</span><span class="sy0">;</span><br>	string_stream str_out <span class="sy0">=</span> <span class="br0">{</span> sget<span class="sy0">,</span> sput<span class="sy0">,</span> buf<span class="sy0">,</span> <span class="nu0">0</span> <span class="br0">}</span><span class="sy0">;</span><br>	file_stream file <span class="sy0">=</span> <span class="br0">{</span> <span class="nu0">0</span><span class="sy0">,</span> file_put<span class="sy0">,</span> stdout <span class="br0">}</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="coMULTI">/* encode from str_in to str_out */</span><br>	encode<span class="br0">(</span><span class="br0">(</span>stream<span class="br0">)</span><span class="sy0">&amp;</span>str_in<span class="sy0">,</span> <span class="br0">(</span>stream<span class="br0">)</span><span class="sy0">&amp;</span>str_out<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="coMULTI">/* decode from str_out to file (stdout) */</span><br>	decode<span class="br0">(</span><span class="br0">(</span>stream<span class="br0">)</span><span class="sy0">&amp;</span>str_out<span class="sy0">,</span> <span class="br0">(</span>stream<span class="br0">)</span><span class="sy0">&amp;</span>file<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<p>See <a href="http://rosettacode.org/wiki/Run-length_encoding/C" title="Run-length encoding/C">Run-length encoding/C</a>
</p>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=10" title="Edit section: C++">edit</a>]</span> <span class="mw-headline" id="C.2B.2B"><a href="http://rosettacode.org/wiki/Category:C%2B%2B" title="Category:C++">C++</a></span></h2>
<div class="examplemeta libheader"><b>Library:</b> <a href="http://rosettacode.org/wiki/Category:Boost" title="Category:Boost">boost</a></div>
<pre class="cpp highlighted_source"><span class="co2">#include &lt;iostream&gt;</span><br><span class="co2">#include &lt;string&gt;</span><br><span class="co2">#include &lt;sstream&gt;</span><br><span class="co2">#include &lt;boost/regex.hpp&gt;</span><br><span class="co2">#include &lt;cstdlib&gt;</span><br>&nbsp;<br>std<span class="sy4">::</span><span class="me2">string</span> encode <span class="br0">(</span> <span class="kw4">const</span> std<span class="sy4">::</span><span class="me2">string</span> <span class="sy3">&amp;</span> <span class="br0">)</span> <span class="sy4">;</span><br>std<span class="sy4">::</span><span class="me2">string</span> decode <span class="br0">(</span> <span class="kw4">const</span> std<span class="sy4">::</span><span class="me2">string</span> <span class="sy3">&amp;</span> <span class="br0">)</span> <span class="sy4">;</span><br>&nbsp;<br><span class="kw4">int</span> main<span class="br0">(</span> <span class="br0">)</span> <span class="br0">{</span><br>   std<span class="sy4">::</span><span class="me2">string</span> to_encode <span class="br0">(</span> <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span> <span class="br0">)</span> <span class="sy4">;</span><br>   std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> to_encode <span class="sy1">&lt;&lt;</span> <span class="st0">" encoded:"</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span> <span class="sy4">;</span><br>   std<span class="sy4">::</span><span class="me2">string</span> encoded <span class="br0">(</span> encode <span class="br0">(</span> to_encode <span class="br0">)</span> <span class="br0">)</span> <span class="sy4">;</span><br>   std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> encoded <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span> <span class="sy4">;</span><br>   std<span class="sy4">::</span><span class="me2">string</span> decoded <span class="br0">(</span> decode<span class="br0">(</span> encoded <span class="br0">)</span> <span class="br0">)</span> <span class="sy4">;</span><br>   std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">"Decoded again:<span class="es1">\n</span>"</span> <span class="sy4">;</span><br>   std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> decoded <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span> <span class="sy4">;</span><br>   <span class="kw1">if</span> <span class="br0">(</span> to_encode <span class="sy1">==</span> decoded <span class="br0">)</span> <br>      std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">"It must have worked!<span class="es1">\n</span>"</span> <span class="sy4">;</span><br>   <span class="kw1">return</span> <span class="nu0">0</span> <span class="sy4">;</span><br><span class="br0">}</span><br>&nbsp;<br>std<span class="sy4">::</span><span class="me2">string</span> encode<span class="br0">(</span> <span class="kw4">const</span> std<span class="sy4">::</span><span class="me2">string</span> <span class="sy3">&amp;</span> to_encode <span class="br0">)</span> <span class="br0">{</span><br>   std<span class="sy4">::</span><span class="me2">string</span><span class="sy4">::</span><span class="me2">size_type</span> found <span class="sy1">=</span> <span class="nu0">0</span> , nextfound <span class="sy1">=</span> <span class="nu0">0</span> <span class="sy4">;</span><br>   std<span class="sy4">::</span><span class="me2">ostringstream</span> oss <span class="sy4">;</span><br>   nextfound <span class="sy1">=</span> to_encode.<span class="me1">find_first_not_of</span><span class="br0">(</span> to_encode<span class="br0">[</span> found <span class="br0">]</span> , found <span class="br0">)</span> <span class="sy4">;</span><br>   <span class="kw1">while</span> <span class="br0">(</span> nextfound <span class="sy3">!</span><span class="sy1">=</span> std<span class="sy4">::</span><span class="me2">string</span><span class="sy4">::</span><span class="me2">npos</span> <span class="br0">)</span> <span class="br0">{</span><br>      oss <span class="sy1">&lt;&lt;</span> nextfound <span class="sy2">-</span> found <span class="sy4">;</span><br>      oss <span class="sy1">&lt;&lt;</span> to_encode<span class="br0">[</span> found <span class="br0">]</span> <span class="sy4">;</span><br>      found <span class="sy1">=</span> nextfound <span class="sy4">;</span><br>      nextfound <span class="sy1">=</span> to_encode.<span class="me1">find_first_not_of</span><span class="br0">(</span> to_encode<span class="br0">[</span> found <span class="br0">]</span> , found <span class="br0">)</span> <span class="sy4">;</span><br>   <span class="br0">}</span><br>   <span class="co1">//since we must not discard the last characters we add them at the end of the string</span><br>   std<span class="sy4">::</span><span class="me2">string</span> rest <span class="br0">(</span> to_encode.<span class="me1">substr</span><span class="br0">(</span> found <span class="br0">)</span> <span class="br0">)</span> <span class="sy4">;</span><span class="co1">//last run of characters starts at position found </span><br>   oss <span class="sy1">&lt;&lt;</span> rest.<span class="me1">length</span><span class="br0">(</span> <span class="br0">)</span> <span class="sy1">&lt;&lt;</span> to_encode<span class="br0">[</span> found <span class="br0">]</span> <span class="sy4">;</span><br>   <span class="kw1">return</span> oss.<span class="me1">str</span><span class="br0">(</span> <span class="br0">)</span> <span class="sy4">;</span><br><span class="br0">}</span><br>&nbsp;<br>std<span class="sy4">::</span><span class="me2">string</span> decode <span class="br0">(</span> <span class="kw4">const</span> std<span class="sy4">::</span><span class="me2">string</span> <span class="sy3">&amp;</span> to_decode <span class="br0">)</span> <span class="br0">{</span><br>   boost<span class="sy4">::</span><span class="me2">regex</span> e <span class="br0">(</span> <span class="st0">"(<span class="es1">\\</span>d+)(<span class="es1">\\</span>w)"</span> <span class="br0">)</span> <span class="sy4">;</span><br>   boost<span class="sy4">::</span><span class="me2">match_results</span><span class="sy1">&lt;</span>std<span class="sy4">::</span><span class="me2">string</span><span class="sy4">::</span><span class="me2">const_iterator</span><span class="sy1">&gt;</span> matches <span class="sy4">;</span><br>   std<span class="sy4">::</span><span class="me2">ostringstream</span> oss <span class="sy4">;</span><br>   std<span class="sy4">::</span><span class="me2">string</span><span class="sy4">::</span><span class="me2">const_iterator</span> start <span class="sy1">=</span> to_decode.<span class="me1">begin</span><span class="br0">(</span> <span class="br0">)</span> , end <span class="sy1">=</span> to_decode.<span class="me1">end</span><span class="br0">(</span> <span class="br0">)</span> <span class="sy4">;</span><br>   <span class="kw1">while</span> <span class="br0">(</span> boost<span class="sy4">::</span><span class="me2">regex_search</span> <span class="br0">(</span> start , end , matches , e <span class="br0">)</span> <span class="br0">)</span> <span class="br0">{</span><br>      std<span class="sy4">::</span><span class="me2">string</span> numberstring <span class="br0">(</span> matches<span class="br0">[</span> <span class="nu0">1</span> <span class="br0">]</span>.<span class="me1">first</span> , matches<span class="br0">[</span> <span class="nu0">1</span> <span class="br0">]</span>.<span class="me1">second</span> <span class="br0">)</span> <span class="sy4">;</span><br>      <span class="kw4">int</span> number <span class="sy1">=</span> <span class="kw3">atoi</span><span class="br0">(</span> numberstring.<span class="me1">c_str</span><span class="br0">(</span> <span class="br0">)</span> <span class="br0">)</span> <span class="sy4">;</span><br>      std<span class="sy4">::</span><span class="me2">string</span> character <span class="br0">(</span> matches<span class="br0">[</span> <span class="nu0">2</span> <span class="br0">]</span>.<span class="me1">first</span> , matches<span class="br0">[</span> <span class="nu0">2</span> <span class="br0">]</span>.<span class="me1">second</span> <span class="br0">)</span> <span class="sy4">;</span><br>      <span class="kw1">for</span> <span class="br0">(</span> <span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span> <span class="sy4">;</span> i <span class="sy1">&lt;</span> number <span class="sy4">;</span> i<span class="sy2">++</span> <span class="br0">)</span> <br>	 oss <span class="sy1">&lt;&lt;</span> character <span class="sy4">;</span><br>      start <span class="sy1">=</span> matches<span class="br0">[</span> <span class="nu0">2</span> <span class="br0">]</span>.<span class="me1">second</span> <span class="sy4">;</span><br>   <span class="br0">}</span><br>   <span class="kw1">return</span> oss.<span class="me1">str</span><span class="br0">(</span> <span class="br0">)</span> <span class="sy4">;</span><br><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=11" title="Edit section: C#">edit</a>]</span> <span class="mw-headline" id="C.23"><span id="C_sharp"><a href="http://rosettacode.org/wiki/Category:C_sharp" title="Category:C sharp">C#</a></span></span></h2>
<p>This example only works if there are no digits in the string to be encoded and then decoded.
</p>
<pre class="csharp highlighted_source">&nbsp;<br>       <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Main<span class="br0">(</span><span class="kw4">string</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span><br>       <span class="br0">{</span><br>           <span class="kw4">string</span> input <span class="sy0">=</span> <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="sy0">;</span><br>           Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">(</span>Encode<span class="br0">(</span>input<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><span class="co1">//Outputs: 12W1B12W3B24W1B14W</span><br>           Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">(</span>Decode<span class="br0">(</span>Encode<span class="br0">(</span>input<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><span class="co1">//Outputs: WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</span><br>           Console<span class="sy0">.</span><span class="me1">ReadLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>       <span class="br0">}</span><br>       <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">string</span> Encode<span class="br0">(</span><span class="kw4">string</span> s<span class="br0">)</span><br>       <span class="br0">{</span><br>           StringBuilder sb <span class="sy0">=</span> <a href="http://www.google.com/search?q=new+msdn.microsoft.com"><span class="kw3">new</span></a> StringBuilder<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>           <span class="kw4">int</span> count <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span><br>           <span class="kw4">char</span> current <span class="sy0">=</span>s<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="sy0">;</span><br>           <span class="kw1">for</span><span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> s<span class="sy0">.</span><span class="me1">Length</span><span class="sy0">;</span>i<span class="sy0">++</span><span class="br0">)</span><br>           <span class="br0">{</span><br>               <span class="kw1">if</span> <span class="br0">(</span>current <span class="sy0">==</span> s<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span><br>               <span class="br0">{</span><br>                   count<span class="sy0">++;</span><br>               <span class="br0">}</span><br>               <span class="kw1">else</span><br>               <span class="br0">{</span><br>                   sb<span class="sy0">.</span><span class="me1">AppendFormat</span><span class="br0">(</span><span class="st0">"{0}{1}"</span>, count, current<span class="br0">)</span><span class="sy0">;</span><br>                   count <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span><br>                   current <span class="sy0">=</span> s<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">;</span><br>               <span class="br0">}</span><br>           <span class="br0">}</span><br>           sb<span class="sy0">.</span><span class="me1">AppendFormat</span><span class="br0">(</span><span class="st0">"{0}{1}"</span>, count, current<span class="br0">)</span><span class="sy0">;</span><br>           <span class="kw1">return</span> sb<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>       <span class="br0">}</span><br>       <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">string</span> Decode<span class="br0">(</span><span class="kw4">string</span> s<span class="br0">)</span><br>       <span class="br0">{</span><br>           <span class="kw4">string</span> a <span class="sy0">=</span> <span class="st0">""</span><span class="sy0">;</span><br>           <span class="kw4">int</span> count <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>           StringBuilder sb <span class="sy0">=</span> <a href="http://www.google.com/search?q=new+msdn.microsoft.com"><span class="kw3">new</span></a> StringBuilder<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>           <span class="kw4">char</span> current <span class="sy0">=</span> <span class="kw4">char</span><span class="sy0">.</span><span class="me1">MinValue</span><span class="sy0">;</span><br>           <span class="kw1">for</span><span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> s<span class="sy0">.</span><span class="me1">Length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span><br>           <span class="br0">{</span><br>               current <span class="sy0">=</span> s<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">;</span><br>               <span class="kw1">if</span> <span class="br0">(</span><span class="kw4">char</span><span class="sy0">.</span><span class="me1">IsDigit</span><span class="br0">(</span>current<span class="br0">)</span><span class="br0">)</span><br>                   a <span class="sy0">+=</span> current<span class="sy0">;</span><br>               <span class="kw1">else</span><br>               <span class="br0">{</span><br>                   count <span class="sy0">=</span> <span class="kw4">int</span><span class="sy0">.</span><span class="me1">Parse</span><span class="br0">(</span>a<span class="br0">)</span><span class="sy0">;</span><br>                   a <span class="sy0">=</span> <span class="st0">""</span><span class="sy0">;</span><br>                   <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> j <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> j <span class="sy0">&lt;</span> count<span class="sy0">;</span> j<span class="sy0">++</span><span class="br0">)</span><br>                       sb<span class="sy0">.</span><span class="me1">Append</span><span class="br0">(</span>current<span class="br0">)</span><span class="sy0">;</span><br>               <span class="br0">}</span><br>           <span class="br0">}</span><br>           <span class="kw1">return</span> sb<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>       <span class="br0">}</span><br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=12" title="Edit section: Clojure">edit</a>]</span> <span class="mw-headline" id="Clojure"><a href="http://rosettacode.org/wiki/Category:Clojure" title="Category:Clojure">Clojure</a></span></h2>
<pre class="clojure highlighted_source"><span class="br0">(</span><span class="kw1">defn</span> compress <span class="br0">[</span>s<span class="br0">]</span><br>  <span class="br0">(</span><span class="sy0">-&gt;&gt;</span> <span class="br0">(</span>partition<span class="sy0">-</span>by identity s<span class="br0">)</span> <span class="br0">(</span><span class="kw1">mapcat</span> <span class="br0">(</span>juxt <span class="kw1">count</span> <span class="kw1">first</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">apply</span> <span class="kw1">str</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defn</span> extract <span class="br0">[</span>s<span class="br0">]</span><br>  <span class="br0">(</span><span class="sy0">-&gt;&gt;</span> <span class="br0">(</span><span class="kw1">re-seq</span> #<span class="st0">"(<span class="es0">\d</span>+)([A-Z])"</span> s<span class="br0">)</span><br>       <span class="br0">(</span><span class="kw1">mapcat</span> <span class="br0">(</span><span class="kw1">fn</span> <span class="br0">[</span><span class="br0">[</span>_ n ch<span class="br0">]</span><span class="br0">]</span> <span class="br0">(</span><span class="kw1">repeat</span> <span class="br0">(</span>Integer<span class="sy0">/</span>parseInt n<span class="br0">)</span> ch<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>       <span class="br0">(</span><span class="kw1">apply</span> <span class="kw1">str</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=13" title="Edit section: CoffeeScript">edit</a>]</span> <span class="mw-headline" id="CoffeeScript"><a href="http://rosettacode.org/wiki/Category:CoffeeScript" title="Category:CoffeeScript">CoffeeScript</a></span></h2>
<pre class="coffeescript highlighted_source">encode = <span class="br0">(</span>str<span class="br0">)</span> <span class="sy0">-&gt;</span><br>    str.<span class="me1">replace</span> <span class="sy0">/</span><span class="br0">(</span>.<span class="br0">)</span>\<span class="nu0">1</span><span class="sy0">*/</span>g<span class="sy0">,</span> <span class="br0">(</span>w<span class="br0">)</span> <span class="sy0">-&gt;</span><br>        w<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">+</span> w.<span class="me1">length</span><br>&nbsp;<br>decode = <span class="br0">(</span>str<span class="br0">)</span> <span class="sy0">-&gt;</span><br>    str.<span class="me1">replace</span> <span class="sy0">/</span><span class="br0">(</span>.<span class="br0">)</span><span class="br0">(</span>\d<span class="sy0">+</span><span class="br0">)</span><span class="sy0">/</span>g<span class="sy0">,</span> <span class="br0">(</span>m<span class="sy0">,</span>w<span class="sy0">,</span>n<span class="br0">)</span> <span class="sy0">-&gt;</span><br>        <span class="kw3">new</span> Array<span class="br0">(</span><span class="sy0">+</span>n<span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span>.<span class="me1">join</span><span class="br0">(</span>w<span class="br0">)</span><br>&nbsp;<br>console.<span class="me1">log</span> s = <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><br>console.<span class="me1">log</span> encode s<br>console.<span class="me1">log</span> decode encode s</pre>
<pre>WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
W12B1W12B3W24B1W14
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
</pre>
<p>The following version encodes the number of ocurrences as an unicode character. You can change the way it looks by rotating the offset.
</p>
<pre class="coffeescript highlighted_source">encode = <span class="br0">(</span>str<span class="sy0">,</span> offset = <span class="nu0">75</span><span class="br0">)</span> <span class="sy0">-&gt;</span><br>    str.<span class="me1">replace</span> <span class="sy0">/</span><span class="br0">(</span>.<span class="br0">)</span>\<span class="nu0">1</span><span class="sy0">*/</span>g<span class="sy0">,</span> <span class="br0">(</span>w<span class="br0">)</span> <span class="sy0">-&gt;</span><br>        w<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">+</span> String.<span class="me1">fromCharCode</span><span class="br0">(</span>offset<span class="sy0">+</span>w.<span class="me1">length</span><span class="br0">)</span><br>&nbsp;<br>decode = <span class="br0">(</span>str<span class="sy0">,</span> offset = <span class="nu0">75</span><span class="br0">)</span> <span class="sy0">-&gt;</span><br>    str.<span class="me1">split</span><span class="br0">(</span><span class="st0">''</span><span class="br0">)</span>.<span class="me1">map</span><span class="br0">(</span><span class="br0">(</span>w<span class="sy0">,</span>i<span class="br0">)</span> <span class="sy0">-&gt;</span><br>        <span class="kw1">if</span> <span class="kw2">not</span> <span class="br0">(</span>i<span class="sy0">%</span>2<span class="br0">)</span> <span class="kw1">then</span> w <span class="kw1">else</span> <span class="kw3">new</span> Array<span class="br0">(</span><span class="sy0">+</span>w.<span class="me1">charCodeAt</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">-</span>offset<span class="br0">)</span>.<span class="me1">join</span><span class="br0">(</span>str<span class="br0">[</span>i<span class="sy0">-</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><br>    <span class="br0">)</span>.<span class="me1">join</span><span class="br0">(</span><span class="st0">''</span><span class="br0">)</span></pre>
<pre>&gt; encode "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"
WWBLWWBNWcBLWY
&gt; encode "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW", 1200
WҼBұWҼBҳWӈBұWҾ
&gt; encode "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW", 5200
WᑜBᑑWᑜBᑓWᑨBᑑWᑞ
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=14" title="Edit section: Common Lisp">edit</a>]</span> <span class="mw-headline" id="Common_Lisp"><a href="http://rosettacode.org/wiki/Category:Common_Lisp" title="Category:Common Lisp">Common Lisp</a></span></h2>
<pre class="lisp highlighted_source"><span class="br0">(</span><span class="kw1">defun</span> group-similar <span class="br0">(</span>sequence <span class="sy0">&amp;</span>key <span class="br0">(</span>test '<span class="kw1">eql</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="br0">(</span>loop for x in <span class="br0">(</span>rest sequence<span class="br0">)</span><br>        with temp <span class="sy0">=</span> <span class="br0">(</span>subseq sequence <span class="nu0">0</span> <span class="nu0">1</span><span class="br0">)</span><br>        <span class="kw1">if</span> <span class="br0">(</span><span class="kw1">funcall</span> test <span class="br0">(</span>first temp<span class="br0">)</span> x<span class="br0">)</span><br>          <span class="kw1">do</span> <span class="br0">(</span>push x temp<span class="br0">)</span><br>        else<br>          collect temp<br>          <span class="kw1">and</span> <span class="kw1">do</span> <span class="br0">(</span><span class="kw1">setf</span> temp <span class="br0">(</span><span class="kw1">list</span> x<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defun</span> run-length-encode <span class="br0">(</span>sequence<span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">mapcar</span> <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>group<span class="br0">)</span> <span class="br0">(</span><span class="kw1">list</span> <span class="br0">(</span>first group<span class="br0">)</span> <span class="br0">(</span><span class="kw1">length</span> group<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>          <span class="br0">(</span>group-similar <span class="br0">(</span>coerce sequence '<span class="kw1">list</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defun</span> run-length-decode <span class="br0">(</span>sequence<span class="br0">)</span><br>  <span class="br0">(</span>reduce <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>s1 s2<span class="br0">)</span> <span class="br0">(</span>concatenate 'simple-string s1 s2<span class="br0">)</span><span class="br0">)</span><br>          <span class="br0">(</span><span class="kw1">mapcar</span> <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>elem<span class="br0">)</span><br>                    <span class="br0">(</span>make-string <span class="br0">(</span>second elem<span class="br0">)</span><br>                                 <span class="sy0">:</span><span class="me1">initial-element</span><br>                                 <span class="br0">(</span>first elem<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>                  sequence<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>run-length-encode <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="br0">)</span><br><span class="br0">(</span>run-length-decode '<span class="br0">(</span><span class="br0">(</span>#\W <span class="nu0">12</span><span class="br0">)</span> <span class="br0">(</span>#\B <span class="nu0">1</span><span class="br0">)</span> <span class="br0">(</span>#\W <span class="nu0">12</span><span class="br0">)</span> <span class="br0">(</span>#\B <span class="nu0">3</span><span class="br0">)</span> <span class="br0">(</span>#\W <span class="nu0">24</span><span class="br0">)</span> <span class="br0">(</span>#\B <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=15" title="Edit section: D">edit</a>]</span> <span class="mw-headline" id="D"><a href="http://rosettacode.org/wiki/Category:D" title="Category:D">D</a></span></h2>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=16" title="Edit section: Short Functional Version">edit</a>]</span> <span class="mw-headline" id="Short_Functional_Version">Short Functional Version</span></h3>
<pre class="d highlighted_source"><span class="kw2">import</span> std.<span class="me1">algorithm</span><span class="sy0">,</span> std.<span class="me1">conv</span><span class="sy0">,</span> std.<span class="me1">array</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw2">alias</span> group encode<span class="sy0">;</span><br>&nbsp;<br><span class="kw4">string</span> decode<span class="br0">(</span>Group<span class="sy0">!</span><span class="br0">(</span><span class="st0">"a == b"</span><span class="sy0">,</span><span class="kw4">string</span><span class="br0">)</span> enc<span class="br0">)</span> <span class="br0">{</span><br>  <span class="kw1">return</span> enc.<span class="me1">map</span><span class="sy0">!</span><span class="br0">(</span>t <span class="sy0">=&gt;</span> replicate<span class="br0">(</span><span class="st0">""</span><span class="sy0">~</span><span class="kw2">cast</span><span class="br0">(</span><span class="kw4">char</span><span class="br0">)</span>t<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="sy0">,</span> t<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><span class="br0">)</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">join</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>  <span class="kw4">auto</span> s <span class="sy0">=</span> <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWW"</span> <span class="sy0">~</span><br>           <span class="st0">"WWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="sy0">;</span><br>  <span class="kw2">assert</span><span class="br0">(</span>decode<span class="br0">(</span>encode<span class="br0">(</span>s<span class="br0">)</span><span class="br0">)</span> <span class="sy0">==</span> s<span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=17" title="Edit section: Basic Imperative Version">edit</a>]</span> <span class="mw-headline" id="Basic_Imperative_Version">Basic Imperative Version</span></h3>
<pre class="d highlighted_source"><span class="kw2">import</span> std.<span class="me1">stdio</span><span class="sy0">,</span> std.<span class="me1">array</span><span class="sy0">,</span> std.<span class="me1">conv</span><span class="sy0">;</span><br>&nbsp;<br><span class="co1">// Similar to the 'look and say' function.</span><br><span class="kw4">string</span> encode<span class="br0">(</span><span class="kw2">in</span> <span class="kw4">string</span> input<span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw1">if</span> <span class="br0">(</span>input.<span class="me1">empty</span><span class="br0">)</span> <span class="kw1">return</span> input<span class="sy0">;</span><br>    <span class="kw4">char</span> last <span class="sy0">=</span> input<span class="br0">[</span>$ <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span><span class="sy0">;</span><br>    <span class="kw4">string</span> output<span class="sy0">;</span><br>    <span class="kw4">int</span> count<span class="sy0">;</span><br>&nbsp;<br>    <span class="kw1">foreach_reverse</span> <span class="br0">(</span>c<span class="sy0">;</span> input<span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw1">if</span> <span class="br0">(</span>c <span class="sy0">==</span> last<span class="br0">)</span> <span class="br0">{</span><br>            count<span class="sy0">++;</span><br>        <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>            output <span class="sy0">=</span> text<span class="br0">(</span>count<span class="br0">)</span> <span class="sy0">~</span> last <span class="sy0">~</span> output<span class="sy0">;</span><br>            count <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span><br>            last <span class="sy0">=</span> c<span class="sy0">;</span><br>        <span class="br0">}</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw1">return</span> text<span class="br0">(</span>count<span class="br0">)</span> <span class="sy0">~</span> last <span class="sy0">~</span> output<span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">string</span> decode<span class="br0">(</span><span class="kw2">in</span> <span class="kw4">string</span> input<span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw4">string</span> i<span class="sy0">,</span> result<span class="sy0">;</span><br>&nbsp;<br>    <span class="kw1">foreach</span> <span class="br0">(</span>c<span class="sy0">;</span> input<span class="br0">)</span><br>        <span class="kw1">switch</span> <span class="br0">(</span>c<span class="br0">)</span> <span class="br0">{</span><br>            <span class="kw1">case</span> <span class="st0">'0'</span><span class="sy0">:</span> <span class="sy0">..</span> <span class="kw1">case</span> <span class="st0">'9'</span><span class="sy0">:</span><br>                i <span class="sy0">~=</span> c<span class="sy0">;</span><br>                <span class="kw1">break</span><span class="sy0">;</span><br>            <span class="kw1">case</span> <span class="st0">'A'</span><span class="sy0">:</span> <span class="sy0">..</span> <span class="kw1">case</span> <span class="st0">'Z'</span><span class="sy0">:</span><br>                <span class="kw1">if</span> <span class="br0">(</span>i.<span class="me1">empty</span><span class="br0">)</span><br>                    <span class="kw2">throw</span> <span class="kw2">new</span> <span class="kw3">Exception</span><span class="br0">(</span><span class="st0">"Can not repeat a letter "</span> <span class="sy0">~</span><br>                        <span class="st0">"without a number of repetitions"</span><span class="br0">)</span><span class="sy0">;</span><br>                result <span class="sy0">~=</span> replicate<span class="br0">(</span><span class="br0">[</span>c<span class="br0">]</span><span class="sy0">,</span> to<span class="sy0">!</span><span class="kw4">int</span><span class="br0">(</span>i<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>                i.<span class="me1">length</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>                <span class="kw1">break</span><span class="sy0">;</span><br>            <span class="kw2">default</span><span class="sy0">:</span><br>                <span class="kw2">throw</span> <span class="kw2">new</span> <span class="kw3">Exception</span><span class="br0">(</span><span class="st0">"'"</span> <span class="sy0">~</span> c <span class="sy0">~</span><br>                                    <span class="st0">"' is not alphanumeric"</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>    <span class="kw1">return</span> result<span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw4">immutable</span> txt <span class="sy0">=</span> <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWW"</span> <span class="sy0">~</span><br>                    <span class="st0">"WWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="sy0">;</span><br>    writeln<span class="br0">(</span><span class="st0">"Input: "</span><span class="sy0">,</span> txt<span class="br0">)</span><span class="sy0">;</span><br>    <span class="kw4">immutable</span> encoded <span class="sy0">=</span> encode<span class="br0">(</span>txt<span class="br0">)</span><span class="sy0">;</span><br>    writeln<span class="br0">(</span><span class="st0">"Encoded: "</span><span class="sy0">,</span> encoded<span class="br0">)</span><span class="sy0">;</span><br>    <span class="kw2">assert</span><span class="br0">(</span>txt <span class="sy0">==</span> decode<span class="br0">(</span>encoded<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<div>
<dl><dt>Output:</dt></dl></div>

<pre>Input: WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
Encoded: 12W1B12W3B24W1B14W</pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=18" title="Edit section: UTF String Version">edit</a>]</span> <span class="mw-headline" id="UTF_String_Version">UTF String Version</span></h3>
<p>D's native string is utf-encoded. This version work for utf string. This code use a <a href="http://rosettacode.org/wiki/Variable-length_quantity" title="Variable-length quantity">Variable-length Quantity</a> <a href="http://rosettacode.org/wiki/Variable-length_quantity#D" title="Variable-length quantity">module</a>. 
</p>
<pre class="d highlighted_source"><span class="kw2">import</span> std.<span class="me1">stdio</span><span class="sy0">,</span> std.<span class="me1">conv</span><span class="sy0">,</span> std.<span class="me1">utf</span><span class="sy0">,</span> std.<span class="me1">array</span><span class="sy0">;</span><br><span class="kw2">import</span> vlq<span class="sy0">;</span><br>&nbsp;<br><span class="kw4">struct</span> RLE <span class="br0">{</span> <span class="co1">// for utf string </span><br>    <span class="kw4">ubyte</span><span class="br0">[</span><span class="br0">]</span> encoded<span class="sy0">;</span><br>&nbsp;<br>    RLE encode<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">string</span> s<span class="br0">)</span> <span class="br0">{</span><br>        validate<span class="br0">(</span>s<span class="br0">)</span><span class="sy0">;</span> <span class="co1">// check if s is well-formed utf, throw if not </span><br>        encoded.<span class="me1">length</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="co1">// reset </span><br>        <span class="kw1">if</span> <span class="br0">(</span>s.<span class="me1">length</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span> <span class="kw1">return</span> <span class="kw2">this</span><span class="sy0">;</span> <span class="co1">// empty string</span><br>        <span class="kw4">string</span> last<span class="sy0">;</span><br>        VLQ count<span class="sy0">;</span><br>        <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> s.<span class="me1">length</span><span class="sy0">;</span> <span class="br0">)</span> <span class="br0">{</span><br>            <span class="kw4">auto</span> k <span class="sy0">=</span> s.<span class="me1">stride</span><span class="br0">(</span>i<span class="br0">)</span><span class="sy0">;</span><br>            <span class="kw4">auto</span> ucode <span class="sy0">=</span> <span class="kw2">cast</span><span class="br0">(</span><span class="kw4">string</span><span class="br0">)</span>s<span class="br0">[</span>i <span class="sy0">..</span> <span class="me1">i</span> <span class="sy0">+</span> k<span class="br0">]</span><span class="sy0">;</span><br>            <span class="kw1">if</span> <span class="br0">(</span>i <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span> last <span class="sy0">=</span> ucode<span class="sy0">;</span><br>            <span class="kw1">if</span> <span class="br0">(</span>ucode <span class="sy0">==</span> last<span class="br0">)</span><br>                count<span class="sy0">++;</span><br>            <span class="kw1">else</span> <span class="br0">{</span><br>                encoded <span class="sy0">~=</span> count.<span class="me1">toVLQ</span> <span class="sy0">~</span> <span class="kw2">cast</span><span class="br0">(</span><span class="kw4">ubyte</span><span class="br0">[</span><span class="br0">]</span><span class="br0">)</span>last<span class="sy0">;</span><br>                last <span class="sy0">=</span> ucode<span class="sy0">;</span><br>                count <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span><br>            <span class="br0">}</span><br>            i <span class="sy0">+=</span> k<span class="sy0">;</span><br>        <span class="br0">}</span><br>        encoded <span class="sy0">~=</span> VLQ<span class="br0">(</span>count<span class="br0">)</span>.<span class="me1">toVLQ</span> <span class="sy0">~</span> <span class="kw2">cast</span><span class="br0">(</span><span class="kw4">ubyte</span><span class="br0">[</span><span class="br0">]</span><span class="br0">)</span>last<span class="sy0">;</span><br>        <span class="kw1">return</span> <span class="kw2">this</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw4">int</span> opApply<span class="br0">(</span><span class="kw4">int</span> <span class="kw2">delegate</span><span class="br0">(</span><span class="kw2">ref</span> <span class="kw4">ulong</span> c<span class="sy0">,</span> <span class="kw2">ref</span> <span class="kw4">string</span> u<span class="br0">)</span> dg<span class="br0">)</span> <span class="br0">{</span><br>        VLQ count<span class="sy0">;</span><br>        <span class="kw4">string</span> ucode<span class="sy0">;</span><br>&nbsp;<br>        <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> encoded.<span class="me1">length</span><span class="sy0">;</span> <span class="br0">)</span> <span class="br0">{</span><br>            <span class="kw4">auto</span> k <span class="sy0">=</span> count.<span class="me1">extract</span><span class="br0">(</span>encoded<span class="br0">[</span>i <span class="sy0">..</span> $<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>            i <span class="sy0">+=</span> k<span class="sy0">;</span><br>            <span class="kw1">if</span> <span class="br0">(</span>i <span class="sy0">&gt;=</span> encoded.<span class="me1">length</span><span class="br0">)</span><br>                <span class="kw2">throw</span> <span class="kw2">new</span> <span class="kw3">Exception</span><span class="br0">(</span><span class="st0">"not valid encoded string"</span><span class="br0">)</span><span class="sy0">;</span><br>            k <span class="sy0">=</span> stride<span class="br0">(</span><span class="kw2">cast</span><span class="br0">(</span><span class="kw4">string</span><span class="br0">)</span> encoded<span class="br0">[</span>i <span class="sy0">..</span> $<span class="br0">]</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="kw1">if</span> <span class="br0">(</span>k <span class="sy0">==</span> <span class="nu12">0xff</span><span class="br0">)</span> <span class="co1">// not valid utf code point </span><br>                <span class="kw2">throw</span> <span class="kw2">new</span> <span class="kw3">Exception</span><span class="br0">(</span><span class="st0">"not valid encoded string"</span><span class="br0">)</span><span class="sy0">;</span><br>            ucode <span class="sy0">=</span> <span class="kw2">cast</span><span class="br0">(</span><span class="kw4">string</span><span class="br0">)</span>encoded<span class="br0">[</span>i <span class="sy0">..</span> <span class="me1">i</span> <span class="sy0">+</span> k<span class="br0">]</span>.<span class="me1">dup</span><span class="sy0">;</span><br>            dg<span class="br0">(</span>count.<span class="me1">value</span><span class="sy0">,</span> ucode<span class="br0">)</span><span class="sy0">;</span><br>            i <span class="sy0">+=</span> k<span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw4">string</span> toString<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw4">string</span> res<span class="sy0">;</span><br>        <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw2">ref</span> i<span class="sy0">,</span> s <span class="sy0">;</span> <span class="kw2">this</span><span class="br0">)</span><br>            <span class="kw1">if</span> <span class="br0">(</span>indexOf<span class="br0">(</span><span class="st0">"0123456789#"</span><span class="sy0">,</span> s<span class="br0">)</span> <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span><br>                res <span class="sy0">~=</span> text<span class="br0">(</span>i<span class="br0">)</span> <span class="sy0">~</span> s<span class="sy0">;</span><br>            <span class="kw1">else</span> <br>                res <span class="sy0">~=</span> text<span class="br0">(</span>i<span class="br0">)</span> <span class="sy0">~</span> <span class="st0">'#'</span> <span class="sy0">~</span> s<span class="sy0">;</span><br>        <span class="kw1">return</span> res<span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw4">string</span> decode<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw4">string</span> res<span class="sy0">;</span><br>        <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw2">ref</span> i<span class="sy0">,</span> s<span class="sy0">;</span> <span class="kw2">this</span><span class="br0">)</span><br>            res <span class="sy0">~=</span> replicate<span class="br0">(</span>s<span class="sy0">,</span> <span class="kw2">cast</span><span class="br0">(</span><span class="kw4">uint</span><span class="br0">)</span>i<span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw1">return</span> res<span class="sy0">;</span><br>    <span class="br0">}</span>       <br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    RLE r<span class="sy0">;</span><br>    <span class="kw4">auto</span> s <span class="sy0">=</span> <span class="st0">"尋尋覓覓冷冷清清淒淒慘慘戚戚<span class="es1">\n</span>WWWWWWWWWWWWBWWWWWWWWWWW"</span> <span class="sy0">~</span><br>             <span class="st0">"WBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW<span class="es1">\n</span>"</span> <span class="sy0">~</span><br>             <span class="st0">"11#222##333"</span><span class="sy0">;</span><br>    <span class="kw4">auto</span> f <span class="sy0">=</span> File<span class="br0">(</span><span class="st0">"display.txt"</span><span class="sy0">,</span> <span class="st0">"w"</span><span class="br0">)</span><span class="sy0">;</span><br>    f.<span class="me1">writeln</span><span class="br0">(</span>s<span class="br0">)</span><span class="sy0">;</span><br>    r.<span class="me1">encode</span><span class="br0">(</span>s<span class="br0">)</span><span class="sy0">;</span><br>    f.<span class="me1">writefln</span><span class="br0">(</span><span class="st0">"-----<span class="es1">\n</span>%s<span class="es1">\n</span>-----<span class="es1">\n</span>%s"</span><span class="sy0">,</span> r<span class="sy0">,</span> r.<span class="me1">decode</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="kw4">auto</span> sEncoded <span class="sy0">=</span> RLE.<span class="me1">init</span>.<span class="me1">encode</span><span class="br0">(</span>s<span class="br0">)</span>.<span class="me1">encoded</span> <span class="sy0">;</span><br>    <span class="kw2">assert</span><span class="br0">(</span>s <span class="sy0">==</span> RLE<span class="br0">(</span>sEncoded<span class="br0">)</span>.<span class="me1">decode</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">,</span> <span class="st0">"Not work"</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<p>output from "display.txt":
</p>
<pre>尋尋覓覓冷冷清清淒淒慘慘戚戚
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
11#222##333
-----
2尋2覓2冷2清2淒2慘2戚1
12W1B12W3B24W1B14W1
2#11##3#22##3#3
-----
尋尋覓覓冷冷清清淒淒慘慘戚戚
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
11#222##333</pre>
<p><b>NOTE:</b> some characters in this section use Chinese font.
</p>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=19" title="Edit section: UTF String Version with Regular Expression">edit</a>]</span> <span class="mw-headline" id="UTF_String_Version_with_Regular_Expression">UTF String Version with Regular Expression</span></h3>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/Run-length_encoding#Python" title="Run-length encoding">Python</a></div>
<p>The code looks more complex than the third Python version because this also handles digits by escaping them with #.
</p>
<pre class="d highlighted_source"><span class="kw2">import</span> std.<span class="me1">stdio</span><span class="sy0">,</span> std.<span class="me1">conv</span><span class="sy0">,</span> std.<span class="me1">array</span><span class="sy0">,</span> std.<span class="me1">regex</span><span class="sy0">,</span> std.<span class="me1">utf</span><span class="sy0">,</span><br>       std.<span class="me1">algorithm</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw4">string</span> reEncode<span class="br0">(</span><span class="kw4">string</span> s<span class="br0">)</span> <span class="br0">{</span><br>    validate<span class="br0">(</span>s<span class="br0">)</span><span class="sy0">;</span> <span class="co1">// Throw if it's not a well-formed UTF string</span><br>    <span class="kw4">static</span> <span class="kw4">string</span> rep<span class="br0">(</span>Captures<span class="sy0">!</span><span class="kw4">string</span> m<span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw4">auto</span> c <span class="sy0">=</span> canFind<span class="br0">(</span><span class="st0">"0123456789#"</span><span class="sy0">,</span> m<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span> <span class="sy0">?</span> <span class="st0">"#"</span> <span class="sy0">~</span> m<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy0">:</span> m<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="sy0">;</span><br>        <span class="kw1">return</span> text<span class="br0">(</span>m.<span class="me1">hit</span>.<span class="me1">length</span> <span class="sy0">/</span> m<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span>.<span class="me1">length</span><span class="br0">)</span> <span class="sy0">~</span> c<span class="sy0">;</span><br>    <span class="br0">}</span><br>    <span class="kw1">return</span> std.<span class="me1">regex</span>.<span class="me1">replace</span><span class="sy0">!</span>rep<span class="br0">(</span>s<span class="sy0">,</span> regex<span class="br0">(</span><span class="st_h">`(.|[\n\r\f])\1*`</span><span class="sy0">,</span> <span class="st0">"g"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br>&nbsp;<br><span class="kw4">string</span> reDecode<span class="br0">(</span><span class="kw4">string</span> s<span class="br0">)</span> <span class="br0">{</span><br>    validate<span class="br0">(</span>s<span class="br0">)</span><span class="sy0">;</span> <span class="co1">// Throw if it's not a well-formed UTF string</span><br>    <span class="kw4">static</span> <span class="kw4">string</span> rep<span class="br0">(</span>Captures<span class="sy0">!</span><span class="kw4">string</span> m<span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw4">string</span> c <span class="sy0">=</span> m<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="sy0">;</span><br>        <span class="kw1">if</span> <span class="br0">(</span>c.<span class="me1">length</span> <span class="sy0">&gt;</span> <span class="nu0">1</span> <span class="sy0">&amp;&amp;</span> c<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">==</span> <span class="st0">'#'</span><span class="br0">)</span><br>            c <span class="sy0">=</span> c<span class="br0">[</span><span class="nu0">1</span> <span class="sy0">..</span> $<span class="br0">]</span><span class="sy0">;</span><br>        <span class="kw1">return</span> replicate<span class="br0">(</span>c<span class="sy0">,</span> to<span class="sy0">!</span><span class="kw4">int</span><span class="br0">(</span>m<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>    <span class="kw4">auto</span> r<span class="sy0">=</span>regex<span class="br0">(</span><span class="st_h">`(\d+)(#[0123456789#]|[\n\r\f]|[^0123456789#\n\r\f]+)`</span><br>                 <span class="sy0">,</span> <span class="st0">"g"</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="kw1">return</span> std.<span class="me1">regex</span>.<span class="me1">replace</span><span class="sy0">!</span>rep<span class="br0">(</span>s<span class="sy0">,</span> r<span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw4">auto</span> s <span class="sy0">=</span> <span class="st0">"尋尋覓覓冷冷清清淒淒慘慘戚戚<span class="es1">\n</span>WWWWWWWWWWWWBWWWWWWWWWWW"</span> <span class="sy0">~</span><br>             <span class="st0">"WBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW<span class="es1">\n</span>"</span> <span class="sy0">~</span><br>             <span class="st0">"11#222##333"</span><span class="sy0">;</span><br>    <span class="kw2">assert</span><span class="br0">(</span>s <span class="sy0">==</span> reDecode<span class="br0">(</span>reEncode<span class="br0">(</span>s<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=20" title="Edit section: E">edit</a>]</span> <span class="mw-headline" id="E"><a href="http://rosettacode.org/wiki/Category:E" title="Category:E">E</a></span></h2>
<pre class="e highlighted_source"><a href="http://wiki.erights.org/wiki/def"><span class="kw4">def</span></a> rle<span class="br0">(</span>string<span class="br0">)</span> <span class="br0">{</span><br>  <a href="http://wiki.erights.org/wiki/var"><span class="kw4">var</span></a> seen <span class="sy0">:=</span> <a href="http://wiki.erights.org/wiki/null"><span class="kw6">null</span></a><br>  <a href="http://wiki.erights.org/wiki/var"><span class="kw4">var</span></a> count <span class="sy0">:=</span> <span class="nu0">0</span><br>  <a href="http://wiki.erights.org/wiki/var"><span class="kw4">var</span></a> result <span class="sy0">:=</span> <span class="br0">[</span><span class="br0">]</span><br>  <a href="http://wiki.erights.org/wiki/def"><span class="kw4">def</span></a> put<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    <a href="http://wiki.erights.org/wiki/if"><span class="kw1">if</span></a> <span class="br0">(</span>seen <span class="sy0">!=</span> <a href="http://wiki.erights.org/wiki/null"><span class="kw6">null</span></a><span class="br0">)</span> <span class="br0">{</span><br>      result with<span class="sy0">=</span> <span class="br0">[</span>count<span class="sy0">,</span> seen<span class="br0">]</span><br>    <span class="br0">}</span><br>  <span class="br0">}</span><br>  <a href="http://wiki.erights.org/wiki/for"><span class="kw1">for</span></a> ch <a href="http://wiki.erights.org/wiki/in"><span class="kw2">in</span></a> string <span class="br0">{</span><br>    <a href="http://wiki.erights.org/wiki/if"><span class="kw1">if</span></a> <span class="br0">(</span>ch <span class="sy0">!=</span> seen<span class="br0">)</span> <span class="br0">{</span><br>      put<span class="br0">(</span><span class="br0">)</span><br>      seen <span class="sy0">:=</span> ch<br>      count <span class="sy0">:=</span> <span class="nu0">0</span><br>    <span class="br0">}</span><br>    count <span class="sy0">+=</span> <span class="nu0">1</span><br>  <span class="br0">}</span><br>  put<span class="br0">(</span><span class="br0">)</span><br>  return result<br><span class="br0">}</span><br>&nbsp;<br><a href="http://wiki.erights.org/wiki/def"><span class="kw4">def</span></a> unrle<span class="br0">(</span>coded<span class="br0">)</span> <span class="br0">{</span><br>  <a href="http://wiki.erights.org/wiki/var"><span class="kw4">var</span></a> result <span class="sy0">:=</span> <span class="st0">""</span><br>  <a href="http://wiki.erights.org/wiki/for"><span class="kw1">for</span></a> <span class="br0">[</span>count<span class="sy0">,</span> ch<span class="br0">]</span> <a href="http://wiki.erights.org/wiki/in"><span class="kw2">in</span></a> coded <span class="br0">{</span><br>    result <span class="sy0">+=</span> <a href="http://wiki.erights.org/wiki/E"><span class="kw6">E</span></a>.<span class="me1">toString</span><span class="br0">(</span>ch<span class="br0">)</span> <span class="sy0">*</span> count<br>  <span class="br0">}</span><br>  return result<br><span class="br0">}</span></pre>
<pre class="e highlighted_source"><span class="sy0">?</span> rle<span class="br0">(</span><span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="br0">)</span><br><span class="co1"># value: [[12, 'W'], [1, 'B'], [12, 'W'], [3, 'B'], [24, 'W'], [1, 'B'], [14, 'W']]</span><br>&nbsp;<br><span class="sy0">?</span> unrle<span class="br0">(</span>rle<span class="br0">(</span><span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="br0">)</span><span class="br0">)</span><br><span class="co1"># value: "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=21" title="Edit section: Erlang">edit</a>]</span> <span class="mw-headline" id="Erlang"><a href="http://rosettacode.org/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></span></h2>
<p>A single-threaded/process version with a simple set of unit test.
</p>
<pre class="erlang highlighted_source"><span class="sy3">-</span><span class="re2">module</span><span class="br0">(</span>rle<span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="sy3">-</span><span class="re2">export</span><span class="br0">(</span><span class="br0">[</span>encode<span class="sy3">/</span><span class="nu0">1</span><span class="sy1">,</span>decode<span class="sy3">/</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="sy3">-</span><span class="re2">include_lib</span><span class="br0">(</span><span class="st0">"eunit/include/eunit.hrl"</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">encode</span><span class="br0">(</span><span class="re5">S</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re3">doEncode</span><span class="br0">(</span><a href="http://erlang.org/doc/man/string.html"><span class="kw5">string</span></a>:<span class="re3">substr</span><span class="br0">(</span><span class="re5">S</span><span class="sy1">,</span> <span class="nu0">2</span><span class="br0">)</span><span class="sy1">,</span> <a href="http://erlang.org/doc/man/string.html"><span class="kw5">string</span></a>:<span class="re3">substr</span><span class="br0">(</span><span class="re5">S</span><span class="sy1">,</span> <span class="nu0">1</span><span class="sy1">,</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy1">,</span> <span class="nu0">1</span><span class="sy1">,</span> <span class="br0">[</span><span class="br0">]</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">doEncode</span><span class="br0">(</span><span class="br0">[</span><span class="br0">]</span><span class="sy1">,</span> <span class="re5">CurrChar</span><span class="sy1">,</span> <span class="re5">Count</span><span class="sy1">,</span> <span class="re5">R</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">R</span> <span class="sy3">++</span> <span class="kw3">integer_to_list</span><span class="br0">(</span><span class="re5">Count</span><span class="br0">)</span> <span class="sy3">++</span> <span class="re5">CurrChar</span><span class="sy1">;</span><br><span class="re3">doEncode</span><span class="br0">(</span><span class="re5">S</span><span class="sy1">,</span> <span class="re5">CurrChar</span><span class="sy1">,</span> <span class="re5">Count</span><span class="sy1">,</span> <span class="re5">R</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">NextChar</span> <span class="sy3">=</span> <a href="http://erlang.org/doc/man/string.html"><span class="kw5">string</span></a>:<span class="re3">substr</span><span class="br0">(</span><span class="re5">S</span><span class="sy1">,</span> <span class="nu0">1</span><span class="sy1">,</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy1">,</span><br>    <span class="kw1">if</span><br>        <span class="re5">NextChar</span> <span class="sy3">==</span> <span class="re5">CurrChar</span> <span class="sy1">-&gt;</span><br>            <span class="re3">doEncode</span><span class="br0">(</span><a href="http://erlang.org/doc/man/string.html"><span class="kw5">string</span></a>:<span class="re3">substr</span><span class="br0">(</span><span class="re5">S</span><span class="sy1">,</span> <span class="nu0">2</span><span class="br0">)</span><span class="sy1">,</span> <span class="re5">CurrChar</span><span class="sy1">,</span> <span class="re5">Count</span> <span class="sy3">+</span> <span class="nu0">1</span><span class="sy1">,</span> <span class="re5">R</span><span class="br0">)</span><span class="sy1">;</span><br>        true <span class="sy1">-&gt;</span><br>            <span class="re3">doEncode</span><span class="br0">(</span><a href="http://erlang.org/doc/man/string.html"><span class="kw5">string</span></a>:<span class="re3">substr</span><span class="br0">(</span><span class="re5">S</span><span class="sy1">,</span> <span class="nu0">2</span><span class="br0">)</span><span class="sy1">,</span> <span class="re5">NextChar</span><span class="sy1">,</span> <span class="nu0">1</span><span class="sy1">,</span><br>                <span class="re5">R</span> <span class="sy3">++</span> <span class="kw3">integer_to_list</span><span class="br0">(</span><span class="re5">Count</span><span class="br0">)</span> <span class="sy3">++</span> <span class="re5">CurrChar</span><span class="br0">)</span><br>    <span class="kw1">end</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">decode</span><span class="br0">(</span><span class="re5">S</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re3">doDecode</span><span class="br0">(</span><a href="http://erlang.org/doc/man/string.html"><span class="kw5">string</span></a>:<span class="re3">substr</span><span class="br0">(</span><span class="re5">S</span><span class="sy1">,</span> <span class="nu0">2</span><span class="br0">)</span><span class="sy1">,</span> <a href="http://erlang.org/doc/man/string.html"><span class="kw5">string</span></a>:<span class="re3">substr</span><span class="br0">(</span><span class="re5">S</span><span class="sy1">,</span> <span class="nu0">1</span><span class="sy1">,</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy1">,</span> <span class="br0">[</span><span class="br0">]</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">doDecode</span><span class="br0">(</span><span class="br0">[</span><span class="br0">]</span><span class="sy1">,</span> <span class="re5">_</span><span class="sy1">,</span> <span class="re5">R</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">R</span><span class="sy1">;</span><br><span class="re3">doDecode</span><span class="br0">(</span><span class="re5">S</span><span class="sy1">,</span> <span class="re5">CurrString</span><span class="sy1">,</span> <span class="re5">R</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">NextChar</span> <span class="sy3">=</span> <a href="http://erlang.org/doc/man/string.html"><span class="kw5">string</span></a>:<span class="re3">substr</span><span class="br0">(</span><span class="re5">S</span><span class="sy1">,</span> <span class="nu0">1</span><span class="sy1">,</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy1">,</span><br>    <span class="re5">IsInt</span> <span class="sy3">=</span> <a href="http://erlang.org/doc/man/erlang.html"><span class="kw5">erlang</span></a>:<span class="kw4">is_integer</span><span class="br0">(</span><span class="kw1">catch</span><span class="br0">(</span><a href="http://erlang.org/doc/man/erlang.html"><span class="kw5">erlang</span></a>:<span class="kw3">list_to_integer</span><span class="br0">(</span><span class="re5">NextChar</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="sy1">,</span><br>    <span class="kw1">if</span><br>        <span class="re5">IsInt</span> <span class="sy1">-&gt;</span><br>            <span class="re3">doDecode</span><span class="br0">(</span><a href="http://erlang.org/doc/man/string.html"><span class="kw5">string</span></a>:<span class="re3">substr</span><span class="br0">(</span><span class="re5">S</span><span class="sy1">,</span> <span class="nu0">2</span><span class="br0">)</span><span class="sy1">,</span> <span class="re5">CurrString</span> <span class="sy3">++</span> <span class="re5">NextChar</span><span class="sy1">,</span> <span class="re5">R</span><span class="br0">)</span><span class="sy1">;</span><br>        true <span class="sy1">-&gt;</span><br>            <span class="re3">doDecode</span><span class="br0">(</span><a href="http://erlang.org/doc/man/string.html"><span class="kw5">string</span></a>:<span class="re3">substr</span><span class="br0">(</span><span class="re5">S</span><span class="sy1">,</span> <span class="nu0">2</span><span class="br0">)</span><span class="sy1">,</span> <span class="br0">[</span><span class="br0">]</span><span class="sy1">,</span><br>                <span class="re5">R</span> <span class="sy3">++</span> <a href="http://erlang.org/doc/man/string.html"><span class="kw5">string</span></a>:<span class="re3">copies</span><span class="br0">(</span><span class="re5">NextChar</span><span class="sy1">,</span> <span class="kw3">list_to_integer</span><span class="br0">(</span><span class="re5">CurrString</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="kw1">end</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">rle_test_</span><span class="br0">(</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">PreEncoded</span> <span class="sy3">=</span><br>        <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="sy1">,</span><br>    <span class="re5">Expected</span> <span class="sy3">=</span> <span class="st0">"12W1B12W3B24W1B14W"</span><span class="sy1">,</span><br>    <span class="br0">[</span><br>       &nbsp;?<span class="re4">_</span><span class="re3">assert</span><span class="br0">(</span><span class="re3">encode</span><span class="br0">(</span><span class="re5">PreEncoded</span><span class="br0">)</span> <span class="sy3">=:=</span> <span class="re5">Expected</span><span class="br0">)</span><span class="sy1">,</span><br>       &nbsp;?<span class="re4">_</span><span class="re3">assert</span><span class="br0">(</span><span class="re3">decode</span><span class="br0">(</span><span class="re5">Expected</span><span class="br0">)</span> <span class="sy3">=:=</span> <span class="re5">PreEncoded</span><span class="br0">)</span><span class="sy1">,</span><br>       &nbsp;?<span class="re4">_</span><span class="re3">assert</span><span class="br0">(</span><span class="re3">decode</span><span class="br0">(</span><span class="re3">encode</span><span class="br0">(</span><span class="re5">PreEncoded</span><span class="br0">)</span><span class="br0">)</span> <span class="sy3">=:=</span> <span class="re5">PreEncoded</span><span class="br0">)</span><br>    <span class="br0">]</span><span class="sy1">.</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=22" title="Edit section: Euphoria">edit</a>]</span> <span class="mw-headline" id="Euphoria"><a href="http://rosettacode.org/wiki/Category:Euphoria" title="Category:Euphoria">Euphoria</a></span></h2>
<pre class="euphoria highlighted_source"><span class="kw1">include</span> misc.e<br>&nbsp;<br><span class="kw1">function</span> encode<span class="br0">(</span><span class="kw2">sequence</span> s<span class="br0">)</span><br>    <span class="kw2">sequence</span> out<br>    <span class="kw2">integer</span> prev_char<span class="sy2">,</span>count<br>    <span class="kw1">if</span> <span class="kw2">length</span><span class="br0">(</span>s<span class="br0">)</span> <span class="sy1">=</span> <span class="nu0">0</span> <span class="kw1">then</span><br>        <span class="kw1">return</span> <span class="br0">{</span><span class="br0">}</span><br>    <span class="kw1">end</span> <span class="kw1">if</span><br>    out <span class="sy1">=</span> <span class="br0">{</span><span class="br0">}</span><br>    prev_char <span class="sy1">=</span> s<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><br>    count <span class="sy1">=</span> <span class="nu0">1</span><br>    <span class="kw1">for</span> i <span class="sy1">=</span> <span class="nu0">2</span> <span class="kw1">to</span> <span class="kw2">length</span><span class="br0">(</span>s<span class="br0">)</span> <span class="kw1">do</span><br>        <span class="kw1">if</span> s<span class="br0">[</span>i<span class="br0">]</span>&nbsp;!<span class="sy1">=</span> prev_char <span class="kw1">then</span><br>            out <span class="sy1">&amp;=</span> <span class="br0">{</span>count<span class="sy2">,</span>prev_char<span class="br0">}</span><br>            prev_char <span class="sy1">=</span> s<span class="br0">[</span>i<span class="br0">]</span><br>            count <span class="sy1">=</span> <span class="nu0">1</span><br>        <span class="kw1">else</span><br>            count <span class="sy1">+=</span> <span class="nu0">1</span><br>        <span class="kw1">end</span> <span class="kw1">if</span><br>    <span class="kw1">end</span> <span class="kw1">for</span><br>    out <span class="sy1">&amp;=</span> <span class="br0">{</span>count<span class="sy2">,</span>prev_char<span class="br0">}</span><br>    <span class="kw1">return</span> out<br><span class="kw1">end</span> <span class="kw1">function</span><br>&nbsp;<br><span class="kw1">function</span> decode<span class="br0">(</span><span class="kw2">sequence</span> s<span class="br0">)</span><br>    <span class="kw2">sequence</span> out<br>    out <span class="sy1">=</span> <span class="br0">{</span><span class="br0">}</span><br>    <span class="kw1">for</span> i <span class="sy1">=</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="kw2">length</span><span class="br0">(</span>s<span class="br0">)</span> <span class="kw1">by</span> <span class="nu0">2</span> <span class="kw1">do</span><br>        out <span class="sy1">&amp;=</span> <span class="kw2">repeat</span><span class="br0">(</span>s<span class="br0">[</span>i<span class="sy1">+</span><span class="nu0">1</span><span class="br0">]</span><span class="sy2">,</span>s<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span><br>    <span class="kw1">end</span> <span class="kw1">for</span><br>    <span class="kw1">return</span> out<br><span class="kw1">end</span> <span class="kw1">function</span><br>&nbsp;<br><span class="kw2">sequence</span> s<br>s <span class="sy1">=</span> encode<span class="br0">(</span><span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="br0">)</span><br>pretty_print<span class="br0">(</span><span class="nu0">1</span><span class="sy2">,</span>s<span class="sy2">,</span><span class="br0">{</span><span class="nu0">3</span><span class="br0">}</span><span class="br0">)</span><br><span class="kw2">puts</span><span class="br0">(</span><span class="nu0">1</span><span class="sy2">,</span><span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span><br><span class="kw2">puts</span><span class="br0">(</span><span class="nu0">1</span><span class="sy2">,</span>decode<span class="br0">(</span>s<span class="br0">)</span><span class="br0">)</span></pre>
<p>Output:
</p>
<pre>{12,'W',1,'B',12,'W',3,'B',24,'W',1,'B',14,'W'}
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=23" title="Edit section: F#">edit</a>]</span> <span class="mw-headline" id="F.23"><span id="F_Sharp"><a href="http://rosettacode.org/wiki/Category:F_Sharp" title="Category:F Sharp">F#</a></span></span></h2>
<pre class="fsharp highlighted_source">&nbsp;<br><span class="kw1">open</span> System<br><span class="kw1">open</span> System.<span class="me1">Text</span>.<span class="me1">RegularExpressions</span><br>&nbsp;<br><span class="kw1">let</span> encode data <span class="sy0">=</span><br>    <span class="co1">// encodeData&nbsp;: seq&lt;'T&gt; -&gt; seq&lt;int * 'T&gt; i.e. Takes a sequence of 'T types and return a sequence of tuples containing the run length and an instance of 'T.</span><br>    <span class="kw1">let</span> <span class="kw1">rec</span> encodeData input <span class="sy0">=</span><br>        <span class="kw4">seq</span> <span class="br0">{</span> <span class="kw1">if</span> <span class="kw1">not</span> <span class="br0">(</span><a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">Seq</span></a>.<span class="me1">isEmpty</span> input<span class="br0">)</span> <span class="kw1">then</span><br>                 <span class="kw1">let</span> head <span class="sy0">=</span> <a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">Seq</span></a>.<span class="me1">head</span> input              <br>                 <span class="kw1">let</span> runLength <span class="sy0">=</span> <a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">Seq</span></a>.<span class="me1">length</span> <span class="br0">(</span><a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">Seq</span></a>.<span class="me1">takeWhile</span> <span class="br0">(</span><span class="br0">(</span><span class="sy0">=</span><span class="br0">)</span> head<span class="br0">)</span> input<span class="br0">)</span><br>                 <span class="kw1">yield</span> runLength, head<br>                 <span class="kw1">yield!</span> encodeData <span class="br0">(</span><a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">Seq</span></a>.<span class="me1">skip</span> runLength input<span class="br0">)</span> <span class="br0">}</span><br>&nbsp;<br>    encodeData data <span class="sy0">|&gt;</span> <a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">Seq</span></a>.<span class="me1">fold</span><span class="br0">(</span><span class="kw1">fun</span> acc <span class="br0">(</span>len, d<span class="br0">)</span> <span class="sy0">-&gt;</span> acc <span class="sy0">+</span> len.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">+</span> d.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="st0">""</span><br>&nbsp;<br><span class="kw1">let</span> decode str <span class="sy0">=</span><br>    <span class="br0">[</span> <span class="kw1">for</span> m <span class="kw1">in</span> Regex.<span class="me1">Matches</span><span class="br0">(</span>str, <span class="st0">"(<span class="es0">\d</span>+)(.)"</span><span class="br0">)</span> <span class="sy0">-&gt;</span> m <span class="br0">]</span><br>    <span class="sy0">|&gt;</span> <a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">List</span></a>.<span class="me1">map</span> <span class="br0">(</span><span class="kw1">fun</span> m <span class="sy0">-&gt;</span> Int32.<span class="me1">Parse</span><span class="br0">(</span>m.<span class="me1">Groups</span>.<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span>.<span class="me1">Value</span><span class="br0">)</span>, m.<span class="me1">Groups</span>.<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span>.<span class="me1">Value</span><span class="br0">)</span><br>    <span class="sy0">|&gt;</span> <a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">List</span></a>.<span class="me1">fold</span> <span class="br0">(</span><span class="kw1">fun</span> acc <span class="br0">(</span>len, s<span class="br0">)</span> <span class="sy0">-&gt;</span> acc <span class="sy0">+</span> <a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">String</span></a>.<span class="me1">replicate</span> len s<span class="br0">)</span> <span class="st0">""</span> <br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=24" title="Edit section: FALSE">edit</a>]</span> <span class="mw-headline" id="FALSE"><a href="http://rosettacode.org/wiki/Category:FALSE" title="Category:FALSE">FALSE</a></span></h2>
<pre class="text highlighted_source">1^[^$~][$@$@=$[%%\1+\$0~]?~[@.,1\$]?%]#%\.,  {encode}</pre>
<pre class="text highlighted_source">[0[^$$'9&gt;'0@&gt;|~]['0-\10*+]#]n:<br>[n;!$~][[\$][1-\$,]#%%]#%%                   {decode}</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=25" title="Edit section: Fan">edit</a>]</span> <span class="mw-headline" id="Fan"><a href="http://rosettacode.org/wiki/Category:Fan" title="Category:Fan">Fan</a></span></h2>
<pre class="text highlighted_source">**<br>** Generates a run-length encoding for a string<br>**<br>class RLE<br>{<br>  Run[] encode(Str s)<br>  {<br>    runs&nbsp;:= Run[,]<br>&nbsp;<br>    s.size.times |i|<br>    {<br>      ch&nbsp;:= s[i]<br>      if (runs.size==0 || runs.last.char&nbsp;!= ch)<br>        runs.add(Run(ch))<br>      runs.last.inc<br>    }<br>    return runs<br>  }<br>&nbsp;<br>  Str decode(Run[] runs)<br>  {<br>    buf&nbsp;:= StrBuf()<br>    runs.each |run|<br>    {<br>      run.count.times { buf.add(run.char.toChar) }<br>    }<br>    return buf.toStr<br>  }<br>&nbsp;<br>  Void main()<br>  {<br>    echo(decode(encode(<br>"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"<br>        )))<br>  }<br>&nbsp;<br>}<br>&nbsp;<br>internal class Run<br>{<br>  Int char<br>  Int count&nbsp;:= 0<br>  new make(Int ch) { char = ch }<br>  Void inc() { ++count }<br>&nbsp;<br>  override Str toStr() { return "${count}${char.toChar}" }<br>}</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=26" title="Edit section: Forth">edit</a>]</span> <span class="mw-headline" id="Forth"><a href="http://rosettacode.org/wiki/Category:Forth" title="Category:Forth">Forth</a></span></h2>
<pre class="text highlighted_source">variable a<br>: n&gt;a  (.) tuck a @ swap move a +!&nbsp;;<br>: &gt;a   a @ c! 1 a +!&nbsp;;<br>: encode ( c-addr +n a -- a n' )<br>  dup a&nbsp;! -rot over c@ 1 2swap 1 /string bounds&nbsp;?do<br>    over i c@ = if 1+<br>    else n&gt;a &gt;a i c@ 1 then<br>  loop n&gt;a &gt;a  a @ over -&nbsp;;<br>&nbsp;<br>: digit?  [char] 0 [ char 9 1+ literal ] within&nbsp;;<br>: decode ( c-addr +n a -- a n' )<br>  dup a&nbsp;! 0 2swap bounds&nbsp;?do<br>    i c@ digit? if 10 * i c@ [char] 0 - + else<br>    a @ over i c@ fill a +! 0 then<br>  loop drop a @ over -&nbsp;;</pre>
<p>Example:
</p>
<pre class="text highlighted_source">s" WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"<br>here 1000 + encode here 2000 + decode cr 3 spaces type<br>   WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=27" title="Edit section: Fortran">edit</a>]</span> <span class="mw-headline" id="Fortran"><a href="http://rosettacode.org/wiki/Category:Fortran" title="Category:Fortran">Fortran</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/Fortran" title="Fortran" class="mw-redirect">Fortran</a> version 95 and later</div>
<pre class="fortran highlighted_source"><span class="kw1">program</span> RLE<br>  <span class="kw3">implicit</span> <span class="kw3">none</span><br>&nbsp;<br>  <span class="kw3">integer</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="me2">bufsize</span> <span class="sy0">=</span> <span class="nu0">100</span>   <span class="co1">! Sets maximum size of coded and decoded strings, adjust as necessary</span><br>  <span class="kw3">character</span><span class="br0">(</span>bufsize<span class="br0">)</span> <span class="sy0">::</span> <span class="me2">teststr</span> <span class="sy0">=</span> <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span>	<br>  <span class="kw3">character</span><span class="br0">(</span>bufsize<span class="br0">)</span> <span class="sy0">::</span> <span class="me2">codedstr</span> <span class="sy0">=</span> <span class="st0">""</span>, decodedstr <span class="sy0">=</span> <span class="st0">""</span><br>&nbsp;<br>  <span class="kw1">call</span> Encode<span class="br0">(</span>teststr, codedstr<span class="br0">)</span><br>  write<span class="br0">(</span><span class="sy0">*</span>,<span class="st0">"(a)"</span><span class="br0">)</span> <span class="kw4">trim</span><span class="br0">(</span>codedstr<span class="br0">)</span><br>  <span class="kw1">call</span> Decode<span class="br0">(</span>codedstr, decodedstr<span class="br0">)</span><br>  write<span class="br0">(</span><span class="sy0">*</span>,<span class="st0">"(a)"</span><span class="br0">)</span> <span class="kw4">trim</span><span class="br0">(</span>decodedstr<span class="br0">)</span><br>&nbsp;<br><span class="co1">contains</span><br>&nbsp;<br><span class="kw1">subroutine</span> Encode<span class="br0">(</span>instr, outstr<span class="br0">)</span><br>  <span class="kw3">character</span><span class="br0">(</span><span class="sy0">*</span><span class="br0">)</span>, <span class="kw3">intent</span><span class="br0">(</span><span class="kw3">in</span><span class="br0">)</span>  <span class="sy0">::</span> <span class="me2">instr</span><br>  <span class="kw3">character</span><span class="br0">(</span><span class="sy0">*</span><span class="br0">)</span>, <span class="kw3">intent</span><span class="br0">(</span><span class="kw3">out</span><span class="br0">)</span> <span class="sy0">::</span> <span class="me2">outstr</span><br>  <span class="kw3">character</span><span class="br0">(</span><span class="nu0">8</span><span class="br0">)</span> <span class="sy0">::</span> <span class="me2">tempstr</span> <span class="sy0">=</span> <span class="st0">""</span><br>  <span class="kw3">character</span><span class="br0">(</span><span class="nu0">26</span><span class="br0">)</span> <span class="sy0">::</span> <span class="me2">validchars</span> <span class="sy0">=</span> <span class="st0">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><br>  <span class="kw3">integer</span> <span class="sy0">::</span> <span class="me2">a</span>, b, c, i<br>&nbsp;<br>  <span class="kw1">if</span><span class="br0">(</span><span class="kw4">verify</span><span class="br0">(</span><span class="kw4">trim</span><span class="br0">(</span>instr<span class="br0">)</span>, validchars<span class="br0">)</span> <span class="sy0">/=</span> <span class="nu0">0</span><span class="br0">)</span> <span class="kw1">then</span><br>    outstr <span class="sy0">=</span> <span class="st0">"Invalid input"</span><br>    <span class="kw1">return</span><br>  <span class="kw1">end</span> <span class="kw1">if</span><br>  outstr <span class="sy0">=</span> <span class="st0">""</span><br>  c <span class="sy0">=</span> <span class="nu0">1</span><br>  a <span class="sy0">=</span> <span class="kw4">iachar</span><span class="br0">(</span>instr<span class="br0">(</span><span class="nu0">1</span><span class="sy0">:</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="kw1">do</span> i <span class="sy0">=</span> <span class="nu0">2</span>, <span class="kw4">len</span><span class="br0">(</span><span class="kw4">trim</span><span class="br0">(</span>instr<span class="br0">)</span><span class="br0">)</span><br>    b <span class="sy0">=</span> <span class="kw4">iachar</span><span class="br0">(</span>instr<span class="br0">(</span>i<span class="sy0">:</span>i<span class="br0">)</span><span class="br0">)</span><br>    <span class="kw1">if</span><span class="br0">(</span>a <span class="sy0">==</span> b<span class="br0">)</span> <span class="kw1">then</span><br>      c <span class="sy0">=</span> c <span class="sy0">+</span> <span class="nu0">1</span><br>    <span class="kw1">else</span><br>      write<span class="br0">(</span>tempstr, <span class="st0">"(i0)"</span><span class="br0">)</span> c<br>      outstr <span class="sy0">=</span> <span class="kw4">trim</span><span class="br0">(</span>outstr<span class="br0">)</span> <span class="sy0">//</span> <span class="kw4">trim</span><span class="br0">(</span>tempstr<span class="br0">)</span> <span class="sy0">//</span> <span class="kw4">achar</span><span class="br0">(</span>a<span class="br0">)</span><br>      a <span class="sy0">=</span> b<br>      c <span class="sy0">=</span> <span class="nu0">1</span><br>    <span class="kw1">end</span> <span class="kw1">if</span><br>  <span class="kw1">end</span> <span class="kw1">do</span><br>  write<span class="br0">(</span>tempstr, <span class="st0">"(i0)"</span><span class="br0">)</span> c<br>  outstr <span class="sy0">=</span> <span class="kw4">trim</span><span class="br0">(</span>outstr<span class="br0">)</span> <span class="sy0">//</span> <span class="kw4">trim</span><span class="br0">(</span>tempstr<span class="br0">)</span> <span class="sy0">//</span> <span class="kw4">achar</span><span class="br0">(</span>b<span class="br0">)</span><br><span class="kw1">end</span> <span class="kw1">subroutine</span><br>&nbsp;<br><span class="kw1">subroutine</span> Decode<span class="br0">(</span>instr, outstr<span class="br0">)</span><br>  <span class="kw3">character</span><span class="br0">(</span><span class="sy0">*</span><span class="br0">)</span>, <span class="kw3">intent</span><span class="br0">(</span><span class="kw3">in</span><span class="br0">)</span>  <span class="sy0">::</span> <span class="me2">instr</span><br>  <span class="kw3">character</span><span class="br0">(</span><span class="sy0">*</span><span class="br0">)</span>, <span class="kw3">intent</span><span class="br0">(</span><span class="kw3">out</span><span class="br0">)</span> <span class="sy0">::</span> <span class="me2">outstr</span><br>  <span class="kw3">character</span><span class="br0">(</span><span class="nu0">26</span><span class="br0">)</span> <span class="sy0">::</span> <span class="me2">validchars</span> <span class="sy0">=</span> <span class="st0">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><br>  <span class="kw3">integer</span> <span class="sy0">::</span> <span class="me2">startn</span>, endn, n<br>&nbsp;<br>  outstr <span class="sy0">=</span> <span class="st0">""</span><br>  startn <span class="sy0">=</span> <span class="nu0">1</span><br>  <span class="kw1">do</span> <span class="kw1">while</span><span class="br0">(</span>startn &lt; <span class="kw4">len</span><span class="br0">(</span><span class="kw4">trim</span><span class="br0">(</span>instr<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    endn <span class="sy0">=</span> <span class="kw4">scan</span><span class="br0">(</span>instr<span class="br0">(</span>startn<span class="sy0">:</span><span class="br0">)</span>, validchars<span class="br0">)</span> <span class="sy0">+</span> startn <span class="sy0">-</span> <span class="nu0">1</span><br>    read<span class="br0">(</span>instr<span class="br0">(</span>startn<span class="sy0">:</span>endn<span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span>, <span class="st0">"(i8)"</span><span class="br0">)</span> n<br>    outstr <span class="sy0">=</span> <span class="kw4">trim</span><span class="br0">(</span>outstr<span class="br0">)</span> <span class="sy0">//</span> <span class="kw4">repeat</span><span class="br0">(</span>instr<span class="br0">(</span>endn<span class="sy0">:</span>endn<span class="br0">)</span>, n<span class="br0">)</span><br>    startn <span class="sy0">=</span> endn <span class="sy0">+</span> <span class="nu0">1</span><br>  <span class="kw1">end</span> <span class="kw1">do</span><br><span class="kw1">end</span> <span class="kw1">subroutine</span><br><span class="kw1">end</span> <span class="kw1">program</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=28" title="Edit section: Go">edit</a>]</span> <span class="mw-headline" id="Go"><a href="http://rosettacode.org/wiki/Category:Go" title="Category:Go">Go</a></span></h2>
<p>Decoder kind of necessary to demonstrate task requirement that I can recreate the input.
</p>
<pre class="go highlighted_source"><span class="kw1">package</span> main<br>&nbsp;<br><span class="kw1">import</span> <span class="st0">"fmt"</span><br>&nbsp;<br><span class="co1">// encoding scheme:</span><br><span class="co1">// encode to byte array</span><br><span class="co1">// byte value &lt; 26 means single character: byte value + 'A'</span><br><span class="co1">// byte value 26..255 means (byte value - 24) copies of next byte</span><br><span class="kw4">func</span> rllEncode<span class="sy1">(</span>s <span class="kw4">string</span><span class="sy1">)</span> <span class="sy1">(</span>r <span class="sy1">[]</span><span class="kw4">byte</span><span class="sy1">)</span> <span class="sy1">{</span><br>    <span class="kw1">if</span> s <span class="sy3">==</span> <span class="st0">""</span> <span class="sy1">{</span><br>        <span class="kw1">return</span><br>    <span class="sy1">}</span><br>    c <span class="sy2">:=</span> s<span class="sy1">[</span><span class="nu0">0</span><span class="sy1">]</span><br>    <span class="kw1">if</span> c &lt; <span class="st0">'A'</span> <span class="sy3">||</span> c <span class="sy3">&gt;</span> <span class="st0">'Z'</span> <span class="sy1">{</span><br>        <span class="kw3">panic</span><span class="sy1">(</span><span class="st0">"invalid"</span><span class="sy1">)</span><br>    <span class="sy1">}</span><br>    nc <span class="sy2">:=</span> <span class="kw4">byte</span><span class="sy1">(</span><span class="nu0">1</span><span class="sy1">)</span><br>    <span class="kw1">for</span> <span class="nu2">i</span> <span class="sy2">:=</span> <span class="nu0">1</span><span class="sy1">;</span> <span class="nu2">i</span> &lt; <span class="kw3">len</span><span class="sy1">(</span>s<span class="sy1">);</span> <span class="nu2">i</span><span class="sy2">++</span> <span class="sy1">{</span><br>        d <span class="sy2">:=</span> s<span class="sy1">[</span><span class="nu2">i</span><span class="sy1">]</span><br>        <span class="kw1">switch</span> <span class="sy1">{</span><br>        <span class="kw1">case</span> d <span class="sy2">!=</span> c<span class="sy1">:</span><br>        <span class="kw1">case</span> nc &lt; <span class="sy1">(</span><span class="nu0">255</span> <span class="sy3">-</span> <span class="nu0">24</span><span class="sy1">):</span><br>            nc<span class="sy2">++</span><br>            <span class="kw1">continue</span><br>        <span class="sy1">}</span><br>        <span class="kw1">if</span> nc &gt; <span class="nu0">1</span> <span class="sy1">{</span><br>            r <span class="sy2">=</span> append<span class="sy1">(</span>r<span class="sy1">,</span> nc<span class="sy3">+</span><span class="nu0">24</span><span class="sy1">)</span><br>        <span class="sy1">}</span><br>        r <span class="sy2">=</span> append<span class="sy1">(</span>r<span class="sy1">,</span> c<span class="sy3">-</span><span class="st0">'A'</span><span class="sy1">)</span><br>        <span class="kw1">if</span> d &lt; <span class="st0">'A'</span> <span class="sy3">||</span> d <span class="sy3">&gt;</span> <span class="st0">'Z'</span> <span class="sy1">{</span><br>            <span class="kw3">panic</span><span class="sy1">(</span><span class="st0">"invalid"</span><span class="sy1">)</span><br>        <span class="sy1">}</span><br>        c <span class="sy2">=</span> d<br>        nc <span class="sy2">=</span> <span class="nu0">1</span><br>    <span class="sy1">}</span><br>    <span class="kw1">if</span> nc &gt; <span class="nu0">1</span> <span class="sy1">{</span><br>        r <span class="sy2">=</span> append<span class="sy1">(</span>r<span class="sy1">,</span> nc<span class="sy3">+</span><span class="nu0">24</span><span class="sy1">)</span><br>    <span class="sy1">}</span><br>    r <span class="sy2">=</span> append<span class="sy1">(</span>r<span class="sy1">,</span> c<span class="sy3">-</span><span class="st0">'A'</span><span class="sy1">)</span><br>    <span class="kw1">return</span><br><span class="sy1">}</span><br>&nbsp;<br><span class="kw4">func</span> main<span class="sy1">()</span> <span class="sy1">{</span><br>    s <span class="sy2">:=</span> <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><br>    fmt<span class="sy3">.</span><span class="me1">Println</span><span class="sy1">(</span><span class="st0">"source: "</span><span class="sy1">,</span> <span class="kw3">len</span><span class="sy1">(</span>s<span class="sy1">),</span> <span class="st0">"bytes:"</span><span class="sy1">,</span> s<span class="sy1">)</span><br>    e <span class="sy2">:=</span> rllEncode<span class="sy1">(</span>s<span class="sy1">)</span><br>    fmt<span class="sy3">.</span><span class="me1">Println</span><span class="sy1">(</span><span class="st0">"encoded:"</span><span class="sy1">,</span> <span class="kw3">len</span><span class="sy1">(</span>e<span class="sy1">),</span> <span class="st0">"bytes:"</span><span class="sy1">,</span> e<span class="sy1">)</span><br>    d <span class="sy2">:=</span> rllDecode<span class="sy1">(</span>e<span class="sy1">)</span><br>    fmt<span class="sy3">.</span><span class="me1">Println</span><span class="sy1">(</span><span class="st0">"decoded:"</span><span class="sy1">,</span> <span class="kw3">len</span><span class="sy1">(</span>d<span class="sy1">),</span> <span class="st0">"bytes:"</span><span class="sy1">,</span> d<span class="sy1">)</span><br>    fmt<span class="sy3">.</span><span class="me1">Println</span><span class="sy1">(</span><span class="st0">"decoded = source:"</span><span class="sy1">,</span> d <span class="sy3">==</span> s<span class="sy1">)</span><br><span class="sy1">}</span><br>&nbsp;<br><span class="kw4">func</span> rllDecode<span class="sy1">(</span>e <span class="sy1">[]</span><span class="kw4">byte</span><span class="sy1">)</span> <span class="kw4">string</span> <span class="sy1">{</span><br>    <span class="kw1">var</span> c <span class="kw4">byte</span><br>    <span class="kw1">var</span> d <span class="sy1">[]</span><span class="kw4">byte</span><br>    <span class="kw1">for</span> <span class="nu2">i</span> <span class="sy2">:=</span> <span class="nu0">0</span><span class="sy1">;</span> <span class="nu2">i</span> &lt; <span class="kw3">len</span><span class="sy1">(</span>e<span class="sy1">);</span> <span class="nu2">i</span><span class="sy2">++</span> <span class="sy1">{</span><br>        b <span class="sy2">:=</span> e<span class="sy1">[</span><span class="nu2">i</span><span class="sy1">]</span><br>        <span class="kw1">if</span> b &lt; <span class="nu0">26</span> <span class="sy1">{</span><br>            c <span class="sy2">=</span> <span class="nu0">1</span><br>        <span class="sy1">}</span> <span class="kw1">else</span> <span class="sy1">{</span><br>            c <span class="sy2">=</span> b <span class="sy3">-</span> <span class="nu0">24</span><br>            <span class="nu2">i</span><span class="sy2">++</span><br>            b <span class="sy2">=</span> e<span class="sy1">[</span><span class="nu2">i</span><span class="sy1">]</span><br>        <span class="sy1">}</span><br>        <span class="kw1">for</span> c &gt; <span class="nu0">0</span> <span class="sy1">{</span><br>            d <span class="sy2">=</span> append<span class="sy1">(</span>d<span class="sy1">,</span> b<span class="sy3">+</span><span class="st0">'A'</span><span class="sy1">)</span><br>            c<span class="sy2">--</span><br>        <span class="sy1">}</span><br>    <span class="sy1">}</span><br>    <span class="kw1">return</span> <span class="kw4">string</span><span class="sy1">(</span>d<span class="sy1">)</span><br><span class="sy1">}</span></pre>
<p>Output:
</p>
<pre>source:  67 bytes: WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
encoded: 12 bytes: [36 22 1 36 22 27 1 48 22 1 38 22]
decoded: 67 bytes: WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
decoded = source: true
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=29" title="Edit section: Groovy">edit</a>]</span> <span class="mw-headline" id="Groovy"><a href="http://rosettacode.org/wiki/Category:Groovy" title="Category:Groovy">Groovy</a></span></h2>
<pre class="groovy highlighted_source"><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> rleEncode<span class="br0">(</span>text<span class="br0">)</span> <span class="br0">{</span><br>    <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> encoded <span class="sy0">=</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new"><span class="kw2">new</span></a> StringBuilder<span class="br0">(</span><span class="br0">)</span><br>    <span class="br0">(</span>text <span class="sy0">=</span>~ /<span class="br0">(</span><span class="br0">(</span><span class="br0">[</span>A<span class="sy0">-</span>Z<span class="br0">]</span><span class="br0">)</span>\<span class="nu0">2</span><span class="sy0">*</span><span class="br0">)</span>/<span class="br0">)</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each"><span class="kw5">each</span></a> <span class="br0">{</span> matcher <span class="sy0">-&gt;</span><br>        encoded.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20append"><span class="kw7">append</span></a><span class="br0">(</span>matcher<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size"><span class="kw5">size</span></a><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20append"><span class="kw7">append</span></a><span class="br0">(</span>matcher<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="br0">)</span><br>    <span class="br0">}</span><br>    encoded.<span class="me1">toString</span><span class="br0">(</span><span class="br0">)</span><br><span class="br0">}</span><br>&nbsp;<br><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> rleDecode<span class="br0">(</span>text<span class="br0">)</span> <span class="br0">{</span><br>    <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> decoded <span class="sy0">=</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new"><span class="kw2">new</span></a> StringBuilder<span class="br0">(</span><span class="br0">)</span><br>    <span class="br0">(</span>text <span class="sy0">=</span>~ /<span class="br0">(</span><span class="br0">[</span><span class="nu0">0</span><span class="sy0">-</span><span class="nu0">9</span><span class="br0">]</span><span class="sy0">+</span><span class="br0">)</span><span class="br0">(</span><span class="br0">[</span>A<span class="sy0">-</span>Z<span class="br0">]</span><span class="br0">)</span>/<span class="br0">)</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each"><span class="kw5">each</span></a> <span class="br0">{</span> matcher <span class="sy0">-&gt;</span><br>        decoded.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20append"><span class="kw7">append</span></a><span class="br0">(</span>matcher<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span> <span class="sy0">*</span> <a href="http://www.google.de/search?as_q=Integer&num=100&hl=en&as_occt=url&as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F"><span class="kw3">Integer</span></a>.<span class="me1">parseInt</span><span class="br0">(</span>matcher<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">}</span><br>    decoded.<span class="me1">toString</span><span class="br0">(</span><span class="br0">)</span><br><span class="br0">}</span></pre>
<p>Test code
</p>
<pre class="groovy highlighted_source"><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> text <span class="sy0">=</span> <span class="st0">'WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW'</span><br><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> rleEncoded <span class="sy0">=</span> rleEncode<span class="br0">(</span>text<span class="br0">)</span><br><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert"><span class="kw2">assert</span></a> rleEncoded <span class="sy0">==</span> <span class="st0">'12W1B12W3B24W1B14W'</span><br><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert"><span class="kw2">assert</span></a> text <span class="sy0">==</span> rleDecode<span class="br0">(</span>rleEncoded<span class="br0">)</span><br>&nbsp;<br><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">"Original Text: $text"</span><br><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">"Encoded Text: $rleEncoded"</span></pre>
<p>Output:
</p>
<pre>Original Text: WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
Encoded Text: 12W1B12W3B24W1B14W</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=30" title="Edit section: Haskell">edit</a>]</span> <span class="mw-headline" id="Haskell"><a href="http://rosettacode.org/wiki/Category:Haskell" title="Category:Haskell">Haskell</a></span></h2>
<pre class="haskell highlighted_source"><span class="kw1">import</span> Data<span class="sy0">.</span>List <span class="br0">(</span>group<span class="br0">)</span><br>&nbsp;<br><span class="co1">-- Datatypes</span><br><span class="kw1">type</span> Encoded <span class="sy0">=</span> <span class="br0">[</span><span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span class="kw4">Int</span></a><span class="sy0">,</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char"><span class="kw4">Char</span></a><span class="br0">)</span><span class="br0">]</span>  <span class="co1">-- An encoded String with form [(times, char), ...]</span><br><span class="kw1">type</span> Decoded <span class="sy0">=</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String"><span class="kw4">String</span></a><br>&nbsp;<br><span class="co1">-- Takes a decoded string and returns an encoded list of tuples</span><br>rlencode <span class="sy0">::</span> Decoded <span class="sy0">-&gt;</span> Encoded<br>rlencode <span class="sy0">=</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a> <span class="br0">(</span>\g <span class="sy0">-&gt;</span> <span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length"><span class="kw3">length</span></a> g<span class="sy0">,</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head"><span class="kw3">head</span></a> g<span class="br0">)</span><span class="br0">)</span> <span class="sy0">.</span> group<br>&nbsp;<br><span class="co1">-- Takes an encoded list of tuples and returns the associated decoded String</span><br>rldecode <span class="sy0">::</span> Encoded <span class="sy0">-&gt;</span> Decoded<br>rldecode <span class="sy0">=</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap"><span class="kw3">concatMap</span></a> decodeTuple<br>    <span class="kw1">where</span> decodeTuple <span class="br0">(</span>n<span class="sy0">,</span>c<span class="br0">)</span> <span class="sy0">=</span> replicate n c<br>&nbsp;<br>main <span class="sy0">::</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO"><span class="kw4">IO</span></a> <span class="br0">(</span><span class="br0">)</span><br>main <span class="sy0">=</span> <span class="kw1">do</span><br>  <span class="co1">-- Get input</span><br>  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr"><span class="kw3">putStr</span></a> <span class="st0">"String to encode: "</span><br>  input <span class="sy0">&lt;-</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getLine"><span class="kw3">getLine</span></a><br>  <span class="co1">-- Output encoded and decoded versions of input</span><br>  <span class="kw1">let</span> encoded <span class="sy0">=</span> rlencode input<br>      decoded <span class="sy0">=</span> rldecode encoded<br>  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn"><span class="kw3">putStrLn</span></a> <span class="sy0">$</span> <span class="st0">"Encoded: "</span> <span class="sy0">++</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show"><span class="kw3">show</span></a> encoded <span class="sy0">++</span> <span class="st0">"<span class="es0">\n</span>Decoded: "</span> <span class="sy0">++</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show"><span class="kw3">show</span></a> decoded</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=31" title="Edit section: Icon and Unicon">edit</a>]</span> <span class="mw-headline" id="Icon_and_Unicon"><a href="http://rosettacode.org/wiki/Category:Icon" title="Category:Icon">Icon</a> and <a href="http://rosettacode.org/wiki/Category:Unicon" title="Category:Unicon">Unicon</a></span></h2>
<pre class="icon highlighted_source"><span class="kw1">procedure</span> main<span class="br0">(</span>arglist<span class="br0">)</span><br>&nbsp;<br>   s <span class="sy1">:=</span> <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><br>&nbsp;<br>   <span class="kw4">write</span><span class="br0">(</span><span class="st0">" s="</span><span class="sy1">,</span><span class="kw4">image</span><span class="br0">(</span>s<span class="br0">)</span><span class="br0">)</span><br>   <span class="kw4">write</span><span class="br0">(</span><span class="st0">"s1="</span><span class="sy1">,</span><span class="kw4">image</span><span class="br0">(</span>s1 <span class="sy1">:=</span> rle_encode<span class="br0">(</span>s<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>   <span class="kw4">write</span><span class="br0">(</span><span class="st0">"s2="</span><span class="sy1">,</span><span class="kw4">image</span><span class="br0">(</span>s2 <span class="sy1">:=</span> rle_decode<span class="br0">(</span>s1<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br>   <span class="kw1">if</span> s <span class="sy1">~==</span> s2 <span class="kw1">then</span> <span class="kw4">write</span><span class="br0">(</span><span class="st0">"Encode/Decode problem."</span><span class="br0">)</span><br>               <span class="kw1">else</span> <span class="kw4">write</span><span class="br0">(</span><span class="st0">"Encode/Decode worked."</span><span class="br0">)</span><br><span class="kw1">end</span><br>&nbsp;<br><span class="kw1">procedure</span> rle_encode<span class="br0">(</span>s<span class="br0">)</span><br>   es <span class="sy1">:=</span> <span class="st0">""</span><br>   s <span class="sy1">?</span> <span class="kw1">while</span> c <span class="sy1">:=</span> <span class="kw4">move</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span> <span class="kw1">do</span> es <span class="sy1">||:=</span> <span class="sy1">*</span><span class="br0">(</span><span class="kw4">move</span><span class="br0">(</span><span class="sy1">-</span><span class="nu0">1</span><span class="br0">)</span><span class="sy1">,</span><span class="kw4">tab</span><span class="br0">(</span><span class="kw4">many</span><span class="br0">(</span>c<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> <span class="sy1">||</span> c<br>   <span class="kw1">return</span> es<br><span class="kw1">end</span><br>&nbsp;<br><span class="kw1">procedure</span> rle_decode<span class="br0">(</span>es<span class="br0">)</span><br>   s <span class="sy1">:=</span> <span class="st0">""</span><br>   es <span class="sy1">?</span> <span class="kw1">while</span> s <span class="sy1">||:=</span> Repl<span class="br0">(</span><span class="kw4">tab</span><span class="br0">(</span><span class="kw4">many</span><span class="br0">(</span><span class="sy1">&amp;</span><span class="kw3">digits</span><span class="br0">)</span><span class="br0">)</span><span class="sy1">,</span><span class="kw4">move</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>   <span class="kw1">return</span> s<br><span class="kw1">end</span><br>&nbsp;<br><span class="kw1">procedure</span> Repl<span class="br0">(</span>n<span class="sy1">,</span> c<span class="br0">)</span><br>    <span class="kw1">return</span> <span class="kw4">repl</span><span class="br0">(</span>c<span class="sy1">,</span>n<span class="br0">)</span><br><span class="kw1">end</span></pre>
<p>Sample output:
</p>
<pre> s="WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"
s1="12W1B12W3B24W1B14W"
s2="WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"
Encode/Decode worked.</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=32" title="Edit section: J">edit</a>]</span> <span class="mw-headline" id="J"><a href="http://rosettacode.org/wiki/Category:J" title="Category:J">J</a></span></h2>
<p><b>Solution:</b>
</p>
<pre class="j highlighted_source">rle=:&nbsp;;@<span class="sy0">(</span>&lt;@<span class="sy0">(</span>":@#,{.<span class="sy0">)</span>;.<span class="nu0">1</span>~ <span class="nu0">1</span>, <span class="nu0">2</span> ~:/\ ]<span class="sy0">)</span><br>rld=: <span class="st_h">'0123456789'</span>&amp;<span class="sy0">(</span>-.~ #~ i. ".@:{ <span class="st_h">' '</span> ,~ [<span class="sy0">)</span></pre>
<p><b>Example:</b>
</p>
<pre class="j highlighted_source">   rle <span class="st_h">'WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW'</span><br>12W1B12W3B24W1B14W<br>&nbsp;<br>   rld <span class="st_h">'12W1B12W3B24W1B14W'</span><br>WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=33" title="Edit section: Java">edit</a>]</span> <span class="mw-headline" id="Java"><a href="http://rosettacode.org/wiki/Category:Java" title="Category:Java">Java</a></span></h2>
<pre class="java highlighted_source"><span class="kw1">import</span> <span class="co2">java.util.regex.Matcher</span><span class="sy0">;</span><br><span class="kw1">import</span> <span class="co2">java.util.regex.Pattern</span><span class="sy0">;</span><br><span class="kw1">public</span> <span class="kw1">class</span> RunLengthEncoding <span class="br0">{</span><br>&nbsp;<br>    <span class="kw1">public</span> <span class="kw1">static</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> encode<span class="br0">(</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> source<span class="br0">)</span> <span class="br0">{</span><br>        <a href="http://www.google.com/search?hl=en&q=allinurl%3Astringbuffer+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">StringBuffer</span></a> dest <span class="sy0">=</span> <span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Astringbuffer+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">StringBuffer</span></a><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> source.<span class="me1">length</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span><br>            <span class="kw4">int</span> runLength <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span><br>            <span class="kw1">while</span> <span class="br0">(</span>i<span class="sy0">+</span><span class="nu0">1</span> <span class="sy0">&lt;</span> source.<span class="me1">length</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">&amp;&amp;</span> source.<span class="me1">charAt</span><span class="br0">(</span>i<span class="br0">)</span> <span class="sy0">==</span> source.<span class="me1">charAt</span><span class="br0">(</span>i<span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span><br>                runLength<span class="sy0">++;</span><br>                i<span class="sy0">++;</span><br>            <span class="br0">}</span><br>            dest.<span class="me1">append</span><span class="br0">(</span>runLength<span class="br0">)</span><span class="sy0">;</span><br>            dest.<span class="me1">append</span><span class="br0">(</span>source.<span class="me1">charAt</span><span class="br0">(</span>i<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>        <span class="kw1">return</span> dest.<span class="me1">toString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw1">public</span> <span class="kw1">static</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> decode<span class="br0">(</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> source<span class="br0">)</span> <span class="br0">{</span><br>        <a href="http://www.google.com/search?hl=en&q=allinurl%3Astringbuffer+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">StringBuffer</span></a> dest <span class="sy0">=</span> <span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Astringbuffer+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">StringBuffer</span></a><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>        Pattern pattern <span class="sy0">=</span> Pattern.<span class="me1">compile</span><span class="br0">(</span><span class="st0">"[0-9]+|[a-zA-Z]"</span><span class="br0">)</span><span class="sy0">;</span><br>        Matcher matcher <span class="sy0">=</span> pattern.<span class="me1">matcher</span><span class="br0">(</span>source<span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw1">while</span> <span class="br0">(</span>matcher.<span class="me1">find</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span><br>            <span class="kw4">int</span> number <span class="sy0">=</span> <a href="http://www.google.com/search?hl=en&q=allinurl%3Ainteger+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Integer</span></a>.<span class="me1">parseInt</span><span class="br0">(</span>matcher.<span class="me1">group</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>            matcher.<span class="me1">find</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="kw1">while</span> <span class="br0">(</span>number<span class="sy0">--</span> <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">)</span> <span class="br0">{</span><br>                dest.<span class="me1">append</span><span class="br0">(</span>matcher.<span class="me1">group</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="br0">}</span><br>        <span class="br0">}</span><br>        <span class="kw1">return</span> dest.<span class="me1">toString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> main<span class="br0">(</span><a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span> <span class="br0">{</span><br>        <a href="http://www.google.com/search?hl=en&q=allinurl%3Astring+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> example <span class="sy0">=</span> <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="sy0">;</span><br>        <a href="http://www.google.com/search?hl=en&q=allinurl%3Asystem+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>encode<span class="br0">(</span>example<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>        <a href="http://www.google.com/search?hl=en&q=allinurl%3Asystem+java.sun.com&btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>decode<span class="br0">(</span><span class="st0">"1W1B1W1B1W1B1W1B1W1B1W1B1W1B"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span><br><span class="br0">}</span></pre>
<p>Tests:
</p>
<div class="examplemeta libheader"><b>Library:</b> <a href="http://rosettacode.org/wiki/Category:JUnit" title="Category:JUnit">JUnit</a></div>
<pre class="java highlighted_source"><span class="kw1">import</span> <span class="co2">static</span> org.<span class="me1">junit</span>.<span class="kw1">Assert</span>.<span class="me1">assertEquals</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw1">import</span> <span class="co2">org.junit.Test</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw1">public</span> <span class="kw1">class</span> RunLengthEncodingTest <span class="br0">{</span><br>	<span class="kw1">private</span> RLE <span class="sy0">=</span> <span class="kw1">new</span> RunLengthEncoding<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	@Test<br>	<span class="kw1">public</span> <span class="kw4">void</span> encodingTest<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>		assertEquals<span class="br0">(</span><span class="st0">"1W"</span>, RLE.<span class="me1">encode</span><span class="br0">(</span><span class="st0">"W"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>		assertEquals<span class="br0">(</span><span class="st0">"4W"</span>, RLE.<span class="me1">encode</span><span class="br0">(</span><span class="st0">"WWWW"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>		assertEquals<span class="br0">(</span><span class="st0">"5w4i7k3i6p5e4d2i1a"</span>,<br>				RLE.<span class="me1">encode</span><span class="br0">(</span><span class="st0">"wwwwwiiiikkkkkkkiiippppppeeeeeddddiia"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>		assertEquals<span class="br0">(</span><span class="st0">"12B1N12B3N24B1N14B"</span>,<br>				RLE.<span class="me1">encode</span><span class="br0">(</span><span class="st0">"BBBBBBBBBBBBNBBBBBBBBBBBBNNNBBBBBBBBBBBBBBBBBBBBBBBBNBBBBBBBBBBBBBB"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>		assertEquals<span class="br0">(</span><span class="st0">"12W1B12W3B24W1B14W"</span>,<br>				RLE.<span class="me1">encode</span><span class="br0">(</span><span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>		assertEquals<span class="br0">(</span><span class="st0">"1W1B1W1B1W1B1W1B1W1B1W1B1W1B"</span>, RLE.<span class="me1">encode</span><span class="br0">(</span><span class="st0">"WBWBWBWBWBWBWB"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="br0">}</span><br>&nbsp;<br>	@Test<br>	<span class="kw1">public</span> <span class="kw4">void</span> decodingTest<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>		assertEquals<span class="br0">(</span><span class="st0">"W"</span>, RLE.<span class="me1">decode</span><span class="br0">(</span><span class="st0">"1W"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>		assertEquals<span class="br0">(</span><span class="st0">"WWWW"</span>, RLE.<span class="me1">decode</span><span class="br0">(</span><span class="st0">"4W"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>		assertEquals<span class="br0">(</span><span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span>,<br>				RLE.<span class="me1">decode</span><span class="br0">(</span><span class="st0">"12W1B12W3B24W1B14W"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>		assertEquals<span class="br0">(</span><span class="st0">"WBWBWBWBWBWBWB"</span>, RLE.<span class="me1">decode</span><span class="br0">(</span><span class="st0">"1W1B1W1B1W1B1W1B1W1B1W1B1W1B"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>		assertEquals<span class="br0">(</span><span class="st0">"WBWBWBWBWBWBWB"</span>, RLE.<span class="me1">decode</span><span class="br0">(</span><span class="st0">"1W1B1W1B1W1B1W1B1W1B1W1B1W1B"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="br0">}</span><br><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=34" title="Edit section: JavaScript">edit</a>]</span> <span class="mw-headline" id="JavaScript"><a href="http://rosettacode.org/wiki/Category:JavaScript" title="Category:JavaScript">JavaScript</a></span></h2>
<p>Here's an encoding method that walks the input string character by character
</p>
<pre class="javascript highlighted_source"><span class="kw1">function</span> encode<span class="br0">(</span>input<span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw1">var</span> encoding <span class="sy0">=</span> <span class="br0">[</span><span class="br0">]</span><span class="sy0">;</span><br>    <span class="kw1">var</span> prev<span class="sy0">,</span> count<span class="sy0">,</span> i<span class="sy0">;</span><br>    <span class="kw1">for</span> <span class="br0">(</span>count <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span> prev <span class="sy0">=</span> input<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="sy0">,</span> i <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw1">if</span> <span class="br0">(</span>input<span class="br0">[</span>i<span class="br0">]</span> <span class="sy0">!=</span> prev<span class="br0">)</span> <span class="br0">{</span><br>            encoding.<span class="me1">push</span><span class="br0">(</span><span class="br0">[</span>count<span class="sy0">,</span> prev<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>            count <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span><br>            prev <span class="sy0">=</span> input<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>        <span class="kw1">else</span> <br>            count <span class="sy0">++;</span><br>    <span class="br0">}</span><br>    encoding.<span class="me1">push</span><span class="br0">(</span><span class="br0">[</span>count<span class="sy0">,</span> prev<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="kw1">return</span> encoding<span class="sy0">;</span><br><span class="br0">}</span></pre>
Here's an encoding method that uses a regular expression to grab the character runs (<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/JavaScript" title="JavaScript" class="mw-redirect">JavaScript</a> version 1.6</div> for the <code>forEach</code> method)
<pre class="javascript highlighted_source"><span class="kw1">function</span> encode_re<span class="br0">(</span>input<span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw1">var</span> encoding <span class="sy0">=</span> <span class="br0">[</span><span class="br0">]</span><span class="sy0">;</span><br>    input.<span class="me1">match</span><span class="br0">(</span><span class="co2">/(.)\1*/g</span><span class="br0">)</span>.<span class="me1">forEach</span><span class="br0">(</span><span class="kw1">function</span><span class="br0">(</span>substr<span class="br0">)</span><span class="br0">{</span> encoding.<span class="me1">push</span><span class="br0">(</span><span class="br0">[</span>substr.<span class="me1">length</span><span class="sy0">,</span> substr<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span> <span class="br0">}</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="kw1">return</span> encoding<span class="sy0">;</span><br><span class="br0">}</span></pre>
<p>And to decode (see <a href="http://rosettacode.org/wiki/Repeating_a_string#JavaScript" title="Repeating a string" class="mw-redirect">Repeating a string</a>)
</p>
<pre class="javascript highlighted_source"><span class="kw1">function</span> decode<span class="br0">(</span>encoded<span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw1">var</span> output <span class="sy0">=</span> <span class="st0">""</span><span class="sy0">;</span><br>    encoded.<span class="me1">forEach</span><span class="br0">(</span><span class="kw1">function</span><span class="br0">(</span>pair<span class="br0">)</span><span class="br0">{</span> output <span class="sy0">+=</span> <span class="kw1">new</span> <span class="kw4">Array</span><span class="br0">(</span><span class="nu0">1</span><span class="sy0">+</span>pair<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span>.<span class="me1">join</span><span class="br0">(</span>pair<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span> <span class="br0">}</span><span class="br0">)</span><br>    <span class="kw1">return</span> output<span class="sy0">;</span><br><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=35" title="Edit section: K">edit</a>]</span> <span class="mw-headline" id="K"><a href="http://rosettacode.org/wiki/Category:K" title="Category:K">K</a></span></h2>
<pre class="text highlighted_source">rle: {,/($-':i,#x),'x@i:&amp;1,~=':x}</pre>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/Run-length_encoding#J" title="Run-length encoding">J</a></div>
<pre class="text highlighted_source">rld: {d:"0123456789"; ,/(.(d," ")@d?/:x)#'x _dvl d}</pre>
<p><b>Example:</b>
</p>
<pre class="text highlighted_source">  rle "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"<br>"12W1B12W3B24W1B14W"<br>  rld "12W1B12W3B24W1B14W"<br>"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=36" title="Edit section: Liberty BASIC">edit</a>]</span> <span class="mw-headline" id="Liberty_BASIC"><a href="http://rosettacode.org/wiki/Category:Liberty_BASIC" title="Category:Liberty BASIC">Liberty BASIC</a></span></h2>
<pre class="lb highlighted_source"><span class="kw1">mainwin</span> <span class="nu0">100</span> <span class="nu0">20</span><br>&nbsp;<br>    <span class="co1">'In$ ="aaaaaaaaaaaaaaaaaccbbbbbbbbbbbbbbba" ' testing...</span><br>    In$ <span class="sy0">=</span><span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><br>    <span class="co1">'   Out$= "12W1B12W3B24W1B14W"</span><br>&nbsp;<br>    <span class="kw1">Out</span>$ <span class="sy0">=</span>Encoded$<span class="br0">(</span> In$<span class="br0">)</span><br>    Inv$ <span class="sy0">=</span>Decoded$<span class="br0">(</span> <span class="kw1">Out</span>$<span class="br0">)</span><br>&nbsp;<br>    <span class="kw1">print</span> <span class="st0">" Supplied string ="</span>; In$<br>    <span class="kw1">Print</span> <span class="st0">" RLE version     ="</span>; <span class="kw1">Out</span>$<br>    <span class="kw1">print</span> <span class="st0">" Decoded back to ="</span>; Inv$<br>&nbsp;<br>    <span class="kw1">end</span><br>&nbsp;<br>    <span class="kw1">function</span> Encoded$<span class="br0">(</span> k$<span class="br0">)</span><br>        r$    <span class="sy0">=</span><span class="st0">""</span><br>        r     <span class="sy0">=</span><span class="nu0">1</span><br>        <span class="kw1">for</span> i <span class="sy0">=</span><span class="nu0">2</span> <span class="kw1">to</span> <span class="kw2">len</span><span class="br0">(</span> k$<span class="br0">)</span><br>            prev$   <span class="sy0">=</span><span class="kw2">mid$</span><span class="br0">(</span> k$<span class="sy0">,</span> i <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">1</span><span class="br0">)</span><br>            c$      <span class="sy0">=</span><span class="kw2">mid$</span><span class="br0">(</span> k$<span class="sy0">,</span> i<span class="sy0">,</span>    <span class="nu0">1</span><span class="br0">)</span><br>            <span class="kw1">if</span> c$ <span class="sy0">=</span>prev$ <span class="kw1">then</span>   <span class="co1">'   entering a run of this character</span><br>                r <span class="sy0">=</span>r <span class="sy0">+</span><span class="nu0">1</span><br>            <span class="kw1">else</span>                <span class="co1">'   it occurred only once</span><br>                r$ <span class="sy0">=</span>r$ <span class="sy0">+</span><span class="kw2">str$</span><span class="br0">(</span> r<span class="br0">)</span> <span class="sy0">+</span>prev$<br>                r <span class="sy0">=</span><span class="nu0">1</span><br>            <span class="kw1">end</span> <span class="kw1">if</span><br>        <span class="kw1">next</span> i<br>        r$ <span class="sy0">=</span>r$ <span class="sy0">+</span><span class="kw2">str$</span><span class="br0">(</span> r<span class="br0">)</span> <span class="sy0">+</span>c$<br>        Encoded$ <span class="sy0">=</span>r$<br>    <span class="kw1">end</span> <span class="kw1">function</span><br>&nbsp;<br>    <span class="kw1">function</span> Decoded$<span class="br0">(</span> k$<span class="br0">)</span><br>        r$ <span class="sy0">=</span><span class="st0">""</span><br>        v  <span class="sy0">=</span><span class="nu0">0</span><br>        <span class="kw1">for</span> i <span class="sy0">=</span><span class="nu0">1</span> <span class="kw1">to</span> <span class="kw2">len</span><span class="br0">(</span> k$<span class="br0">)</span><br>            i$ <span class="sy0">=</span><span class="kw2">mid$</span><span class="br0">(</span> k$<span class="sy0">,</span> i<span class="sy0">,</span> <span class="nu0">1</span><span class="br0">)</span><br>            <span class="kw1">if</span> <span class="kw2">instr</span><span class="br0">(</span> <span class="st0">"0123456789"</span><span class="sy0">,</span> i$<span class="br0">)</span> <span class="kw1">then</span><br>                v <span class="sy0">=</span>v <span class="sy0">*</span><span class="nu0">10</span> <span class="sy0">+</span><span class="kw2">val</span><span class="br0">(</span> i$<span class="br0">)</span><br>            <span class="kw1">else</span><br>                <span class="kw1">for</span> m <span class="sy0">=</span><span class="nu0">1</span> <span class="kw1">to</span> v<br>                    r$ <span class="sy0">=</span>r$ <span class="sy0">+</span>i$<br>                <span class="kw1">next</span> m<br>                v <span class="sy0">=</span><span class="nu0">0</span><br>            <span class="kw1">end</span> <span class="kw1">if</span><br>        <span class="kw1">next</span> i<br>        Decoded$ <span class="sy0">=</span>r$<br>    <span class="kw1">end</span> <span class="kw1">function</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=37" title="Edit section: Logo">edit</a>]</span> <span class="mw-headline" id="Logo"><a href="http://rosettacode.org/wiki/Category:Logo" title="Category:Logo">Logo</a></span></h2>
<pre class="text highlighted_source">to encode&nbsp;:str [:out "||] [:count 0] [:last first&nbsp;:str]<br>  if empty?&nbsp;:str [output (word&nbsp;:out&nbsp;:count&nbsp;:last)]<br>  if equal? first&nbsp;:str&nbsp;:last [output (encode bf&nbsp;:str&nbsp;:out&nbsp;:count+1&nbsp;:last)]<br>  output (encode bf&nbsp;:str (word&nbsp;:out&nbsp;:count&nbsp;:last) 1 first&nbsp;:str)<br>end<br>&nbsp;<br>to reps&nbsp;:n&nbsp;:w<br>  output ifelse&nbsp;:n = 0 ["||] [word&nbsp;:w reps&nbsp;:n-1&nbsp;:w]<br>end<br>to decode&nbsp;:str [:out "||] [:count 0]<br>  if empty?&nbsp;:str [output&nbsp;:out]<br>  if number? first&nbsp;:str [output (decode bf&nbsp;:str&nbsp;:out 10*:count + first&nbsp;:str)]<br>  output (decode bf&nbsp;:str word&nbsp;:out reps&nbsp;:count first&nbsp;:str)<br>end<br>&nbsp;<br>make "foo "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW<br>make "rle encode&nbsp;:foo<br>show equal?&nbsp;:foo decode&nbsp;:rle</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=38" title="Edit section: Lua">edit</a>]</span> <span class="mw-headline" id="Lua"><a href="http://rosettacode.org/wiki/Category:Lua" title="Category:Lua">Lua</a></span></h2>
<pre class="lua highlighted_source"><span class="kw1">local</span> C<span class="sy0">,</span> Ct<span class="sy0">,</span> R<span class="sy0">,</span> Cf<span class="sy0">,</span> Cc <span class="sy0">=</span> lpeg<span class="sy0">.</span>C<span class="sy0">,</span> lpeg<span class="sy0">.</span>Ct<span class="sy0">,</span> lpeg<span class="sy0">.</span>R<span class="sy0">,</span> lpeg<span class="sy0">.</span>Cf<span class="sy0">,</span> lpeg<span class="sy0">.</span>Cc<br>astable <span class="sy0">=</span> Ct<span class="br0">(</span>C<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">^</span><span class="nu0">0</span><span class="br0">)</span><br>&nbsp;<br><span class="kw1">function</span> compress<span class="br0">(</span>t<span class="br0">)</span><br>    <span class="kw1">local</span> ret <span class="sy0">=</span> <span class="br0">{</span><span class="br0">}</span><br>    <span class="kw1">for</span> i<span class="sy0">,</span> v <span class="kw2">in</span> <span class="kw3">ipairs</span><span class="br0">(</span>t<span class="br0">)</span> <span class="kw1">do</span><br>      <span class="kw1">if</span> t<span class="br0">[</span>i<span class="sy0">-</span><span class="nu0">1</span><span class="br0">]</span> <span class="kw2">and</span> v <span class="sy0">==</span> t<span class="br0">[</span>i<span class="sy0">-</span><span class="nu0">1</span><span class="br0">]</span> <span class="kw1">then</span><br>        ret<span class="br0">[</span><span class="sy0">#</span>ret <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> ret<span class="br0">[</span><span class="sy0">#</span>ret <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span> <span class="sy0">+</span> <span class="nu0">1</span><br>      <span class="kw1">else</span><br>        ret<span class="br0">[</span><span class="sy0">#</span>ret <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> <span class="nu0">1</span><br>        ret<span class="br0">[</span><span class="sy0">#</span>ret <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> v<br>      <span class="kw1">end</span><br>    <span class="kw1">end</span><br>    t <span class="sy0">=</span> ret<br>    <span class="kw1">return</span> <span class="kw3">table.concat</span><span class="br0">(</span>ret<span class="br0">)</span><br><span class="kw1">end</span><br>q <span class="sy0">=</span> <span class="kw3">io.read</span><span class="br0">(</span><span class="br0">)</span><br><span class="kw3">print</span><span class="br0">(</span>compress<span class="br0">(</span>astable<span class="sy0">:</span>match<span class="br0">(</span>q<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> <br>&nbsp;<br>undo <span class="sy0">=</span> Ct<span class="br0">(</span><span class="br0">(</span>Cf<span class="br0">(</span>Cc<span class="st0">"0"</span> <span class="sy0">*</span> C<span class="br0">(</span>R<span class="st0">"09"</span><span class="br0">)</span><span class="sy0">^</span><span class="nu0">1</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">(</span>a<span class="sy0">,</span> b<span class="br0">)</span> <span class="kw1">return</span> <span class="nu0">10</span> <span class="sy0">*</span> a <span class="sy0">+</span> b <span class="kw1">end</span><span class="br0">)</span> <span class="sy0">*</span> C<span class="br0">(</span>R<span class="st0">"AZ"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">^</span><span class="nu0">0</span><span class="br0">)</span><br>&nbsp;<br><span class="kw1">function</span> decompress<span class="br0">(</span>s<span class="br0">)</span><br>  t <span class="sy0">=</span> undo<span class="sy0">:</span>match<span class="br0">(</span>s<span class="br0">)</span><br>  <span class="kw1">local</span> ret <span class="sy0">=</span> <span class="st0">""</span><br>  <span class="kw1">for</span> i <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="sy0">#</span>t <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span> <span class="kw1">do</span><br>    <span class="kw1">for</span> _ <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span> t<span class="br0">[</span>i<span class="br0">]</span> <span class="kw1">do</span><br>      ret <span class="sy0">=</span> ret <span class="sy0">..</span> t<span class="br0">[</span>i<span class="sy0">+</span><span class="nu0">1</span><span class="br0">]</span><br>    <span class="kw1">end</span><br>  <span class="kw1">end</span><br>  <span class="kw1">return</span> ret<br><span class="kw1">end</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=39" title="Edit section: Mathematica">edit</a>]</span> <span class="mw-headline" id="Mathematica"><a href="http://rosettacode.org/wiki/Category:Mathematica" title="Category:Mathematica">Mathematica</a></span></h2>
<p>Custom functions using Map, Apply, pure functions, replacing using pattern matching, delayed rules and other functions:
</p>
<pre class="text highlighted_source">RunLengthEncode[input_String]:=StringJoin@@Sequence@@@({ToString @Length[#],First[#]}&amp;/@Split[Characters[input]])<br>RunLengthDecode[input_String]:=StringJoin@@ConstantArray@@@Reverse/@Partition[(Characters[input]/.(ToString[#]-&gt;#&amp;/@Range[0,9]))//.{x___,i_Integer,j_Integer,y___}:&gt;{x,10i+j,y},2]</pre>
<p>Example:
</p>
<pre class="text highlighted_source">mystring="WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW";<br>RunLengthEncode[mystring]<br>RunLengthDecode[%]<br>%==mystring</pre>
<p>gives back:
</p>
<pre class="text highlighted_source">12W1B12W3B24W1B14W<br>WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW<br>True</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=40" title="Edit section: Maxima">edit</a>]</span> <span class="mw-headline" id="Maxima"><a href="http://rosettacode.org/wiki/Category:Maxima" title="Category:Maxima">Maxima</a></span></h2>
<pre class="text highlighted_source">rle(a)&nbsp;:= block(<br>   [n: slength(a), b: "", c: charat(a, 1), k: 1],<br>   for i from 2 thru n do<br>      if cequal(c, charat(a, i)) then k: k + 1 else (b: sconcat(b, k, c), c: charat(a, i), k: 1),<br>   sconcat(b, k, c)<br>)$<br>&nbsp;<br>rle("WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW");<br>"12W1B12W3B24W1B14W"</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=41" title="Edit section: MMIX">edit</a>]</span> <span class="mw-headline" id="MMIX"><a href="http://rosettacode.org/wiki/Category:MMIX" title="Category:MMIX">MMIX</a></span></h2>
<pre class="mmix highlighted_source">	<span class="kw2">LOC</span>	Data_Segment<br>	<span class="kw2">GREG</span>	@<br>Buf	<span class="kw2">OCTA</span>	<span class="nu1">0</span><span class="sy0">,</span><span class="nu1">0</span><span class="sy0">,</span><span class="nu1">0</span><span class="sy0">,</span><span class="nu1">0</span>         integer print buffer<br>Char	<span class="kw2">BYTE</span>	<span class="nu1">0</span><span class="sy0">,</span><span class="nu1">0</span>             single char print buffer<br>task	<span class="kw2">BYTE</span>	<span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWW"</span><br>	<span class="kw2">BYTE</span>    <span class="st0">"WWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="sy0">,</span><span class="nu1">0</span><br>len	<span class="kw2">GREG</span>	@<span class="sy0">-</span><span class="nu1">1</span><span class="sy0">-</span>task<br><span class="co3"><br>// task should become this</span><br>tEnc	<span class="kw2">BYTE</span>	<span class="st0">"12W1B12W3B24W1B14W"</span><span class="sy0">,</span><span class="nu1">0</span><br>&nbsp;<br>	<span class="kw2">GREG</span>	@<br><span class="co3">// tuple array for encoding purposes</span><br><span class="co3">// each tuple is a tetra (4 bytes long or 2 wydes long)</span><br><span class="co3">// (c,l) in which c is a char and l = number of chars c</span><br><span class="co3">// high wyde of the tetra contains the char</span><br><span class="co3">// low wyde  .. ..  ..    contains the length</span><br>RLE	<span class="kw2">TETRA</span>	<span class="nu1">0</span> <br>&nbsp;<br>	<span class="kw2">LOC</span>	<span class="nu2">#100</span>            locate program<br>	<span class="kw2">GREG</span>	@<br><span class="co3">// print number to stdout</span><br><span class="co3">// destroys input arg $3&nbsp;!</span><br>Prt64	<span class="kw1">LDA</span>	<span class="nu3">$255</span><span class="sy0">,</span>Buf<span class="sy0">+</span><span class="nu1">23</span>    points to LSD<br><span class="co3">//			       do</span><br>2H	<span class="kw1">DIV</span>	<span class="nu3">$3</span><span class="sy0">,</span><span class="nu3">$3</span><span class="sy0">,</span><span class="nu1">10</span>        <span class="br0">(</span>N<span class="sy0">,</span>R<span class="br0">)</span> = divmod <span class="br0">(</span>N<span class="sy0">,</span><span class="nu1">10</span><span class="br0">)</span><br>	<span class="kw1">GET</span>	<span class="nu3">$13</span><span class="sy0">,</span><span class="kw3">rR</span>          get remainder<br>	<span class="kw1">INCL</span>	<span class="nu3">$13</span><span class="sy0">,</span><span class="st0">'0'</span>         convert to ascii<br>	<span class="kw1">STBU</span>	<span class="nu3">$13</span><span class="sy0">,</span><span class="nu3">$255</span>        store ascii digit<br>	<span class="kw1">BZ</span>	<span class="nu3">$3</span><span class="sy0">,</span><span class="nu1">3F</span><br>	<span class="kw1">SUB</span>	<span class="nu3">$255</span><span class="sy0">,</span><span class="nu3">$255</span><span class="sy0">,</span><span class="nu1">1</span>     move pointer down<br>	<span class="kw1">JMP</span>	<span class="nu1">2B</span>             While N&nbsp;!=<span class="nu1">0</span> <br>3H	<span class="kw1">TRAP</span>	<span class="nu1">0</span><span class="sy0">,</span>Fputs<span class="sy0">,</span>StdOut print number to standard out<br>	<span class="kw1">GO</span>	<span class="nu3">$127</span><span class="sy0">,</span><span class="nu3">$127</span><span class="sy0">,</span><span class="nu1">0</span>    return<br>&nbsp;<br>	<span class="kw2">GREG</span>	@<br><span class="co3">// print char to stdout</span><br>PChar	<span class="kw1">LDA</span>	<span class="nu3">$255</span><span class="sy0">,</span>Char<br>	<span class="kw1">STBU</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$255</span><br>	<span class="kw1">TRAP</span>	<span class="nu1">0</span><span class="sy0">,</span>Fputs<span class="sy0">,</span>StdOut<br>	<span class="kw1">GO</span>	<span class="nu3">$127</span><span class="sy0">,</span><span class="nu3">$127</span><span class="sy0">,</span><span class="nu1">0</span><br>&nbsp;<br>	<span class="kw2">GREG</span>	@<br><span class="co3">// encode routine</span><br><span class="co3">// $0 string pointer</span><br><span class="co3">// $1 index var</span><br><span class="co3">// $2 pointer to tuple array</span><br><span class="co3">// $11 temp var tuple </span><br>Encode	<span class="kw2">SET</span>	<span class="nu3">$1</span><span class="sy0">,</span><span class="nu1">0</span>        initialize index = <span class="nu1">0</span><br>	<span class="kw2">SET</span>	<span class="nu3">$11</span><span class="sy0">,</span><span class="nu1">0</span>       postion in string = <span class="nu1">0</span><br>	<span class="kw1">LDBU</span>	<span class="nu3">$3</span><span class="sy0">,</span><span class="nu3">$0</span><span class="sy0">,</span><span class="nu3">$1</span>    get first char<br>	<span class="kw1">ADDU</span>	<span class="nu3">$6</span><span class="sy0">,</span><span class="nu3">$3</span><span class="sy0">,</span><span class="nu1">0</span>     remember it<br>                            do<br>1H	<span class="kw1">INCL</span>	<span class="nu3">$1</span><span class="sy0">,</span><span class="nu1">1</span>          repeat  incr index<br>	<span class="kw1">LDBU</span>	<span class="nu3">$3</span><span class="sy0">,</span><span class="nu3">$0</span><span class="sy0">,</span><span class="nu3">$1</span>              get <span class="nu1">a</span> char<br>	<span class="kw1">BZ</span>	<span class="nu3">$3</span><span class="sy0">,</span><span class="nu1">2F</span>                 if EOS then finish<br>	<span class="kw1">CMP</span>	<span class="nu3">$7</span><span class="sy0">,</span><span class="nu3">$3</span><span class="sy0">,</span><span class="nu3">$6</span>     <br>	<span class="kw1">PBZ</span>	<span class="nu3">$7</span><span class="sy0">,</span><span class="nu1">1B</span>         while new == old <br>	<span class="kw1">XOR</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$4</span>      new tuple<br>	<span class="kw1">ADDU</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$6</span><span class="sy0">,</span><span class="nu1">0</span>      <br>	<span class="kw1">SLU</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$4</span><span class="sy0">,</span><span class="nu1">16</span>      old char to tuple <span class="sy0">-</span>&gt; <span class="br0">(</span><span class="nu1">c</span><span class="sy0">,</span>_<span class="br0">)</span><br>	<span class="kw1">SUB</span>	<span class="nu3">$7</span><span class="sy0">,</span><span class="nu3">$1</span><span class="sy0">,</span><span class="nu3">$11</span>     length = index <span class="sy0">-</span> previous position<br>	<span class="kw1">ADDU</span>	<span class="nu3">$11</span><span class="sy0">,</span><span class="nu3">$1</span><span class="sy0">,</span><span class="nu1">0</span>      incr position<br>	<span class="kw1">OR</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$7</span>      length l to tuple <span class="sy0">-</span>&gt; <span class="br0">(</span><span class="nu1">c</span><span class="sy0">,</span>l<span class="br0">)</span><br>	<span class="kw1">STT</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$2</span>         put tuple in array <br>	<span class="kw1">ADDU</span>	<span class="nu3">$6</span><span class="sy0">,</span><span class="nu3">$3</span><span class="sy0">,</span><span class="nu1">0</span>       remember new char<br>	<span class="kw1">INCL</span>	<span class="nu3">$2</span><span class="sy0">,</span><span class="nu1">4</span>          incr <span class="st0">'tetra'</span> pointer<br>	<span class="kw1">JMP</span>	<span class="nu1">1B</span>          loop<br>2H	<span class="kw1">XOR</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$4</span>    put last tuple in array<br>	<span class="kw1">ADDU</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$6</span><span class="sy0">,</span><span class="nu1">0</span><br>	<span class="kw1">SLU</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$4</span><span class="sy0">,</span><span class="nu1">16</span><br>	<span class="kw1">SUB</span>	<span class="nu3">$7</span><span class="sy0">,</span><span class="nu3">$1</span><span class="sy0">,</span><span class="nu3">$11</span><br>	<span class="kw1">ADDU</span>	<span class="nu3">$11</span><span class="sy0">,</span><span class="nu3">$1</span><span class="sy0">,</span><span class="nu1">0</span><br>	<span class="kw1">OR</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$7</span><br>	<span class="kw1">STT</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$2</span>		<br>	<span class="kw1">GO</span>	<span class="nu3">$127</span><span class="sy0">,</span><span class="nu3">$127</span><span class="sy0">,</span><span class="nu1">0</span> return<br>&nbsp;<br>	<span class="kw2">GREG</span>	@<br>Main	<span class="kw1">LDA</span>	<span class="nu3">$0</span><span class="sy0">,</span>task      pointer uncompressed string<br>	<span class="kw1">LDA</span>	<span class="nu3">$2</span><span class="sy0">,</span>RLE	     pointer tuple array<br>	<span class="kw1">GO</span>	<span class="nu3">$127</span><span class="sy0">,</span>Encode  encode string<br>	<span class="kw1">LDA</span>	<span class="nu3">$2</span><span class="sy0">,</span>RLE	     points to start tuples<br>	<span class="kw2">SET</span>	<span class="nu3">$5</span><span class="sy0">,</span><span class="nu2">#ffff</span>     mask for extracting length<br>1H	<span class="kw1">LDTU</span>	<span class="nu3">$3</span><span class="sy0">,</span><span class="nu3">$2</span>        while not End of Array<br>	<span class="kw1">BZ</span>	<span class="nu3">$3</span><span class="sy0">,</span><span class="nu1">2F</span>        <br>	<span class="kw1">SRU</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$3</span><span class="sy0">,</span><span class="nu1">16</span>      char   = <span class="br0">(</span><span class="nu1">c</span><span class="sy0">,</span>_<span class="br0">)</span><br>	<span class="kw1">AND</span>	<span class="nu3">$3</span><span class="sy0">,</span><span class="nu3">$3</span><span class="sy0">,</span><span class="nu3">$5</span>      length = <span class="br0">(</span>_<span class="sy0">,</span>l<span class="br0">)</span><br>	<span class="kw1">GO</span>	<span class="nu3">$127</span><span class="sy0">,</span>Prt64    print length<br>	<span class="kw1">GO</span>	<span class="nu3">$127</span><span class="sy0">,</span>PChar    print char<br>	<span class="kw1">INCL</span>	<span class="nu3">$2</span><span class="sy0">,</span><span class="nu1">4</span>          incr tuple pointer<br>	<span class="kw1">JMP</span>	<span class="nu1">1B</span>           wend<br>2H	<span class="kw2">SET</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu2">#a</span>        print NL<br>	<span class="kw1">GO</span>	<span class="nu3">$127</span><span class="sy0">,</span>PChar<br><span class="co3"><br>// decode using the RLE tuples</span><br>	<span class="kw1">LDA</span>	<span class="nu3">$2</span><span class="sy0">,</span>RLE	     pointer tuple array<br>	<span class="kw2">SET</span>	<span class="nu3">$5</span><span class="sy0">,</span><span class="nu2">#ffff</span>     mask<br>1H	<span class="kw1">LDTU</span>	<span class="nu3">$3</span><span class="sy0">,</span><span class="nu3">$2</span>        while not End of Array<br>	<span class="kw1">BZ</span>	<span class="nu3">$3</span><span class="sy0">,</span><span class="nu1">2F</span><br>	<span class="kw1">SRU</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu3">$3</span><span class="sy0">,</span><span class="nu1">16</span>      char   = <span class="br0">(</span><span class="nu1">c</span><span class="sy0">,</span>_<span class="br0">)</span><br>	<span class="kw1">AND</span>	<span class="nu3">$3</span><span class="sy0">,</span><span class="nu3">$3</span><span class="sy0">,</span><span class="nu3">$5</span>      length = <span class="br0">(</span>_<span class="sy0">,</span>l<span class="br0">)</span><br><span class="co3">//                            for (i=0;i&lt;length;i++) {</span><br>3H	<span class="kw1">GO</span>	<span class="nu3">$127</span><span class="sy0">,</span>PChar      print <span class="nu1">a</span> char<br>	<span class="kw1">SUB</span>	<span class="nu3">$3</span><span class="sy0">,</span><span class="nu3">$3</span><span class="sy0">,</span><span class="nu1">1</span><br>	<span class="kw1">PBNZ</span>	<span class="nu3">$3</span><span class="sy0">,</span><span class="nu1">3B</span><br>	<span class="kw1">INCL</span>	<span class="nu3">$2</span><span class="sy0">,</span><span class="nu1">4</span><br>	<span class="kw1">JMP</span>	<span class="nu1">1B</span>            <span class="br0">}</span><br>2H	<span class="kw2">SET</span>	<span class="nu3">$4</span><span class="sy0">,</span><span class="nu2">#a</span>        print NL<br>	<span class="kw1">GO</span>	<span class="nu3">$127</span><span class="sy0">,</span>PChar<br>	<span class="kw1">TRAP</span>	<span class="nu1">0</span><span class="sy0">,</span>Halt<span class="sy0">,</span><span class="nu1">0</span>     EXIT</pre>
<p>Example run encode --&gt; decode:
</p>
<pre>~/MIX/MMIX/Rosetta&gt; mmix rle
12W1B12W3B24W1B14W
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=42" title="Edit section: Objective-C">edit</a>]</span> <span class="mw-headline" id="Objective-C"><a href="http://rosettacode.org/wiki/Category:Objective-C" title="Category:Objective-C">Objective-C</a></span></h2>
<p>See <a href="http://rosettacode.org/wiki/Run-length_encoding/Objective-C" title="Run-length encoding/Objective-C">Run-length encoding/Objective-C</a>
</p>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=43" title="Edit section: OCaml">edit</a>]</span> <span class="mw-headline" id="OCaml"><a href="http://rosettacode.org/wiki/Category:OCaml" title="Category:OCaml">OCaml</a></span></h2>
<pre class="ocaml highlighted_source"><span class="kw1">let</span> encode str <span class="sy0">=</span><br>  <span class="kw1">let</span> len <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html"><span class="kw2">String</span></a><span class="sy0">.</span>length str <span class="kw1">in</span><br>  <span class="kw1">let</span> <span class="kw1">rec</span> aux i acc <span class="sy0">=</span><br>    <span class="kw1">if</span> i <span class="sy0">&gt;=</span> len <span class="kw1">then</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>rev acc<br>    <span class="kw1">else</span><br>      <span class="kw1">let</span> c1 <span class="sy0">=</span> str<span class="sy0">.</span><span class="br0">[</span>i<span class="br0">]</span> <span class="kw1">in</span><br>      <span class="kw1">let</span> <span class="kw1">rec</span> aux2 j <span class="sy0">=</span><br>        <span class="kw1">if</span> j <span class="sy0">&gt;=</span> len <span class="kw1">then</span> <span class="br0">(</span>c1, j<span class="sy0">-</span>i<span class="br0">)</span><br>        <span class="kw1">else</span><br>          <span class="kw1">let</span> c2 <span class="sy0">=</span> str<span class="sy0">.</span><span class="br0">[</span>j<span class="br0">]</span> <span class="kw1">in</span><br>          <span class="kw1">if</span> c1 <span class="sy0">=</span> c2<br>          <span class="kw1">then</span> aux2 <span class="br0">(</span>j<span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span><br>          <span class="kw1">else</span> <span class="br0">(</span>c1, j<span class="sy0">-</span>i<span class="br0">)</span><br>      <span class="kw1">in</span><br>      <span class="kw1">let</span> <span class="br0">(</span>c,n<span class="br0">)</span> <span class="kw1">as</span> t <span class="sy0">=</span> aux2 <span class="br0">(</span>i<span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span> <span class="kw1">in</span><br>      aux <span class="br0">(</span>i<span class="sy0">+</span>n<span class="br0">)</span> <span class="br0">(</span>t<span class="sy0">::</span>acc<span class="br0">)</span><br>  <span class="kw1">in</span><br>  aux <span class="nu0">0</span> <span class="br0">[</span><span class="br0">]</span><br><span class="sy0">;;</span><br>&nbsp;<br><span class="kw1">let</span> decode lst <span class="sy0">=</span><br>  <span class="kw1">let</span> l <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>map <span class="br0">(</span><span class="kw1">fun</span> <span class="br0">(</span>c,n<span class="br0">)</span> <span class="sy0">-&gt;</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html"><span class="kw2">String</span></a><span class="sy0">.</span>make n c<span class="br0">)</span> lst <span class="kw1">in</span><br>  <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html"><span class="kw2">String</span></a><span class="sy0">.</span>concat <span class="st0">""</span> l<span class="br0">)</span></pre>
<pre class="ocaml highlighted_source"><span class="kw1">let</span> <span class="br0">(</span><span class="br0">)</span> <span class="sy0">=</span><br>  <span class="kw1">let</span> e <span class="sy0">=</span> encode <span class="st0">"aaaaahhhhhhmmmmmmmuiiiiiiiaaaaaa"</span> <span class="kw1">in</span><br>  <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>iter <span class="br0">(</span><span class="kw1">fun</span> <span class="br0">(</span>c,n<span class="br0">)</span> <span class="sy0">-&gt;</span><br>    <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html"><span class="kw2">Printf</span></a><span class="sy0">.</span>printf <span class="st0">" (%c,&nbsp;%d);\n"</span> c n<span class="sy0">;</span><br>  <span class="br0">)</span> e<span class="sy0">;</span><br>  <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline"><span class="kw3">print_endline</span></a> <span class="br0">(</span>decode <span class="br0">[</span><span class="br0">(</span><span class="sy0">'</span>a<span class="sy0">'</span>, <span class="nu0">5</span><span class="br0">)</span><span class="sy0">;</span> <span class="br0">(</span><span class="sy0">'</span>h<span class="sy0">'</span>, <span class="nu0">6</span><span class="br0">)</span><span class="sy0">;</span> <span class="br0">(</span><span class="sy0">'</span>m<span class="sy0">'</span>, <span class="nu0">7</span><span class="br0">)</span><span class="sy0">;</span> <span class="br0">(</span><span class="sy0">'</span>u<span class="sy0">'</span>, <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span> <span class="br0">(</span><span class="sy0">'</span>i<span class="sy0">'</span>, <span class="nu0">7</span><span class="br0">)</span><span class="sy0">;</span> <span class="br0">(</span><span class="sy0">'</span>a<span class="sy0">'</span>, <span class="nu0">6</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br><span class="sy0">;;</span></pre>
<dl><dt>Using regular expressions
</dt></dl>
<pre class="ocaml highlighted_source"><span class="sy0">#</span>load <span class="st0">"str.cma"</span><span class="sy0">;;</span><br>&nbsp;<br><span class="kw1">open</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html"><span class="kw2">Str</span></a><br>&nbsp;<br><span class="kw1">let</span> encode <span class="sy0">=</span><br>  global_substitute <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html"><span class="kw2">Str</span></a><span class="sy0">.</span><span class="kw1">regexp</span> <span class="st0">"\\(.\\)\\1*"</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">fun</span> s <span class="sy0">-&gt;</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALstring_of_int"><span class="kw3">string_of_int</span></a> <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html"><span class="kw2">String</span></a><span class="sy0">.</span>length <span class="br0">(</span>matched_string s<span class="br0">)</span><span class="br0">)</span> <span class="sy0">^</span><br>              matched_group <span class="nu0">1</span> s<span class="br0">)</span><br>&nbsp;<br><span class="kw1">let</span> decode <span class="sy0">=</span><br>  global_substitute <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html"><span class="kw2">Str</span></a><span class="sy0">.</span><span class="kw1">regexp</span> <span class="st0">"\\([0-9]+\\)\\([^0-9]\\)"</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">fun</span> s <span class="sy0">-&gt;</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html"><span class="kw2">String</span></a><span class="sy0">.</span>make <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_string"><span class="kw3">int_of_string</span></a> <span class="br0">(</span>matched_group <span class="nu0">1</span> s<span class="br0">)</span><span class="br0">)</span><br>                          <span class="br0">(</span>matched_group <span class="nu0">2</span> s<span class="br0">)</span><span class="sy0">.</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span><br>&nbsp;<br><span class="kw1">let</span> <span class="br0">(</span><span class="br0">)</span> <span class="sy0">=</span><br>  <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline"><span class="kw3">print_endline</span></a> <span class="br0">(</span>encode <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="br0">)</span><span class="sy0">;</span><br>  <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline"><span class="kw3">print_endline</span></a> <span class="br0">(</span>decode <span class="st0">"12W1B12W3B24W1B14W"</span><span class="br0">)</span><span class="sy0">;</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=44" title="Edit section: Oz">edit</a>]</span> <span class="mw-headline" id="Oz"><a href="http://rosettacode.org/wiki/Category:Oz" title="Category:Oz">Oz</a></span></h2>
<pre class="oz highlighted_source"><span class="kw1">declare</span><br>  <span class="kw1">fun</span> <span class="br0">{</span><span class="re1">RLEncode</span> Xs<span class="br0">}</span><br>     <span class="kw1">for</span> G <span class="kw1">in</span> <span class="br0">{</span>Group Xs<span class="br0">}</span> collect:C <span class="kw1">do</span><br>	<span class="br0">{</span>C <span class="br0">{</span>Length G<span class="br0">}</span><span class="sy0">#</span>G<span class="sy0">.</span>1<span class="br0">}</span><br>     <span class="kw1">end</span><br>  <span class="kw1">end</span><br>&nbsp;<br>  <span class="kw1">fun</span> <span class="br0">{</span><span class="re1">RLDecode</span> Xs<span class="br0">}</span><br>     <span class="kw1">for</span> C<span class="sy0">#</span>Y <span class="kw1">in</span> Xs append:Ap <span class="kw1">do</span><br>	<span class="br0">{</span>Ap <span class="br0">{</span>Replicate Y C<span class="br0">}</span><span class="br0">}</span><br>     <span class="kw1">end</span><br>  <span class="kw1">end</span><br>&nbsp;<br>  <span class="co1">%% Helpers</span><br>  <span class="co1">%% e.g. "1122" -&gt; ["11" "22"]</span><br>  <span class="kw1">fun</span> <span class="br0">{</span><span class="re1">Group</span> Xs<span class="br0">}</span><br>     <span class="kw1">case</span> Xs <span class="kw1">of</span> nil <span class="kw1">then</span> nil<br>     <span class="re5"><span class="br0">[</span><span class="br0">]</span></span> X<span class="sy0">|</span>Xr <span class="kw1">then</span><br>	Ys Zs<br>        <span class="br0">{</span>List<span class="sy0">.</span>takeDropWhile Xr <span class="kw1">fun</span> <span class="br0">{</span><span class="re1">$</span> W<span class="br0">}</span> W<span class="sy0">==</span>X <span class="kw1">end</span>&nbsp;?Ys&nbsp;?Zs<span class="br0">}</span><br>     <span class="kw1">in</span><br>        <span class="br0">(</span>X<span class="sy0">|</span>Ys<span class="br0">)</span> <span class="sy0">|</span> <span class="br0">{</span>Group Zs<span class="br0">}</span><br>     <span class="kw1">end</span><br>  <span class="kw1">end</span><br>  <span class="co1">%% e.g. 3,4 -&gt; [3 3 3 3] </span><br>  <span class="kw1">fun</span> <span class="br0">{</span><span class="re1">Replicate</span> X N<span class="br0">}</span><br>     <span class="kw1">case</span> N <span class="kw1">of</span> 0 <span class="kw1">then</span> nil<br>     <span class="kw1">else</span> X<span class="sy0">|</span><span class="br0">{</span>Replicate X N<span class="sy0">-</span>1<span class="br0">}</span><br>     <span class="kw1">end</span><br>  <span class="kw1">end</span><br>&nbsp;<br>  Data = <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><br>  Enc = <span class="br0">{</span>RLEncode Data<span class="br0">}</span><br><span class="kw1">in</span><br>  <span class="br0">{</span>System<span class="sy0">.</span>showInfo Data<span class="br0">}</span><br>  <span class="br0">{</span>Show Enc<span class="br0">}</span><br>  <span class="br0">{</span>System<span class="sy0">.</span>showInfo <span class="br0">{</span>RLDecode Enc<span class="br0">}</span><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=45" title="Edit section: PARI/GP">edit</a>]</span> <span class="mw-headline" id="PARI.2FGP"><a href="http://rosettacode.org/wiki/Category:PARI/GP" title="Category:PARI/GP">PARI/GP</a></span></h2>
<pre class="parigp highlighted_source">rle<span class="br0">(</span>s<span class="br0">)</span><span class="sy0">=</span><span class="br0">{</span><br>  <span class="kw1">if</span><span class="br0">(</span>s<span class="sy0">==</span><span class="st0">""</span><span class="sy0">,</span> <span class="kw1">return</span><span class="br0">(</span>s<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>  my<span class="br0">(</span>v<span class="sy0">=</span><span class="kw1">Vec</span><span class="br0">(</span>s<span class="br0">)</span><span class="sy0">,</span>cur<span class="sy0">=</span>v<span class="br0">[</span><span class="nu1">1</span><span class="br0">]</span><span class="sy0">,</span>ct<span class="sy0">=</span><span class="nu1">1</span><span class="sy0">,</span>out<span class="sy0">=</span><span class="st0">""</span><span class="br0">)</span><span class="sy0">;</span><br>  v<span class="sy0">=</span><span class="kw1">concat</span><span class="br0">(</span>v<span class="sy0">,</span><span class="nu1">99</span><span class="br0">)</span><span class="sy0">;</span> <span class="co1">\\ sentinel</span><br>  <span class="kw1">for</span><span class="br0">(</span>i<span class="sy0">=</span><span class="nu1">2</span><span class="sy0">,</span>#v<span class="sy0">,</span><br>    <span class="kw1">if</span><span class="br0">(</span>v<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">==</span>cur<span class="sy0">,</span><br>      ct<span class="sy0">++</span><br>    <span class="sy0">,</span><br>      out<span class="sy0">=</span><span class="kw1">Str</span><span class="br0">(</span>out<span class="sy0">,</span>ct<span class="sy0">,</span>cur<span class="br0">)</span><span class="sy0">;</span><br>      cur<span class="sy0">=</span>v<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">;</span><br>      ct<span class="sy0">=</span><span class="nu1">1</span><br>    <span class="br0">)</span><br>  <span class="br0">)</span><span class="sy0">;</span><br>  out<br><span class="br0">}</span><span class="sy0">;</span><br>elr<span class="br0">(</span>s<span class="br0">)</span><span class="sy0">=</span><span class="br0">{</span><br>  <span class="kw1">if</span><span class="br0">(</span>s<span class="sy0">==</span><span class="st0">""</span><span class="sy0">,</span> <span class="kw1">return</span><span class="br0">(</span>s<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>  my<span class="br0">(</span>v<span class="sy0">=</span><span class="kw1">Vec</span><span class="br0">(</span>s<span class="br0">)</span><span class="sy0">,</span>ct<span class="sy0">=</span><span class="kw1">eval</span><span class="br0">(</span>v<span class="br0">[</span><span class="nu1">1</span><span class="br0">]</span><span class="br0">)</span><span class="sy0">,</span>out<span class="sy0">=</span><span class="st0">""</span><span class="br0">)</span><span class="sy0">;</span><br>  v<span class="sy0">=</span><span class="kw1">concat</span><span class="br0">(</span>v<span class="sy0">,</span><span class="nu1">99</span><span class="br0">)</span><span class="sy0">;</span> <span class="co1">\\ sentinel</span><br>  <span class="kw1">for</span><span class="br0">(</span>i<span class="sy0">=</span><span class="nu1">2</span><span class="sy0">,</span>#v<span class="sy0">,</span><br>    <span class="kw1">if</span><span class="br0">(</span>v<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">&gt;=</span><span class="st0">"0"</span> <span class="sy0">&amp;&amp;</span> v<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">&lt;=</span><span class="st0">"9"</span><span class="sy0">,</span><br>      ct<span class="sy0">=</span><span class="nu1">10</span><span class="sy0">*</span>ct<span class="sy0">+</span><span class="kw1">eval</span><span class="br0">(</span>v<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span><br>    <span class="sy0">,</span><br>      <span class="kw1">for</span><span class="br0">(</span>j<span class="sy0">=</span><span class="nu1">1</span><span class="sy0">,</span>ct<span class="sy0">,</span>out<span class="sy0">=</span><span class="kw1">Str</span><span class="br0">(</span>out<span class="sy0">,</span>v<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>      ct<span class="sy0">=</span><span class="nu1">0</span><br>    <span class="br0">)</span><br>  <span class="br0">)</span><span class="sy0">;</span><br>  out<br><span class="br0">}</span><span class="sy0">;</span><br>rle<span class="br0">(</span><span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="br0">)</span><br>elr<span class="br0">(</span><span class="sy0">%</span><span class="br0">)</span></pre>
<p>Output:
</p>
<pre>%1 = "12W1B12W3B24W1B14W"

%2 = "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=46" title="Edit section: Pascal">edit</a>]</span> <span class="mw-headline" id="Pascal"><a href="http://rosettacode.org/wiki/Category:Pascal" title="Category:Pascal">Pascal</a></span></h2>
<pre class="pascal highlighted_source"><span class="kw1">Program</span> RunLengthEncoding<span class="br0">(</span>output<span class="br0">)</span><span class="sy1">;</span><br>&nbsp;<br><span class="kw1">procedure</span> encode<span class="br0">(</span>s<span class="sy1">:</span> <span class="kw4">string</span><span class="sy1">;</span> <span class="kw1">var</span> counts<span class="sy1">:</span> <span class="kw4">array</span> <span class="kw1">of</span> <span class="kw4">integer</span><span class="sy1">;</span> <span class="kw1">var</span> letters<span class="sy1">:</span> <span class="kw4">string</span><span class="br0">)</span><span class="sy1">;</span><br>  <span class="kw1">var</span><br>    i<span class="sy1">,</span> j<span class="sy1">:</span> <span class="kw4">integer</span><span class="sy1">;</span><br>  <span class="kw1">begin</span><br>    j <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">0</span><span class="sy1">;</span><br>    letters <span class="sy1">:</span><span class="sy3">=</span> <span class="st0">''</span><span class="sy1">;</span><br>    <span class="kw1">if</span> length<span class="br0">(</span>s<span class="br0">)</span> &gt; <span class="nu0">0</span> <span class="kw1">then</span><br>    <span class="kw1">begin</span><br>      j <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">1</span><span class="sy1">;</span><br>      letters <span class="sy1">:</span><span class="sy3">=</span> letters <span class="sy3">+</span> s<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="sy1">;</span><br>      counts<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">1</span><span class="sy1">;</span><br>      <span class="kw1">for</span> i <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">2</span> <span class="kw1">to</span> length<span class="br0">(</span>s<span class="br0">)</span> <span class="kw1">do</span><br>        <span class="kw1">if</span> s<span class="br0">[</span>i<span class="br0">]</span> <span class="sy3">=</span> letters<span class="br0">[</span>j<span class="br0">]</span> <span class="kw1">then</span><br>          inc<span class="br0">(</span>counts<span class="br0">[</span>j<span class="br0">]</span><span class="br0">)</span><br>        <span class="kw1">else</span><br>        <span class="kw1">begin</span><br>          inc<span class="br0">(</span>j<span class="br0">)</span><span class="sy1">;</span><br>          letters <span class="sy1">:</span><span class="sy3">=</span> letters <span class="sy3">+</span> s<span class="br0">[</span>i<span class="br0">]</span><span class="sy1">;</span><br>          counts<span class="br0">[</span>j<span class="br0">]</span> <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">1</span><span class="sy1">;</span><br>        <span class="kw1">end</span><span class="sy1">;</span><br>    <span class="kw1">end</span><span class="sy1">;</span><br>  <span class="kw1">end</span><span class="sy1">;</span><br>&nbsp;<br><span class="kw1">procedure</span> decode<span class="br0">(</span><span class="kw1">var</span> s<span class="sy1">:</span> <span class="kw4">string</span><span class="sy1">;</span> counts<span class="sy1">:</span> <span class="kw4">array</span> <span class="kw1">of</span> <span class="kw4">integer</span><span class="sy1">;</span> letters<span class="sy1">:</span> <span class="kw4">string</span><span class="br0">)</span><span class="sy1">;</span><br>  <span class="kw1">var</span><br>    i<span class="sy1">,</span> j<span class="sy1">:</span> <span class="kw4">integer</span><span class="sy1">;</span><br>  <span class="kw1">begin</span><br>    s <span class="sy1">:</span><span class="sy3">=</span> <span class="st0">''</span><span class="sy1">;</span><br>    <span class="kw1">for</span> i <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">1</span> <span class="kw1">to</span> length<span class="br0">(</span>letters<span class="br0">)</span> <span class="kw1">do</span><br>      <span class="kw1">for</span> j <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">1</span> <span class="kw1">to</span> counts<span class="br0">[</span>i<span class="br0">]</span> <span class="kw1">do</span><br>        s <span class="sy1">:</span><span class="sy3">=</span> s <span class="sy3">+</span> letters<span class="br0">[</span>i<span class="br0">]</span><span class="sy1">;</span><br>  <span class="kw1">end</span><span class="sy1">;</span><br>&nbsp;<br><span class="kw1">var</span><br>  s<span class="sy1">:</span> <span class="kw4">string</span><span class="sy1">;</span><br>  counts<span class="sy1">:</span> <span class="kw4">array</span> <span class="kw1">of</span> <span class="kw4">integer</span><span class="sy1">;</span><br>  letters<span class="sy1">:</span> <span class="kw4">string</span><span class="sy1">;</span><br>  i<span class="sy1">:</span> <span class="kw4">integer</span><span class="sy1">;</span><br><span class="kw1">begin</span><br>  s <span class="sy1">:</span><span class="sy3">=</span> <span class="st0">'WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWW'</span><span class="sy1">;</span><br>  <span class="kw3">writeln</span><span class="br0">(</span>s<span class="br0">)</span><span class="sy1">;</span><br>  setlength<span class="br0">(</span>counts<span class="sy1">,</span> length<span class="br0">(</span>s<span class="br0">)</span><span class="br0">)</span><span class="sy1">;</span><br>  encode<span class="br0">(</span>s<span class="sy1">,</span> counts<span class="sy1">,</span> letters<span class="br0">)</span><span class="sy1">;</span><br>  <span class="kw1">for</span> i <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">1</span> <span class="kw1">to</span> length<span class="br0">(</span>letters<span class="br0">)</span> <span class="sy3">-</span> <span class="nu0">1</span> <span class="kw1">do</span><br>    <span class="kw3">write</span><span class="br0">(</span>counts<span class="br0">[</span>i<span class="br0">]</span><span class="sy1">,</span> <span class="st0">' * '</span><span class="sy1">,</span> letters<span class="br0">[</span>i<span class="br0">]</span><span class="sy1">,</span> <span class="st0">', '</span><span class="br0">)</span><span class="sy1">;</span><br>  <span class="kw3">writeln</span><span class="br0">(</span>counts<span class="br0">[</span>length<span class="br0">(</span>letters<span class="br0">)</span><span class="br0">]</span><span class="sy1">,</span> <span class="st0">' * '</span><span class="sy1">,</span> letters<span class="br0">[</span>length<span class="br0">(</span>letters<span class="br0">)</span><span class="br0">]</span><span class="br0">)</span><span class="sy1">;</span><br>  decode<span class="br0">(</span>s<span class="sy1">,</span> counts<span class="sy1">,</span> letters<span class="br0">)</span><span class="sy1">;</span><br>  <span class="kw3">writeln</span><span class="br0">(</span>s<span class="br0">)</span><span class="sy1">;</span><br><span class="kw1">end</span><span class="sy1">.</span></pre>
<p>Output:
</p>
<pre>:&gt; ./RunLengthEncoding
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWW
12 * W, 1 * B, 12 * W, 3 * B, 24 * W, 1 * B, 13 * W
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWW
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=47" title="Edit section: Perl">edit</a>]</span> <span class="mw-headline" id="Perl"><a href="http://rosettacode.org/wiki/Category:Perl" title="Category:Perl">Perl</a></span></h2>
<pre class="perl highlighted_source">&nbsp;<br><span class="co1"># functional approach (return the encoded or decoded string)</span><br><span class="kw2">sub</span> encode <span class="br0">{</span><br>  <span class="br0">(</span><span class="kw1">my</span> <span class="re0">$str</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/shift.html"><span class="kw3">shift</span></a><span class="br0">)</span> <span class="sy0">=~</span> <a href="http://perldoc.perl.org/functions/s.html"><span class="kw3">s</span></a> <span class="br0">{</span><span class="br0">(</span><span class="sy0">.</span><span class="br0">)</span><span class="br0">(</span>\<span class="nu0">1</span><span class="sy0">*</span><span class="br0">)</span><span class="br0">}</span> <span class="br0">{</span><a href="http://perldoc.perl.org/functions/length.html"><span class="kw3">length</span></a><span class="br0">(</span><span class="co5">$&amp;</span><span class="br0">)</span><span class="sy0">.</span><span class="co3">$1</span><span class="br0">}</span>gse<span class="sy0">;</span><br>  <a href="http://perldoc.perl.org/functions/return.html"><span class="kw3">return</span></a> <span class="re0">$str</span><span class="sy0">;</span> <span class="br0">}</span><br><span class="kw2">sub</span> decode <span class="br0">{</span><br>  <span class="br0">(</span><span class="kw1">my</span> <span class="re0">$str</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/shift.html"><span class="kw3">shift</span></a><span class="br0">)</span> <span class="sy0">=~</span> <a href="http://perldoc.perl.org/functions/s.html"><span class="kw3">s</span></a> <span class="br0">{</span><span class="br0">(</span><span class="re0">\d</span><span class="sy0">+</span><span class="br0">)</span><span class="br0">(</span><span class="sy0">.</span><span class="br0">)</span><span class="br0">}</span> <span class="br0">{</span><span class="co3">$2</span> x <span class="co3">$1</span><span class="br0">}</span>gse<span class="sy0">;</span><br>  <a href="http://perldoc.perl.org/functions/return.html"><span class="kw3">return</span></a> <span class="re0">$str</span><span class="sy0">;</span><span class="br0">}</span><br>&nbsp;<br><span class="co1"># procedural approach (modify the argument in place)</span><br><span class="kw2">sub</span> encode <span class="br0">{</span><br>  <span class="co5">$_</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=~</span> <a href="http://perldoc.perl.org/functions/s.html"><span class="kw3">s</span></a> <span class="br0">{</span><span class="br0">(</span><span class="sy0">.</span><span class="br0">)</span><span class="br0">(</span>\<span class="nu0">1</span><span class="sy0">*</span><span class="br0">)</span><span class="br0">}</span> <span class="br0">{</span><a href="http://perldoc.perl.org/functions/length.html"><span class="kw3">length</span></a><span class="br0">(</span><span class="co5">$&amp;</span><span class="br0">)</span><span class="sy0">.</span><span class="co3">$1</span><span class="br0">}</span>gse<span class="sy0">;</span> <span class="br0">}</span><br><span class="kw2">sub</span> decode <span class="br0">{</span><br>  <span class="co5">$_</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=~</span> <a href="http://perldoc.perl.org/functions/s.html"><span class="kw3">s</span></a> <span class="br0">{</span><span class="br0">(</span><span class="re0">\d</span><span class="sy0">+</span><span class="br0">)</span><span class="br0">(</span><span class="sy0">.</span><span class="br0">)</span><span class="br0">}</span> <span class="br0">{</span><span class="co3">$2</span> x <span class="co3">$1</span><span class="br0">}</span>gse<span class="sy0">;</span> <span class="br0">}</span><br>&nbsp;</pre>
<p>The following modified versions of the previous one, encode/decode a bytes sequence in a way compatible with the functions of the <a href="http://rosettacode.org/wiki/Run-length_encoding#C" title="Run-length encoding">C version</a>.
</p>
<pre class="perl highlighted_source"><span class="kw2">sub</span> encode<br> <span class="br0">{</span><span class="kw1">my</span> <span class="re0">$str</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/shift.html"><span class="kw3">shift</span></a><span class="sy0">;</span><br>  <span class="re0">$str</span> <span class="sy0">=~</span> <a href="http://perldoc.perl.org/functions/s.html"><span class="kw3">s</span></a> <span class="br0">{</span><span class="br0">(</span><span class="sy0">.</span><span class="br0">)</span><span class="br0">(</span>\<span class="nu0">1</span><span class="br0">{</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">254</span><span class="br0">}</span><span class="br0">)</span><span class="br0">}</span> <span class="br0">{</span><a href="http://perldoc.perl.org/functions/pack.html"><span class="kw3">pack</span></a><span class="br0">(</span><span class="st0">"C"</span><span class="sy0">,</span><span class="br0">(</span><a href="http://perldoc.perl.org/functions/length.html"><span class="kw3">length</span></a><span class="br0">(</span><span class="co3">$2</span><span class="br0">)</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">.</span> <span class="co3">$1</span> <span class="br0">}</span>gse<span class="sy0">;</span><br>  <a href="http://perldoc.perl.org/functions/return.html"><span class="kw3">return</span></a> <span class="re0">$str</span><span class="sy0">;</span><span class="br0">}</span><br>&nbsp;<br><span class="kw2">sub</span> decode<br><span class="br0">{</span><br>     <span class="kw1">my</span> <span class="re0">@str</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/split.html"><span class="kw3">split</span></a> <span class="sy0">//,</span> <a href="http://perldoc.perl.org/functions/shift.html"><span class="kw3">shift</span></a><span class="sy0">;</span><br>     <span class="kw1">my</span> <span class="re0">$r</span> <span class="sy0">=</span> <span class="st0">""</span><span class="sy0">;</span><br>     <span class="kw1">foreach</span> <span class="kw1">my</span> <span class="re0">$i</span> <span class="br0">(</span><span class="nu0">0</span> <span class="sy0">..</span> <a href="http://perldoc.perl.org/functions/scalar.html"><span class="kw3">scalar</span></a><span class="br0">(</span><span class="re0">@str</span><span class="br0">)</span><span class="sy0">/</span><span class="nu0">2</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span> <span class="br0">{</span><br>	 <span class="re0">$r</span> <span class="sy0">.=</span> <span class="re0">$str</span><span class="br0">[</span><span class="nu0">2</span><span class="re0">*$i</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">]</span> x <a href="http://perldoc.perl.org/functions/unpack.html"><span class="kw3">unpack</span></a><span class="br0">(</span><span class="st0">"C"</span><span class="sy0">,</span> <span class="re0">$str</span><span class="br0">[</span><span class="nu0">2</span><span class="re0">*$i</span><span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>     <span class="br0">}</span><br>     <a href="http://perldoc.perl.org/functions/return.html"><span class="kw3">return</span></a> <span class="re0">$r</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=48" title="Edit section: Perl 6">edit</a>]</span> <span class="mw-headline" id="Perl_6"><a href="http://rosettacode.org/wiki/Category:Perl_6" title="Category:Perl 6">Perl 6</a></span></h2>
<p>This currently depend on a workaround to pass the match object into the replacement closure
as an explicit argument.  This is supposed to happen automatically.
</p><p>Note also that Perl 6 regexes don't care about unquoted whitespace, and that backrefs
count from 0, not from 1.
</p>
<pre class="perl6 highlighted_source"><span class="kw2">sub</span> <span class="kw3">encode</span><span class="br0">(</span><span class="re0">$str</span><span class="br0">)</span> <span class="br0">{</span> <span class="re0">$str</span><span class="sy0">.</span><span class="kw3">subst</span><span class="br0">(</span><span class="co2">/(.) $0*/</span><span class="sy0">,</span> <span class="sy0">-&gt;</span> $<span class="sy0">/</span> <span class="br0">{</span> $<span class="sy0">/.</span><span class="kw3">chars</span> <span class="sy0">~</span> <span class="co3">$0</span> <span class="sy0">~</span> <span class="st_h">' '</span> <span class="br0">}</span><span class="sy0">,</span> <span class="sy0">:</span>g<span class="br0">)</span><span class="sy0">;</span> <span class="br0">}</span><br>&nbsp;<br><span class="kw2">sub</span> <span class="kw3">decode</span><span class="br0">(</span><span class="re0">$str</span><span class="br0">)</span> <span class="br0">{</span> <span class="re0">$str</span><span class="sy0">.</span><span class="kw3">subst</span><span class="br0">(</span><span class="co2">/(\d+) (.) ' '/</span><span class="sy0">,</span> <span class="sy0">-&gt;</span> $<span class="sy0">/</span> <span class="br0">{</span><span class="co3">$1</span> <span class="kw1">x</span> <span class="co3">$0</span><span class="br0">}</span><span class="sy0">,</span> <span class="sy0">:</span>g<span class="br0">)</span><span class="sy0">;</span> <span class="br0">}</span><br>&nbsp;<br><span class="kw1">my</span> <span class="re0">$e</span> <span class="sy0">=</span> <span class="kw3">encode</span><span class="br0">(</span><span class="st_h">'WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW'</span><span class="br0">)</span><span class="sy0">;</span><br><span class="kw3">say</span> <span class="re0">$e</span><span class="sy0">;</span><br><span class="kw3">say</span> <span class="kw3">decode</span><span class="br0">(</span><span class="re0">$e</span><span class="br0">)</span><span class="sy0">;</span></pre>
<p>Output:
</p>
<pre>12W 1B 12W 3B 24W 1B 14W 
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=49" title="Edit section: PHP">edit</a>]</span> <span class="mw-headline" id="PHP"><a href="http://rosettacode.org/wiki/Category:PHP" title="Category:PHP">PHP</a></span></h2>
<pre class="php highlighted_source"><span class="kw2">&lt;?php</span><br><span class="kw2">function</span> encode<span class="br0">(</span><span class="re0">$str</span><span class="br0">)</span> <span class="br0">{</span><br>  <span class="kw1">return</span> <a href="http://www.php.net/preg_replace"><span class="kw3">preg_replace</span></a><span class="br0">(</span><span class="st_h">'/(.)\1*/e'</span><span class="sy0">,</span> <span class="st_h">'strlen($0) . $1'</span><span class="sy0">,</span> <span class="re0">$str</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw2">function</span> decode<span class="br0">(</span><span class="re0">$str</span><span class="br0">)</span> <span class="br0">{</span><br>  <span class="kw1">return</span> <a href="http://www.php.net/preg_replace"><span class="kw3">preg_replace</span></a><span class="br0">(</span><span class="st_h">'/(\d+)(\D)/e'</span><span class="sy0">,</span> <span class="st_h">'str_repeat($2, $1)'</span><span class="sy0">,</span> <span class="re0">$str</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw1">echo</span> encode<span class="br0">(</span><span class="st_h">'WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW'</span><span class="br0">)</span><span class="sy0">,</span> <span class="st0">"<span class="es1">\n</span>"</span><span class="sy0">;</span><br><span class="kw1">echo</span> decode<span class="br0">(</span><span class="st_h">'12W1B12W3B24W1B14W'</span><span class="br0">)</span><span class="sy0">,</span> <span class="st0">"<span class="es1">\n</span>"</span><span class="sy0">;</span><br><span class="sy1">?&gt;</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=50" title="Edit section: PicoLisp">edit</a>]</span> <span class="mw-headline" id="PicoLisp"><a href="http://rosettacode.org/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></span></h2>
<pre class="text highlighted_source">(de encode (Str)<br>   (pack<br>      (make<br>         (for (Lst (chop Str) Lst)<br>            (let (N 1  C)<br>               (while (= (setq C (pop 'Lst)) (car Lst))<br>                  (inc 'N) )<br>               (link N C) ) ) ) ) )<br>&nbsp;<br>(de decode (Str)<br>   (pack<br>      (make<br>         (let N 0<br>            (for C (chop Str)<br>               (if (&gt;= "9" C "0")<br>                  (setq N (+ (format C) (* 10 N)))<br>                  (do N (link C))<br>                  (zero N) ) ) ) ) ) )<br>&nbsp;<br>(and<br>   (prinl "Data:    " "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW")<br>   (prinl "Encoded: " (encode @))<br>   (prinl "Decoded: " (decode @)) )</pre>
<p>Output:
</p>
<pre>Data:    WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
Encoded: 12W1B12W3B24W1B14W
Decoded: WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=51" title="Edit section: PL/I">edit</a>]</span> <span class="mw-headline" id="PL.2FI"><a href="http://rosettacode.org/wiki/Category:PL/I" title="Category:PL/I">PL/I</a></span></h2>
<pre class="text highlighted_source">&nbsp;<br>declare (c1, c2) character (1);<br>declare run_length fixed binary;<br>declare input file;<br>&nbsp;<br>open file (input) title ('/RLE.DAT,type(text),recsize(20000)');<br>on endfile (input) go to epilog;<br>&nbsp;<br>get file (input) edit (c1) (a(1));<br>run_length = 1;<br>do forever;<br>   get file (input) edit (c2) (a(1));<br>   if c1 = c2 then<br>      run_length = run_length + 1;<br>   else<br>      do; put edit (trim(run_length), c1) (a); run_length=1; end;<br>   c1 = c2;<br>end;<br>epilog:<br>   put edit (trim(run_length), c1) (a);<br>   put skip;<br>&nbsp;<br>&nbsp;<br>/* The reverse of the above operation: */<br>declare c character (1);<br>declare i fixed binary;<br>declare new file;<br>&nbsp;<br>open file (new) title ('/NEW.DAT,type(text),recsize(20000)');<br>on endfile (new) stop;<br>do forever;<br>   run_length = 0;<br>   do forever;<br>      get file (new) edit (c) (a(1));<br>      if index('0123456789', c) = 0 then leave;<br>      run_length = run_length*10 + c;<br>   end;<br>   put edit ((c do i = 1 to run_length)) (a);<br>end;<br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=52" title="Edit section: PowerBASIC">edit</a>]</span> <span class="mw-headline" id="PowerBASIC"><a href="http://rosettacode.org/wiki/Category:PowerBASIC" title="Category:PowerBASIC">PowerBASIC</a></span></h2>
<p>This version can handle any arbitrary string that doesn't contain numbers (not just letters). (A flag value could be added which would allow the inclusion of <i>any</i> character, but such a flag isn't in this example.)
</p>
<pre class="text highlighted_source">FUNCTION RLDecode (i AS STRING) AS STRING<br>    DIM Loop0 AS LONG, rCount AS STRING, outP AS STRING, m AS STRING<br>&nbsp;<br>    FOR Loop0 = 1 TO LEN(i)<br>        m = MID$(i, Loop0, 1)<br>        SELECT CASE m<br>            CASE "0" TO "9"<br>                rCount = rCount &amp; m<br>            CASE ELSE<br>                IF LEN(rCount) THEN<br>                    outP = outP &amp; STRING$(VAL(rCount), m)<br>                    rCount=""<br>                ELSE<br>                    outP = outP &amp; m<br>                END IF<br>        END SELECT<br>    NEXT<br>    FUNCTION = outP<br>END FUNCTION<br>&nbsp;<br>FUNCTION RLEncode (i AS STRING) AS STRING<br>    DIM tmp1 AS STRING, tmp2 AS STRING, outP AS STRING<br>    DIM Loop0 AS LONG, rCount AS LONG<br>&nbsp;<br>    tmp1 = MID$(i, 1, 1)<br>    tmp2 = tmp1<br>    rCount = 1<br>&nbsp;<br>    FOR Loop0 = 2 TO LEN(i)<br>        tmp1 = MID$(i, Loop0, 1)<br>        IF tmp1 &lt;&gt; tmp2 THEN<br>            outP = outP &amp; TRIM$(STR$(rCount)) &amp; tmp2<br>            tmp2 = tmp1<br>            rCount = 1<br>        ELSE<br>            INCR rCount<br>        END IF<br>    NEXT<br>&nbsp;<br>    outP = outP &amp; TRIM$(STR$(rCount))<br>    outP = outP &amp; tmp2<br>    FUNCTION = outP<br>END FUNCTION<br>&nbsp;<br>FUNCTION PBMAIN () AS LONG<br>    DIM initial AS STRING, encoded AS STRING, decoded AS STRING<br>    initial = INPUTBOX$("Type something.")<br>    encoded = RLEncode(initial)<br>    decoded = RLDecode(encoded)<br>    'in PB/Win, "?" = MSGBOX; in PB/DOS &amp; PB/CC. "?" = PRINT<br>   &nbsp;? initial &amp; $CRLF &amp; encoded &amp; $CRLF &amp; decoded<br>END FUNCTION</pre>
<p>Outputs are similar to those in <a href="http://rosettacode.org/wiki/Run-length_encoding#BASIC">BASIC</a>, above.
</p>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=53" title="Edit section: PowerShell">edit</a>]</span> <span class="mw-headline" id="PowerShell"><a href="http://rosettacode.org/wiki/Category:PowerShell" title="Category:PowerShell">PowerShell</a></span></h2>
<pre class="powershell highlighted_source"><span class="kw3">function</span> Compress<span class="sy0">-</span>RLE <span class="br0">(</span><span class="re0">$s</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="re0">$re</span> <span class="sy0">=</span> <span class="br0">[</span><span class="re3">regex</span><span class="br0">]</span> <span class="st0">'(.)\1*'</span><br>    <span class="re0">$ret</span> <span class="sy0">=</span> <span class="st0">""</span><br>    <span class="kw3">foreach</span> <span class="br0">(</span><span class="re0">$m</span> <span class="kw3">in</span> <span class="re0">$re</span>.Matches<span class="br0">(</span><span class="re0">$s</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="re0">$ret</span> <span class="sy0">+=</span> <span class="re0">$m</span>.Length<br>        <span class="re0">$ret</span> <span class="sy0">+=</span> <span class="re0">$m</span>.Value<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><br>    <span class="br0">}</span><br>    <span class="kw3">return</span> <span class="re0">$ret</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw3">function</span> Expand<span class="sy0">-</span>RLE <span class="br0">(</span><span class="re0">$s</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="re0">$re</span> <span class="sy0">=</span> <span class="br0">[</span><span class="re3">regex</span><span class="br0">]</span> <span class="st0">'(\d+)(.)'</span><br>    <span class="re0">$ret</span> <span class="sy0">=</span> <span class="st0">""</span><br>    <span class="kw3">foreach</span> <span class="br0">(</span><span class="re0">$m</span> <span class="kw3">in</span> <span class="re0">$re</span>.Matches<span class="br0">(</span><span class="re0">$s</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="re0">$ret</span> <span class="sy0">+=</span> <span class="br0">[</span><span class="re3">string</span><span class="br0">]</span> <span class="re0">$m</span>.Groups<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span> <span class="sy0">*</span> <span class="br0">[</span><span class="re3">int</span><span class="br0">]</span> <span class="br0">[</span><span class="re3">string</span><span class="br0">]</span> <span class="re0">$m</span>.Groups<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><br>    <span class="br0">}</span><br>    <span class="kw3">return</span> <span class="re0">$ret</span><br><span class="br0">}</span></pre>
<p>Output:
</p>
<pre>PS&gt; Compress-RLE "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"
12W1B12W3B24W1B14W
PS&gt; Expand-RLE "12W1B12W3B24W1B14W"
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=54" title="Edit section: Prolog">edit</a>]</span> <span class="mw-headline" id="Prolog"><a href="http://rosettacode.org/wiki/Category:Prolog" title="Category:Prolog">Prolog</a></span></h2>
<p>Works with SWI-Prolog.<br>
This code is inspired from a code found here&nbsp;: <a rel="nofollow" class="external free" href="http://groups.google.com/group/comp.lang.prolog/browse_thread/thread/b053ea2512e8b350">http://groups.google.com/group/comp.lang.prolog/browse_thread/thread/b053ea2512e8b350</a> (author&nbsp;: Pascal J. Bourguignon).
</p>
<pre class="prolog highlighted_source"><span class="co1">% the test</span><br>run_length <span class="sy1">:-</span><br>	L <span class="sy6">=</span> "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"<span class="sy4">,</span><br>	writef<span class="br0">(</span><span class="st_h">'encode&nbsp;%s\n'</span><span class="sy4">,</span> <span class="br0">[</span>L<span class="br0">]</span><span class="br0">)</span><span class="sy4">,</span><br>	encode<span class="br0">(</span>L<span class="sy4">,</span> R<span class="br0">)</span><span class="sy4">,</span><br>	writeln<span class="br0">(</span>R<span class="br0">)</span><span class="sy4">,</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">nl</span></a><span class="sy4">,</span><br>	writef<span class="br0">(</span><span class="st_h">'decode&nbsp;%w\n'</span><span class="sy4">,</span> <span class="br0">[</span>R<span class="br0">]</span><span class="br0">)</span><span class="sy4">,</span><br>	decode<span class="br0">(</span>R<span class="sy4">,</span> L1<span class="br0">)</span><span class="sy4">,</span><br>	writeln<span class="br0">(</span>L1<span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br><span class="co1">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="co1">%</span><br><span class="co1">%  encode</span><br><span class="co1">%  </span><br><span class="co1">%  translation</span><br><span class="co1">%  from</span><br><span class="co1">%  "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><br><span class="co1">%  to</span><br><span class="co1">%  "12W1B12W3B24W1B14W"</span><br><span class="co1">%  </span><br><span class="co1">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br>encode<span class="br0">(</span>In<span class="sy4">,</span> Out<span class="br0">)</span> <span class="sy1">:-</span><br>	<span class="co1">% Because of the special management of the "strings" by Prolog</span><br>	<span class="br0">(</span> is_list<span class="br0">(</span>In<span class="br0">)</span> <span class="sy3">-</span><span class="sy6">&gt;</span> I <span class="sy6">=</span> In<span class="sy4">;</span> string_to_list<span class="br0">(</span>In<span class="sy4">,</span> I<span class="br0">)</span><span class="br0">)</span><span class="sy4">,</span><br>	packList<span class="br0">(</span>I<span class="sy4">,</span> R1<span class="br0">)</span><span class="sy4">,</span><br>	dcg_packList2List<span class="br0">(</span>R1<span class="sy4">,</span>R2<span class="sy4">,</span> <span class="br0">[</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">,</span><br>	string_to_list<span class="br0">(</span>Out<span class="sy4">,</span>R2<span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br>&nbsp;<br>&nbsp;<br>dcg_packList2List<span class="br0">(</span><span class="br0">[</span><span class="br0">[</span>N<span class="sy4">,</span> V<span class="br0">]</span><span class="sy5">|</span>T<span class="br0">]</span><span class="br0">)</span> <span class="sy3">--</span><span class="sy6">&gt;</span><br>	<span class="br0">{</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">number_codes</span></a><span class="br0">(</span>N<span class="sy4">,</span> LN<span class="br0">)</span><span class="br0">}</span><span class="sy4">,</span><br>	LN<span class="sy4">,</span><br>	<span class="br0">[</span>V<span class="br0">]</span><span class="sy4">,</span><br>	dcg_packList2List<span class="br0">(</span>T<span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br>dcg_packList2List<span class="br0">(</span><span class="br0">[</span><span class="br0">]</span><span class="br0">)</span> <span class="sy3">--</span><span class="sy6">&gt;</span> <span class="br0">[</span><span class="br0">]</span><span class="sy4">.</span><br>&nbsp;<br>&nbsp;<br><span class="co1">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="co1">%</span><br><span class="co1">%  decode</span><br><span class="co1">%  </span><br><span class="co1">%  translation</span><br><span class="co1">%  from</span><br><span class="co1">%  "12W1B12W3B24W1B14W"</span><br><span class="co1">%  to</span><br><span class="co1">%  "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><br><span class="co1">%  </span><br><span class="co1">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br>decode<span class="br0">(</span>In<span class="sy4">,</span> Out<span class="br0">)</span> <span class="sy1">:-</span><br>	<span class="co1">% Because of the special management of the "strings" by Prolog</span><br>	<span class="br0">(</span> is_list<span class="br0">(</span>In<span class="br0">)</span> <span class="sy3">-</span><span class="sy6">&gt;</span> I <span class="sy6">=</span> In<span class="sy4">;</span> string_to_list<span class="br0">(</span>In<span class="sy4">,</span> I<span class="br0">)</span><span class="br0">)</span><span class="sy4">,</span><br>	dcg_List2packList<span class="br0">(</span>I<span class="sy4">,</span> R1<span class="sy4">,</span> <span class="br0">[</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">,</span><br>	packList<span class="br0">(</span>L1<span class="sy4">,</span> R1<span class="br0">)</span><span class="sy4">,</span><br>	string_to_list<span class="br0">(</span>Out<span class="sy4">,</span> L1<span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br>&nbsp;<br>dcg_List2packList<span class="br0">(</span><span class="br0">[</span>H<span class="sy5">|</span>T<span class="br0">]</span><span class="br0">)</span> <span class="sy3">--</span><span class="sy6">&gt;</span><br>	<span class="br0">{</span>code_type<span class="br0">(</span>H<span class="sy4">,</span> digit<span class="br0">)</span><span class="br0">}</span><span class="sy4">,</span><br>	parse_number<span class="br0">(</span><span class="br0">[</span>H<span class="sy5">|</span>T<span class="br0">]</span><span class="sy4">,</span> <span class="nu0">0</span><span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br>dcg_List2packList<span class="br0">(</span><span class="br0">[</span><span class="br0">]</span><span class="br0">)</span> <span class="sy3">--</span><span class="sy6">&gt;</span> <span class="br0">[</span><span class="br0">]</span><span class="sy4">.</span><br>&nbsp;<br>&nbsp;<br>parse_number<span class="br0">(</span><span class="br0">[</span>H<span class="sy5">|</span>T<span class="br0">]</span><span class="sy4">,</span> N<span class="br0">)</span> <span class="sy3">--</span><span class="sy6">&gt;</span><br>	<span class="br0">{</span>code_type<span class="br0">(</span>H<span class="sy4">,</span> digit<span class="br0">)</span><span class="sy4">,</span> <span class="sy5">!</span><span class="sy4">,</span><br>	N1 <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">is</span></a> N<span class="sy3">*</span><span class="nu0">10</span> <span class="sy3">+</span> H <span class="sy3">-</span> <span class="nu0">48</span> <span class="br0">}</span><span class="sy4">,</span><br>	parse_number<span class="br0">(</span>T<span class="sy4">,</span> N1<span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br>parse_number<span class="br0">(</span><span class="br0">[</span>H<span class="sy5">|</span>T<span class="br0">]</span><span class="sy4">,</span> N<span class="br0">)</span> <span class="sy3">--</span><span class="sy6">&gt;</span><br>	<span class="br0">[</span><span class="br0">[</span>N<span class="sy4">,</span> H<span class="br0">]</span><span class="br0">]</span><span class="sy4">,</span><br>	dcg_List2packList<span class="br0">(</span>T<span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br>&nbsp;<br><span class="co1">% use of library clpfd allows packList(?In,&nbsp;?Out) to works</span><br><span class="co1">% in both ways In --&gt; Out and In &lt;-- Out.</span><br>&nbsp;<br><span class="sy1">:-</span> use_module<span class="br0">(</span>library<span class="br0">(</span>clpfd<span class="br0">)</span><span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br><span class="co1">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="co1">%</span><br><span class="co1">%&nbsp;?- packList([a,a,a,b,c,c,c,d,d,e], L).</span><br><span class="co1">%  L = [[3,a],[1,b],[3,c],[2,d],[1,e]] .</span><br><span class="co1">%&nbsp;?- packList(R,  [[3,a],[1,b],[3,c],[2,d],[1,e]]).</span><br><span class="co1">% R = [a,a,a,b,c,c,c,d,d,e] .</span><br><span class="co1">%  </span><br><span class="co1">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br>packList<span class="br0">(</span><span class="br0">[</span><span class="br0">]</span><span class="sy4">,</span><span class="br0">[</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br>packList<span class="br0">(</span><span class="br0">[</span>X<span class="br0">]</span><span class="sy4">,</span><span class="br0">[</span><span class="br0">[</span><span class="nu0">1</span><span class="sy4">,</span>X<span class="br0">]</span><span class="br0">]</span><span class="br0">)</span> <span class="sy1">:-</span> <span class="sy5">!</span><span class="sy4">.</span><br>&nbsp;<br>&nbsp;<br>packList<span class="br0">(</span><span class="br0">[</span>X<span class="sy5">|</span>Rest<span class="br0">]</span><span class="sy4">,</span><span class="br0">[</span>XRun<span class="sy5">|</span>Packed<span class="br0">]</span><span class="br0">)</span><span class="sy1">:-</span><br>    run<span class="br0">(</span>X<span class="sy4">,</span>Rest<span class="sy4">,</span> XRun<span class="sy4">,</span>RRest<span class="br0">)</span><span class="sy4">,</span><br>    packList<span class="br0">(</span>RRest<span class="sy4">,</span>Packed<span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br>&nbsp;<br>run<span class="br0">(</span><a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">Var</span></a><span class="sy4">,</span><span class="br0">[</span><span class="br0">]</span><span class="sy4">,</span><span class="br0">[</span><span class="nu0">1</span><span class="sy4">,</span><a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">Var</span></a><span class="br0">]</span><span class="sy4">,</span><span class="br0">[</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br>run<span class="br0">(</span><a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">Var</span></a><span class="sy4">,</span><span class="br0">[</span><a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">Var</span></a><span class="sy5">|</span>LRest<span class="br0">]</span><span class="sy4">,</span><span class="br0">[</span>N1<span class="sy4">,</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">Var</span></a><span class="br0">]</span><span class="sy4">,</span>RRest<span class="br0">)</span><span class="sy1">:-</span><br>    N #<span class="sy6">&gt;</span> <span class="nu0">0</span><span class="sy4">,</span><br>    N1 #<span class="sy6">=</span> N <span class="sy3">+</span> <span class="nu0">1</span><span class="sy4">,</span><br>    run<span class="br0">(</span><a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">Var</span></a><span class="sy4">,</span>LRest<span class="sy4">,</span><span class="br0">[</span>N<span class="sy4">,</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">Var</span></a><span class="br0">]</span><span class="sy4">,</span>RRest<span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br>&nbsp;<br>run<span class="br0">(</span><a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">Var</span></a><span class="sy4">,</span><span class="br0">[</span>Other<span class="sy5">|</span>RRest<span class="br0">]</span><span class="sy4">,</span> <span class="br0">[</span><span class="nu0">1</span><span class="sy4">,</span><a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">Var</span></a><span class="br0">]</span><span class="sy4">,</span><span class="br0">[</span>Other<span class="sy5">|</span>RRest<span class="br0">]</span><span class="br0">)</span><span class="sy1">:-</span><br>    dif<span class="br0">(</span><a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">Var</span></a><span class="sy4">,</span>Other<span class="br0">)</span><span class="sy4">.</span></pre>
<p>Output&nbsp;:
</p>
<pre>&nbsp;?- run_length.
encode WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
12W1B12W3B24W1B14W

decode 12W1B12W3B24W1B14W
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
true .
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=55" title="Edit section: Pure">edit</a>]</span> <span class="mw-headline" id="Pure"><a href="http://rosettacode.org/wiki/Category:Pure" title="Category:Pure">Pure</a></span></h2>
<pre class="text highlighted_source">using system;<br>&nbsp;<br>encode s = strcat $ map (sprintf "%d%s") $ encode $ chars s with<br>  encode [] = [];<br>  encode xs@(x:_) = (#takewhile (==x) xs,x)&nbsp;: encode (dropwhile (==x) xs);<br>end;<br>&nbsp;<br>decode s = strcat [c | n,c = parse s; i = 1..n] with<br>  parse s::string = regexg item "([0-9]+)(.)" REG_EXTENDED s 0;<br>  item info = val (reg 1 info!1), reg 2 info!1;<br>end;<br>&nbsp;<br>let s = "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW";<br>let r = encode s; // "12W1B12W3B24W1B14W"<br>decode r;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=56" title="Edit section: PureBasic">edit</a>]</span> <span class="mw-headline" id="PureBasic"><a href="http://rosettacode.org/wiki/Category:PureBasic" title="Category:PureBasic">PureBasic</a></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/Run-length_encoding#PowerBasic" title="Run-length encoding">PowerBasic</a></div> with some optimations to use pointers instead of string functions.  According to the task description it works with uppercase A - Z.  In this implementation it also functions with all characters that are non-digits and whose value is non-zero. 
<pre class="purebasic highlighted_source"><span class="kw1">Procedure</span>.s RLDecode<span class="br0">(</span>toDecode.s<span class="br0">)</span><br>  <span class="kw1">Protected</span>.s repCount, output, currChar, tmp<br>  <span class="kw1">Protected</span> <span class="sy0">*</span>c.Character <span class="sy0">=</span> @toDecode<br>&nbsp;<br>  <span class="kw1">While</span> <span class="sy0">*</span>c<span class="sy0">\</span>c <span class="sy0">&lt;&gt;</span> #Null<br>    currChar <span class="sy0">=</span> <span class="kw2">Chr</span><span class="br0">(</span><span class="sy0">*</span>c<span class="sy0">\</span>c<span class="br0">)</span><br>    <span class="kw1">Select</span> <span class="sy0">*</span>c<span class="sy0">\</span>c<br>      <span class="kw1">Case</span> '<span class="nu0">0</span>' <span class="kw1">To</span> '<span class="nu0">9</span>'<br>        repCount <span class="sy0">+</span> currChar<br>      <span class="kw1">Default</span><br>        <span class="kw1">If</span> repCount<br>          tmp <span class="sy0">=</span> <span class="kw2">Space</span><span class="br0">(</span><span class="kw2">Val</span><span class="br0">(</span>repCount<span class="br0">)</span><span class="br0">)</span><br>          <span class="kw2">ReplaceString</span><span class="br0">(</span>tmp, <span class="st0">" "</span>, currChar, #PB_String_InPlace<span class="br0">)</span><br>          output <span class="sy0">+</span> tmp<br>          repCount <span class="sy0">=</span> <span class="st0">""</span><br>        <span class="kw1">Else</span><br>          output <span class="sy0">+</span> currChar<br>        <span class="kw1">EndIf</span><br>    <span class="kw1">EndSelect</span><br>    <span class="sy0">*</span>c <span class="sy0">+</span> <span class="kw2">SizeOf</span><span class="br0">(</span>Character<span class="br0">)</span><br>  <span class="kw1">Wend</span><br>&nbsp;<br>  <span class="kw1">ProcedureReturn</span> output<br><span class="kw1">EndProcedure</span><br>&nbsp;<br><span class="kw1">Procedure</span>.s RLEncode<span class="br0">(</span>toEncode.s<span class="br0">)</span><br>  <span class="kw1">Protected</span>.s currChar, prevChar, output<br>  <span class="kw1">Protected</span> repCount<br>  <span class="kw1">Protected</span> <span class="sy0">*</span>c.Character <span class="sy0">=</span> @toEncode<br>&nbsp;<br>  prevChar <span class="sy0">=</span> <span class="kw2">Chr</span><span class="br0">(</span><span class="sy0">*</span>c<span class="sy0">\</span>c<span class="br0">)</span><br>  repCount <span class="sy0">=</span> <span class="nu0">1</span><br>&nbsp;<br>  <span class="sy0">*</span>c <span class="sy0">+</span> <span class="kw2">SizeOf</span><span class="br0">(</span>Character<span class="br0">)</span><br>  <span class="kw1">While</span> <span class="sy0">*</span>c<span class="sy0">\</span>c <span class="sy0">&lt;&gt;</span> #Null<br>    currChar <span class="sy0">=</span> <span class="kw2">Chr</span><span class="br0">(</span><span class="sy0">*</span>c<span class="sy0">\</span>c<span class="br0">)</span><br>    <span class="kw1">If</span> currChar <span class="sy0">&lt;&gt;</span> prevChar<br>      output <span class="sy0">+</span> <span class="kw2">Str</span><span class="br0">(</span>repCount<span class="br0">)</span> <span class="sy0">+</span> prevChar<br>      prevChar <span class="sy0">=</span> currChar<br>      repCount <span class="sy0">=</span> <span class="nu0">1</span><br>    <span class="kw1">Else</span><br>      repCount <span class="sy0">+</span> <span class="nu0">1</span><br>    <span class="kw1">EndIf</span><br>    <span class="sy0">*</span>c <span class="sy0">+</span> <span class="kw2">SizeOf</span><span class="br0">(</span>Character<span class="br0">)</span><br>  <span class="kw1">Wend</span><br>&nbsp;<br>  output <span class="sy0">+</span> <span class="kw2">Str</span><span class="br0">(</span>repCount<span class="br0">)</span><br>  output <span class="sy0">+</span> prevChar<br>  <span class="kw1">ProcedureReturn</span> output<br><span class="kw1">EndProcedure</span><br>&nbsp;<br><span class="kw1">If</span> <span class="kw2">OpenConsole</span><span class="br0">(</span><span class="br0">)</span><br>  <span class="kw1">Define</span> initial.s, encoded.s, decoded.s<br>&nbsp;<br>  <span class="kw2">Print</span><span class="br0">(</span><span class="st0">"Type something: "</span><span class="br0">)</span><br>  initial <span class="sy0">=</span> <span class="kw2">Input</span><span class="br0">(</span><span class="br0">)</span><br>  encoded <span class="sy0">=</span> RLEncode<span class="br0">(</span>initial<span class="br0">)</span><br>  decoded <span class="sy0">=</span> RLDecode<span class="br0">(</span>encoded<span class="br0">)</span><br>  <span class="kw2">PrintN</span><span class="br0">(</span>initial<span class="br0">)</span><br>  <span class="kw2">PrintN</span><span class="br0">(</span>RLEncode<span class="br0">(</span>initial<span class="br0">)</span><span class="br0">)</span><br>  <span class="kw2">PrintN</span><span class="br0">(</span>RLDecode<span class="br0">(</span>encoded<span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br>  <span class="kw2">Print</span><span class="br0">(</span>#CRLF$ <span class="sy0">+</span> #CRLF$ <span class="sy0">+</span> <span class="st0">"Press ENTER to exit"</span><span class="br0">)</span><br>  <span class="kw2">Input</span><span class="br0">(</span><span class="br0">)</span><br>  <span class="kw2">CloseConsole</span><span class="br0">(</span><span class="br0">)</span><br><span class="kw1">EndIf</span></pre>
<p>Sample output:
</p>
<pre>Type something: WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWW
WWW
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
12W1B12W3B24W1B14W
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=57" title="Edit section: Python">edit</a>]</span> <span class="mw-headline" id="Python"><a href="http://rosettacode.org/wiki/Category:Python" title="Category:Python">Python</a></span></h2>
<pre class="python highlighted_source"><span class="kw1">def</span> encode<span class="br0">(</span>input_string<span class="br0">)</span>:<br>    count <span class="sy0">=</span> <span class="nu0">1</span><br>    prev <span class="sy0">=</span> <span class="st0">''</span><br>    lst <span class="sy0">=</span> <span class="br0">[</span><span class="br0">]</span><br>    <span class="kw1">for</span> character <span class="kw1">in</span> input_string:<br>        <span class="kw1">if</span> character <span class="sy0">!=</span> prev:<br>            <span class="kw1">if</span> prev:<br>                entry <span class="sy0">=</span> <span class="br0">(</span>prev<span class="sy0">,</span>count<span class="br0">)</span><br>                lst.<span class="me1">append</span><span class="br0">(</span>entry<span class="br0">)</span><br>                <span class="co1">#print lst</span><br>            count <span class="sy0">=</span> <span class="nu0">1</span><br>            prev <span class="sy0">=</span> character<br>        <span class="kw1">else</span>:<br>            count +<span class="sy0">=</span> <span class="nu0">1</span><br>    <span class="kw1">else</span>:<br>        entry <span class="sy0">=</span> <span class="br0">(</span>character<span class="sy0">,</span>count<span class="br0">)</span><br>        lst.<span class="me1">append</span><span class="br0">(</span>entry<span class="br0">)</span><br>    <span class="kw1">return</span> lst<br>&nbsp;<br>&nbsp;<br><span class="kw1">def</span> decode<span class="br0">(</span>lst<span class="br0">)</span>:<br>    q <span class="sy0">=</span> <span class="st0">""</span><br>    <span class="kw1">for</span> character<span class="sy0">,</span> count <span class="kw1">in</span> lst:<br>        q +<span class="sy0">=</span> character * count<br>    <span class="kw1">return</span> q<br>&nbsp;<br><span class="co1">#Method call</span><br>encode<span class="br0">(</span><span class="st0">"aaaaahhhhhhmmmmmmmuiiiiiiiaaaaaa"</span><span class="br0">)</span><br>decode<span class="br0">(</span><span class="br0">[</span><span class="br0">(</span><span class="st0">'a'</span><span class="sy0">,</span> <span class="nu0">5</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="st0">'h'</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="st0">'m'</span><span class="sy0">,</span> <span class="nu0">7</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="st0">'u'</span><span class="sy0">,</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="st0">'i'</span><span class="sy0">,</span> <span class="nu0">7</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="st0">'a'</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span></pre>
<p>Functional
</p>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/Python" title="Python" class="mw-redirect">Python</a> version 2.4</div>
<pre class="python highlighted_source"><span class="kw1">from</span> <span class="kw3">itertools</span> <span class="kw1">import</span> groupby<br><span class="kw1">def</span> encode<span class="br0">(</span>input_string<span class="br0">)</span>:<br>    <span class="kw1">return</span> <span class="br0">[</span><span class="br0">(</span><span class="kw2">len</span><span class="br0">(</span><span class="kw2">list</span><span class="br0">(</span>g<span class="br0">)</span><span class="br0">)</span><span class="sy0">,</span> k<span class="br0">)</span> <span class="kw1">for</span> k<span class="sy0">,</span>g <span class="kw1">in</span> groupby<span class="br0">(</span>input_string<span class="br0">)</span><span class="br0">]</span><br>&nbsp;<br><span class="kw1">def</span> decode<span class="br0">(</span>lst<span class="br0">)</span>:<br>    <span class="kw1">return</span> <span class="st0">''</span>.<span class="me1">join</span><span class="br0">(</span>c * n <span class="kw1">for</span> n<span class="sy0">,</span>c <span class="kw1">in</span> lst<span class="br0">)</span><br>&nbsp;<br>encode<span class="br0">(</span><span class="st0">"aaaaahhhhhhmmmmmmmuiiiiiiiaaaaaa"</span><span class="br0">)</span><br>decode<span class="br0">(</span><span class="br0">[</span><span class="br0">(</span><span class="nu0">5</span><span class="sy0">,</span> <span class="st0">'a'</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">6</span><span class="sy0">,</span> <span class="st0">'h'</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">7</span><span class="sy0">,</span> <span class="st0">'m'</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">1</span><span class="sy0">,</span> <span class="st0">'u'</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">7</span><span class="sy0">,</span> <span class="st0">'i'</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">6</span><span class="sy0">,</span> <span class="st0">'a'</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span></pre>
<p><br><b>By regular expression</b><br>
The simplified input range of only uppercase characters allows a simple regular expression to be applied repeatedly for encoding, and another for decoding:
</p>
<pre class="python highlighted_source"><span class="kw1">from</span> <span class="kw3">re</span> <span class="kw1">import</span> sub<br>&nbsp;<br><span class="kw1">def</span> encode<span class="br0">(</span>text<span class="br0">)</span>:<br>    <span class="st0">'''<br>    Doctest:<br>        &gt;&gt;&gt; encode('WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW')<br>        '12W1B12W3B24W1B14W'    <br>    '''</span><br>    <span class="kw1">return</span> sub<span class="br0">(</span>r<span class="st0">'(.)<span class="es0">\1</span>*'</span><span class="sy0">,</span> <span class="kw1">lambda</span> m: <span class="kw2">str</span><span class="br0">(</span><span class="kw2">len</span><span class="br0">(</span>m.<span class="me1">group</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> + m.<span class="me1">group</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">,</span><br>               text<span class="br0">)</span><br>&nbsp;<br><span class="kw1">def</span> decode<span class="br0">(</span>text<span class="br0">)</span>:<br>    <span class="st0">'''<br>    Doctest:<br>        &gt;&gt;&gt; decode('12W1B12W3B24W1B14W')<br>        'WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW'<br>    '''</span><br>    <span class="kw1">return</span> sub<span class="br0">(</span>r<span class="st0">'(<span class="es0">\d</span>+)(<span class="es0">\D</span>)'</span><span class="sy0">,</span> <span class="kw1">lambda</span> m: m.<span class="me1">group</span><span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span> * <span class="kw2">int</span><span class="br0">(</span>m.<span class="me1">group</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">,</span><br>               text<span class="br0">)</span><br>&nbsp;<br>textin <span class="sy0">=</span> <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><br><span class="kw1">assert</span> decode<span class="br0">(</span>encode<span class="br0">(</span>textin<span class="br0">)</span><span class="br0">)</span> <span class="sy0">==</span> textin</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=58" title="Edit section: R">edit</a>]</span> <span class="mw-headline" id="R"><a href="http://rosettacode.org/wiki/Category:R" title="Category:R">R</a></span></h2>
<p>R has a built-in function, rle, for run length encoding.  This modification allows input and output in the forms specified above.
</p>
<pre class="text highlighted_source">runlengthencoding &lt;- function(x)<br>{<br>   splitx &lt;- unlist(strsplit(input, ""))<br>   rlex &lt;- rle(splitx)<br>   paste(with(rlex, as.vector(rbind(lengths, values))), collapse="")<br>}<br>&nbsp;<br>input &lt;- "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"<br>runlengthencoding(input)</pre>
<p>Similarly, inverse.rle provides decompression after a run length encoding.
</p>
<pre class="text highlighted_source">inverserunlengthencoding &lt;- function(x)<br>{<br>    lengths &lt;- as.numeric(unlist(strsplit(output, "[[:alpha:]]")))<br>    values &lt;- unlist(strsplit(output, "[[:digit:]]"))<br>    values &lt;- values[values&nbsp;!= ""]<br>    uncompressed &lt;- inverse.rle(list(lengths=lengths, values=values))<br>    paste(uncompressed, collapse="")<br>}<br>&nbsp;<br>output &lt;- "12W1B12W3B24W1B14W"<br>inverserunlengthencoding(output)</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=59" title="Edit section: REXX">edit</a>]</span> <span class="mw-headline" id="REXX"><a href="http://rosettacode.org/wiki/Category:REXX" title="Category:REXX">REXX</a></span></h2>
<p>The task (input) rule was relaxed a bit as this program accepts upper- and lowercase input.
</p>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=60" title="Edit section: encoding">edit</a>]</span> <span class="mw-headline" id="encoding">encoding</span></h3>
<pre class="rexx highlighted_source">&nbsp;<br><span class="coMULTI">/*REXX program encodes string by using a run-length scheme  (min len=2).*/</span><br>&nbsp;<br><span class="kw1">parse</span> <span class="kw1">arg</span> x                            <span class="coMULTI">/*normally, input would be a file*/</span><br>def=<span class="st0">'WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW'</span><br><span class="kw1">if</span> x==<span class="st0">''</span> <span class="kw3">then</span> x=def                    <span class="coMULTI">/*No input?  Then use the default*/</span><br>Lx=<span class="kw6">length</span><span class="br0">(</span>x<span class="br0">)</span><br>y=<span class="st0">''</span>                                   <span class="coMULTI">/*Y is the output string (so far)*/</span><br>&nbsp;<br>  <span class="kw1">do</span> j=<span class="nu0">1</span> <span class="kw2">to</span> Lx                         <span class="coMULTI">/*warning!  J  is modified below.*/</span><br>  c=<span class="kw6">substr</span><span class="br0">(</span>x,j,<span class="nu0">1</span><span class="br0">)</span>                      <span class="coMULTI">/*pick a character, check for err*/</span><br>  <span class="kw1">if</span> <span class="sy0">\</span><span class="kw6">datatype</span><span class="br0">(</span>c,<span class="st0">'m'</span><span class="br0">)</span> <span class="kw3">then</span> <span class="kw1">do</span>;<span class="kw1">say</span> <span class="st0">"error!: data isn't alphabetic"</span>;<span class="kw1">exit</span> <span class="nu0">13</span>; <span class="kw3">end</span><br>  r=<span class="nu0">0</span>                                  <span class="coMULTI">/*R  is NOT the number of chars. */</span><br>&nbsp;<br>    <span class="kw1">do</span> k=j+<span class="nu0">1</span> <span class="kw2">to</span> Lx <span class="kw2">while</span> <span class="kw6">substr</span><span class="br0">(</span>x,k,<span class="nu0">1</span><span class="br0">)</span>==c<br>    r=r+<span class="nu0">1</span>                              <span class="coMULTI">/*R  is a replication count.     */</span><br>    <span class="kw3">end</span><br>&nbsp;<br>  <span class="kw1">if</span> r==<span class="nu0">0</span> <span class="kw3">then</span> Y=Y<span class="sy0">||</span>c                  <span class="coMULTI">/*C  wan't repeated, just OUT it.*/</span><br>          <span class="kw3">else</span> Y=Y<span class="sy0">||</span>r<span class="sy0">||</span>c               <span class="coMULTI">/*add it to the encoded string.  */</span><br>  j=j+r                                <span class="coMULTI">/*A bad thing to do, but simple. */</span><br>  <span class="kw3">end</span>   <span class="coMULTI">/*j*/</span><br>&nbsp;<br><span class="kw1">say</span> <span class="st0">'  input='</span> x<br><span class="kw1">say</span> <span class="st0">'encoded='</span> y<br>&nbsp;</pre>
<p>Output  when using default input:'
</p>
<pre style="height:7ex;overflow:scroll"> input= WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
output= 11WB11W2B23WB13W
</pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=61" title="Edit section: decoding">edit</a>]</span> <span class="mw-headline" id="decoding">decoding</span></h3>
<pre class="rexx highlighted_source">&nbsp;<br><span class="coMULTI">/*REXX program decodes string by using a run-length scheme  (min len=2).*/</span><br>&nbsp;<br><span class="kw1">parse</span> <span class="kw1">arg</span> x                            <span class="coMULTI">/*normally, input would be a file*/</span><br>_=<span class="st0">'11WB11W2B23WB13W'</span><br><span class="kw1">if</span> x==<span class="st0">''</span> <span class="kw3">then</span> x=_                      <span class="coMULTI">/*No input?  Then use the default*/</span><br>Lx=<span class="kw6">length</span><span class="br0">(</span>x<span class="br0">)</span><br>y=<span class="st0">''</span>                                   <span class="coMULTI">/*Y is the output string (so far)*/</span><br>&nbsp;<br>  <span class="kw1">do</span> j=<span class="nu0">1</span> <span class="kw2">to</span> Lx                         <span class="coMULTI">/*warning!  J  is modified below.*/</span><br>  c=<span class="kw6">substr</span><span class="br0">(</span>x,j,<span class="nu0">1</span><span class="br0">)</span><br>  <span class="kw1">if</span> <span class="sy0">\</span><span class="kw6">datatype</span><span class="br0">(</span>c,<span class="st0">'w'</span><span class="br0">)</span> <span class="kw3">then</span> <span class="kw1">do</span>          <span class="coMULTI">/*a loner char, simply add to OUT*/</span><br>                           y=y<span class="sy0">||</span>c<br>                           <span class="kw1">iterate</span><br>                           <span class="kw3">end</span><br>  d=<span class="nu0">1</span>                                  <span class="coMULTI">/*D is the number of digs so far.*/</span><br>    <span class="kw1">do</span> k=j+<span class="nu0">1</span> <span class="kw2">to</span> Lx <span class="kw2">while</span> <span class="kw6">datatype</span><span class="br0">(</span><span class="kw6">substr</span><span class="br0">(</span>x,k,<span class="nu0">1</span><span class="br0">)</span>,<span class="st0">'w'</span><span class="br0">)</span>  <span class="coMULTI">/*look for num end*/</span><br>    d=d+<span class="nu0">1</span>                              <span class="coMULTI">/*bump the digit count.          */</span><br>    <span class="kw3">end</span><br>  n=<span class="kw6">substr</span><span class="br0">(</span>x,j,d<span class="br0">)</span>+<span class="nu0">1</span>                    <span class="coMULTI">/*D  is length of encoded number.*/</span><br>  y=y<span class="sy0">||</span><span class="kw6">copies</span><span class="br0">(</span><span class="kw6">substr</span><span class="br0">(</span>x,k,<span class="nu0">1</span><span class="br0">)</span>,n<span class="br0">)</span>         <span class="coMULTI">/*N  is now the number of chars. */</span><br>  j=j+d                                <span class="coMULTI">/*A bad thing to do, but simple. */</span><br>  <span class="kw3">end</span>   <span class="coMULTI">/*j*/</span><br>&nbsp;<br><span class="kw1">say</span> <span class="st0">'  input='</span> x<br><span class="kw1">say</span> <span class="st0">'decoded='</span> y<br>&nbsp;</pre>
<p>Output  when using the default input:
</p>
<pre style="height:7ex;overflow:scroll">  input= 11WB11W2B23WB13W
decoded= WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=62" title="Edit section: Ruby">edit</a>]</span> <span class="mw-headline" id="Ruby"><a href="http://rosettacode.org/wiki/Category:Ruby" title="Category:Ruby">Ruby</a></span></h2>
<pre class="ruby highlighted_source"><span class="kw1">def</span> encode<span class="br0">(</span><span class="kw3">string</span><span class="br0">)</span><br>  <span class="kw3">string</span>.<span class="me1">scan</span><span class="br0">(</span><span class="sy0">/</span><span class="br0">(</span>.<span class="br0">)</span><span class="br0">(</span>\<span class="nu0">1</span><span class="sy0">*</span><span class="br0">)</span><span class="sy0">/</span><span class="br0">)</span>.<span class="me1">collect</span> <span class="kw1">do</span> <span class="sy0">|</span>char, repeat<span class="sy0">|</span><br>    <span class="br0">[</span>char, <span class="nu0">1</span> <span class="sy0">+</span> repeat.<span class="me1">length</span><span class="br0">]</span> <br>  <span class="kw1">end</span><br><span class="kw1">end</span><br>&nbsp;<br><span class="kw1">def</span> decode<span class="br0">(</span>encoding<span class="br0">)</span><br>  encoding.<span class="me1">collect</span> <span class="br0">{</span> <span class="sy0">|</span>char, length<span class="sy0">|</span> char <span class="sy0">*</span> length <span class="br0">}</span>.<span class="me1">join</span><br><span class="kw1">end</span><br>&nbsp;<br>orig = <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><br>enc = encode<span class="br0">(</span>orig<span class="br0">)</span>    <span class="co1"># =&gt; [["W", 12], ["B", 1], ["W", 12], ["B", 3], ["W", 24], ["B", 1], ["W", 14]]</span><br>dec = decode<span class="br0">(</span>enc<span class="br0">)</span><br><span class="kw3">puts</span> <span class="st0">"success!"</span> <span class="kw1">if</span> dec == orig</pre>
<p>This usage also seems to be idiomatic, and perhaps less cryptic:
</p>
<pre class="ruby highlighted_source"><span class="kw1">def</span> encode<span class="br0">(</span><span class="kw3">string</span><span class="br0">)</span><br>  encoding = <span class="br0">[</span><span class="br0">]</span><br>  <span class="kw1">for</span> char, repeat <span class="kw1">in</span> <span class="kw3">string</span>.<span class="me1">scan</span><span class="br0">(</span><span class="sy0">/</span><span class="br0">(</span>.<span class="br0">)</span><span class="br0">(</span>\<span class="nu0">1</span><span class="sy0">*</span><span class="br0">)</span><span class="sy0">/</span><span class="br0">)</span><br>    encoding <span class="sy0">&lt;&lt;</span> <span class="br0">[</span>char, <span class="nu0">1</span> <span class="sy0">+</span> repeat.<span class="me1">length</span><span class="br0">]</span><br>  <span class="kw1">end</span><br>  encoding<br><span class="kw1">end</span><br>&nbsp;<br><span class="kw1">def</span> decode<span class="br0">(</span>encoding<span class="br0">)</span><br>  decoding = <span class="st0">""</span><br>  <span class="kw1">for</span> char, length <span class="kw1">in</span> encoding<br>    decoding <span class="sy0">&lt;&lt;</span> char <span class="sy0">*</span> length<br>  <span class="kw1">end</span><br>  decoding<br><span class="kw1">end</span></pre>
<p><br><b>By regular expression</b><br>
The simplified input range of only uppercase characters allows a simple regular expression to be applied repeatedly for encoding, and another for decoding:
</p>
<pre class="ruby highlighted_source"><span class="kw1">def</span> encode<span class="br0">(</span>str<span class="br0">)</span><br>    str.<span class="kw3">gsub</span><span class="br0">(</span><span class="sy0">/</span><span class="br0">(</span>.<span class="br0">)</span>\<span class="nu0">1</span><span class="sy0">*/</span><span class="br0">)</span> <span class="br0">{</span>$<span class="sy0">&amp;</span>.<span class="me1">length</span>.<span class="me1">to_s</span> <span class="sy0">+</span> $1<span class="br0">}</span><br><span class="kw1">end</span><br>&nbsp;<br><span class="kw1">def</span> decode<span class="br0">(</span>str<span class="br0">)</span><br>    str.<span class="kw3">gsub</span><span class="br0">(</span><span class="sy0">/</span><span class="br0">(</span>\d<span class="sy0">+</span><span class="br0">)</span><span class="br0">(</span>\D<span class="br0">)</span><span class="sy0">/</span><span class="br0">)</span> <span class="br0">{</span>$2 <span class="sy0">*</span> $1.<span class="me1">to_i</span><span class="br0">}</span><br><span class="kw1">end</span><br>&nbsp;<br>encode<span class="br0">(</span><span class="st0">'WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW'</span><span class="br0">)</span> <span class="co1">#=&gt; "12W1B12W3B24W1B14W"</span><br>decode<span class="br0">(</span><span class="st0">'12W1B12W3B24W1B14W'</span><span class="br0">)</span> <span class="co1">#=&gt; "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=63" title="Edit section: Run BASIC">edit</a>]</span> <span class="mw-headline" id="Run_BASIC"><a href="http://rosettacode.org/wiki/Category:Run_BASIC" title="Category:Run BASIC">Run BASIC</a></span></h2>
<pre class="text highlighted_source">string$ = "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"<br>beg = 1<br>i   = 1<br>[loop]<br>s$ = mid$(string$,beg,1)<br>while mid$(string$,i,1) = s$<br>  i = i + 1<br>wend<br>press$ = press$&nbsp;; i-beg;s$<br>beg    = i<br>if i &lt; len(string$) then goto [loop]<br>print "Compressed:";press$<br>&nbsp;<br>beg = 1<br>i   = 1<br>[expand]<br>while mid$(press$,i,1) &lt;= "9"<br>  i = i + 1<br>wend<br>for j = 1 to val(mid$(press$,beg, i - beg))<br>  expand$ = expand$ + mid$(press$,i,1)<br>next j<br>i   = i + 1<br>beg = i<br>if i &lt; len(press$) then goto [expand]<br>print "  Expanded:";expand$</pre>Output:
<pre>Compressed:12W1B12W3B24W1B14W
  Expanded:WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=64" title="Edit section: Scala">edit</a>]</span> <span class="mw-headline" id="Scala"><a href="http://rosettacode.org/wiki/Category:Scala" title="Category:Scala">Scala</a></span></h2>
<p>Care is taken to use StringBuilder for performance reasons.
</p>
<pre class="scala highlighted_source"><a href="http://scala-lang.org/"><span class="kw1">def</span></a> encode<span class="br0">(</span>s<span class="sy0">:</span> String<span class="br0">)</span> <span class="sy0">=</span> <span class="br0">(</span><span class="nu0">1</span> until s.<span class="me1">size</span><span class="br0">)</span>.<span class="me1">foldLeft</span><span class="br0">(</span><span class="br0">(</span><span class="nu0">1</span>, s<span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>, <a href="http://scala-lang.org/"><span class="kw1">new</span></a> StringBuilder<span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span><br>  <a href="http://scala-lang.org/"><span class="kw1">case</span></a> <span class="br0">(</span><span class="br0">(</span>len, c, sb<span class="br0">)</span>, index<span class="br0">)</span> <a href="http://scala-lang.org/"><span class="kw1">if</span></a> c <span class="sy0">!=</span> s<span class="br0">(</span>index<span class="br0">)</span> <span class="sy0">=&gt;</span> sb.<span class="me1">append</span><span class="br0">(</span>len<span class="br0">)</span><span class="sy0">;</span> sb.<span class="me1">append</span><span class="br0">(</span>c<span class="br0">)</span><span class="sy0">;</span> <span class="br0">(</span><span class="nu0">1</span>, s<span class="br0">(</span>index<span class="br0">)</span>, sb<span class="br0">)</span><br>  <a href="http://scala-lang.org/"><span class="kw1">case</span></a> <span class="br0">(</span><span class="br0">(</span>len, c, sb<span class="br0">)</span>, <span class="sy0">_</span><span class="br0">)</span> <span class="sy0">=&gt;</span> <span class="br0">(</span>len + <span class="nu0">1</span>, c, sb<span class="br0">)</span><br><span class="br0">}</span> <a href="http://scala-lang.org/"><span class="kw1">match</span></a> <span class="br0">{</span><br>  <a href="http://scala-lang.org/"><span class="kw1">case</span></a> <span class="br0">(</span>len, c, sb<span class="br0">)</span> <span class="sy0">=&gt;</span> sb.<span class="me1">append</span><span class="br0">(</span>len<span class="br0">)</span><span class="sy0">;</span> sb.<span class="me1">append</span><span class="br0">(</span>c<span class="br0">)</span><span class="sy0">;</span> sb.<span class="me1">toString</span><br><span class="br0">}</span><br>&nbsp;<br><a href="http://scala-lang.org/"><span class="kw1">def</span></a> decode<span class="br0">(</span>s<span class="sy0">:</span> String<span class="br0">)</span> <span class="sy0">=</span> <span class="br0">{</span><br>  <a href="http://scala-lang.org/"><span class="kw1">val</span></a> sb <span class="sy0">=</span> <a href="http://scala-lang.org/"><span class="kw1">new</span></a> StringBuilder<br>  <a href="http://scala-lang.org/"><span class="kw1">val</span></a> Code <span class="sy0">=</span> <span class="st0">""</span><span class="st0">"(<span class="es0">\d</span>+)([A-Z])"</span><span class="st0">""</span>.<span class="me1">r</span><br>  <a href="http://scala-lang.org/"><span class="kw1">for</span></a> <span class="br0">(</span>Code<span class="br0">(</span>len, c<span class="br0">)</span> <span class="sy0">&lt;</span>- Code findAllIn s<span class="br0">)</span> sb.<span class="me1">append</span><span class="br0">(</span>c <span class="sy0">*</span> len.<span class="me1">toInt</span><span class="br0">)</span><br>  sb.<span class="me1">toString</span><br><span class="br0">}</span></pre>
<p>A simpler (?) encoder:
</p>
<pre class="scala highlighted_source"><a href="http://scala-lang.org/"><span class="kw1">def</span></a> encode<span class="br0">(</span>s<span class="sy0">:</span>String<span class="br0">)</span> <span class="sy0">=</span> <span class="br0">{</span><br>  s.<span class="me1">foldLeft</span><span class="br0">(</span><span class="br0">(</span><span class="nu0">0</span>,s<span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>,<span class="st0">""</span><span class="br0">)</span><span class="br0">)</span><span class="br0">(</span> <span class="br0">(</span>t,c<span class="br0">)</span> <span class="sy0">=&gt;</span> t <a href="http://scala-lang.org/"><span class="kw1">match</span></a> <span class="br0">{</span><a href="http://scala-lang.org/"><span class="kw1">case</span></a> <span class="br0">(</span>i,p,s<span class="br0">)</span> <span class="sy0">=&gt;</span> <a href="http://scala-lang.org/"><span class="kw1">if</span></a> <span class="br0">(</span>p<span class="sy0">==</span>c<span class="br0">)</span> <span class="br0">(</span>i+<span class="nu0">1</span>,p,s<span class="br0">)</span> <a href="http://scala-lang.org/"><span class="kw1">else</span></a> <span class="br0">(</span><span class="nu0">1</span>,c,s+i+p<span class="br0">)</span><span class="br0">}</span><span class="br0">)</span><br>    <a href="http://scala-lang.org/"><span class="kw1">match</span></a> <span class="br0">{</span><a href="http://scala-lang.org/"><span class="kw1">case</span></a> <span class="br0">(</span>i,p,s<span class="br0">)</span> <span class="sy0">=&gt;</span> s+i+p<span class="br0">}</span><br><span class="br0">}</span></pre>
<p>To make it faster (it's also faster than the longer implementation above) just replace <b>""</b> with <b>new StringBuilder</b> and <b>s+i+p</b> with <b>{s.append(i);s.append(p)}</b>
</p>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=65" title="Edit section: Scheme">edit</a>]</span> <span class="mw-headline" id="Scheme"><a href="http://rosettacode.org/wiki/Category:Scheme" title="Category:Scheme">Scheme</a></span></h2>
<pre class="scheme highlighted_source"><span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>run<span class="sy0">-</span>length<span class="sy0">-</span>decode v<span class="br0">)</span><br>   <span class="br0">(</span>apply <span class="kw1">string-append</span> <span class="br0">(</span><span class="kw1">map</span> <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>p<span class="br0">)</span> <span class="br0">(</span><span class="kw1">make-string</span> <span class="br0">(</span><span class="kw1">car</span> p<span class="br0">)</span> <span class="br0">(</span><span class="kw1">cdr</span> p<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> v<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>run<span class="sy0">-</span>length<span class="sy0">-</span>encode <span class="kw1">s</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>n <span class="br0">(</span><span class="kw1">string-length</span> <span class="kw1">s</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">let</span> loop <span class="br0">(</span><span class="br0">(</span>i <span class="br0">(</span><span class="sy0">-</span> n <span class="nu0">2</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span>c <span class="br0">(</span><span class="kw1">string-ref</span> <span class="kw1">s</span> <span class="br0">(</span><span class="sy0">-</span> n <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span>k <span class="nu0">1</span><span class="br0">)</span> <span class="br0">(</span>v '<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">negative</span>? i<span class="br0">)</span> <span class="br0">(</span><span class="kw1">cons</span> <span class="br0">(</span><span class="kw1">cons</span> k c<span class="br0">)</span> v<span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>x <span class="br0">(</span><span class="kw1">string-ref</span> <span class="kw1">s</span> i<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">char=?</span> c x<span class="br0">)</span> <span class="br0">(</span>loop <span class="br0">(</span><span class="sy0">-</span> i <span class="nu0">1</span><span class="br0">)</span> c <span class="br0">(</span><span class="sy0">+</span> k <span class="nu0">1</span><span class="br0">)</span> v<span class="br0">)</span><br>                     <span class="br0">(</span>loop <span class="br0">(</span><span class="sy0">-</span> i <span class="nu0">1</span><span class="br0">)</span> x <span class="nu0">1</span> <span class="br0">(</span><span class="kw1">cons</span> <span class="br0">(</span><span class="kw1">cons</span> k c<span class="br0">)</span> v<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>run<span class="sy0">-</span>length<span class="sy0">-</span>encode <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><span class="br0">)</span><br><span class="co1">; ((12 . #\W) (1 . #\B) (12 . #\W) (3 . #\B) (24 . #\W) (1 . #\B) (14 . #\W))</span><br><span class="br0">(</span>run<span class="sy0">-</span>length<span class="sy0">-</span>decode '<span class="br0">(</span><span class="br0">(</span><span class="nu0">12</span> . #\W<span class="br0">)</span> <span class="br0">(</span><span class="nu0">1</span> . #\B<span class="br0">)</span> <span class="br0">(</span><span class="nu0">12</span> . #\W<span class="br0">)</span> <span class="br0">(</span><span class="nu0">3</span> . #\B<span class="br0">)</span> <span class="br0">(</span><span class="nu0">24</span> . #\W<span class="br0">)</span> <span class="br0">(</span><span class="nu0">1</span> . #\B<span class="br0">)</span> <span class="br0">(</span><span class="nu0">14</span> . #\W<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br><span class="co1">; "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=66" title="Edit section: sed">edit</a>]</span> <span class="mw-headline" id="sed"><a href="http://rosettacode.org/wiki/Category:Sed" title="Category:Sed">sed</a></span></h2>
<p>The encode script:
</p>
<pre class="text highlighted_source">&nbsp;<br>	/^$/ b<br>:start <br>	/^[0-9]/ b<br>	s/^/1/<br>:loop<br>	h<br>	/^9+([^0-9])\1+/ {<br>		s/^(9+).*/0\1/<br>		y/09/10/<br>		G<br>		s/^(.+)\n[0-9]+.(.*)/\1\2/<br>		b loop }<br>	/^[0-9]*[0-8]([^0-9])\1+/ {<br>		s/^[0-9]*([0-8]).*/\1/<br>		y/012345678/123456789/<br>		G<br>		s/^(.)\n([0-9]*)[0-8].(.*)/\2\1\3/<br>		b loop }<br>	/^[0-9]+9+([^0-9])\1+/ {<br>		s/^[0-9]*([0-8]9+).*/\1/<br>		y/0123456789/1234567890/<br>		G<br>		s/^(.+)\n([0-9]*)[0-8]9+.(.*)/\2\1\3/<br>		b loop }<br>	s/^([0-9]+.)(.*)/\2\1/<br>	b start<br>&nbsp;</pre>
<p>The decode script:
</p>
<pre class="text highlighted_source">&nbsp;<br>	/^$/ b<br>:start<br>	/^[^0-9]/ b<br>:loop<br>	/^1[^0-9]/ {<br>		s/^1(.)(\1*)(.*)/\3\1\2/<br>		b start }<br>	h<br>	/^[0-9]*[1-9][^0-9]/ {<br>		s/^[0-9]*([1-9]).*/\1/<br>		y/123456789/012345678/<br>		G<br>		s/^([0-8])\n([0-9]*)[1-9]([^0-9])(.*)/\2\1\3\3\4/<br>		b loop }<br>	/^[0-9]+0[^0-9]/ {<br>		s/^[0-9]*([1-9]0+)[^0-9].*/\1/<br>		y/0123456789/9012345678/<br>		G<br>		s/^([0-9]+)\n([0-9]*)[1-9]0+([^0-9])(.*)/\2\1\3\3\4/<br>		s/^0+//<br>		b loop }<br>&nbsp;</pre>
<p>Example (assuming the scripts reside in the files <code>encode.sed</code> and <code>decode.sed</code>):
</p>
<pre class="bash highlighted_source">&nbsp;<br><span class="kw2">sed</span> <span class="re5">-rf</span> encode.sed <span class="sy0">&lt;&lt;&lt;</span> <span class="st0">"foo oops"</span><br><span class="co0"># 1f2o1 2o1p1s</span><br>&nbsp;<br><span class="kw2">sed</span> <span class="re5">-rf</span> decode.sed <span class="sy0">&lt;&lt;&lt;</span> <span class="st0">"1f2o1 2o1p1s"</span><br><span class="co0"># foo oops</span><br>&nbsp;<br><span class="br0">(</span><span class="kw2">sed</span> <span class="re5">-rf</span> decode.sed <span class="sy0">|</span> <span class="kw2">sed</span> <span class="re5">-rf</span> encode.sed<span class="br0">)</span> <span class="sy0">&lt;&lt;&lt;</span> <span class="nu0">1000</span>.<br><span class="co0"># 1000.</span><br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=67" title="Edit section: Seed7">edit</a>]</span> <span class="mw-headline" id="Seed7"><a href="http://rosettacode.org/wiki/Category:Seed7" title="Category:Seed7">Seed7</a></span></h2>
<pre class="text highlighted_source">$ include "seed7_05.s7i";<br>  include "scanstri.s7i";<br>&nbsp;<br>const func string: letterRleEncode (in string: data) is func<br>  result<br>    var string: result is "";<br>  local<br>    var char: code is ' ';<br>    var integer: index is 1;<br>  begin<br>    if length(data) &lt;&gt; 0 then<br>      code&nbsp;:= data[1];<br>      repeat<br>        incr(index);<br>      until index &gt; length(data) or code &lt;&gt; data[index];<br>      result&nbsp;:= str(pred(index)) &amp; str(code) &amp; letterRleEncode(data[index ..]);<br>    end if;<br>  end func;<br>&nbsp;<br>const func string: letterRleDecode (in var string: data) is func<br>  result<br>    var string: result is "";<br>  local<br>    var integer: count is 0;<br>  begin<br>    if length(data) &lt;&gt; 0 then<br>      count&nbsp;:= integer parse getDigits(data);<br>      result&nbsp;:= data[1 len 1] mult count &amp; letterRleDecode(data[2 ..]);<br>    end if;<br>  end func;<br>&nbsp;<br>const proc: main is func<br>  begin<br>    writeln(letterRleEncode("WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"));<br>    writeln(letterRleDecode("12W1B12W3B24W1B14W"));<br>  end func;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=68" title="Edit section: Smalltalk">edit</a>]</span> <span class="mw-headline" id="Smalltalk"><a href="http://rosettacode.org/wiki/Category:Smalltalk" title="Category:Smalltalk">Smalltalk</a></span></h2>
<p>See <a href="http://rosettacode.org/wiki/Run-length_encoding/Smalltalk" title="Run-length encoding/Smalltalk">Run-length encoding/Smalltalk</a>
</p>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=69" title="Edit section: SNOBOL4">edit</a>]</span> <span class="mw-headline" id="SNOBOL4"><a href="http://rosettacode.org/wiki/Category:SNOBOL4" title="Category:SNOBOL4">SNOBOL4</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/mw/index.php?title=Macro_Spitbol&action=edit&redlink=1" class="new" title="Macro Spitbol (page does not exist)">Macro Spitbol</a></div>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/mw/index.php?title=Snobol4%2B&action=edit&redlink=1" class="new" title="Snobol4+ (page does not exist)">Snobol4+</a></div>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/mw/index.php?title=CSnobol&action=edit&redlink=1" class="new" title="CSnobol (page does not exist)">CSnobol</a></div>
<pre class="text highlighted_source">*       # Encode RLE<br>        define('rle(str)c,n')&nbsp;:(rle_end)<br>rle     str len(1) . c&nbsp;:f(return)<br>        str span(c) @n =<br>        rle = rle n c&nbsp;:(rle)<br>rle_end<br>&nbsp;<br>*       # Decode RLE<br>        define('elr(str)c,n')&nbsp;:(elr_end)<br>elr     str span('0123456789') . n len(1) . c =&nbsp;:f(return)<br>        elr = elr dupl(c,n)&nbsp;:(elr)<br>elr_end<br>&nbsp;<br>*       # Test and display<br>        str = 'WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW'<br>        output = str;<br>        str = rle(str); output = str<br>        str = elr(str); output = str<br>end</pre>
<p>Output:
</p>
<pre>WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
12W1B12W3B24W1B14W
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=70" title="Edit section: Standard ML">edit</a>]</span> <span class="mw-headline" id="Standard_ML"><a href="http://rosettacode.org/wiki/Category:Standard_ML" title="Category:Standard ML">Standard ML</a></span></h2>
<pre class="text highlighted_source">fun encode str =<br>  let<br>    fun aux (sub, acc) =<br>      case Substring.getc sub<br>       of NONE           =&gt; rev acc<br>        | SOME (x, sub') =&gt;<br>            let<br>              val (y, z) = Substring.splitl (fn c =&gt; c = x) sub'<br>            in<br>              aux (z, (x, Substring.size y + 1)&nbsp;:: acc)<br>            end<br>  in<br>    aux (Substring.full str, [])<br>  end<br>&nbsp;<br>fun decode lst =<br>  concat (map (fn (c,n) =&gt; implode (List.tabulate (n, fn _ =&gt; c))) lst)</pre>
<p>Example:
</p>
<pre>- encode "aaaaahhhhhhmmmmmmmuiiiiiiiaaaaaa";
val it = [(#"a",5),(#"h",6),(#"m",7),(#"u",1),(#"i",7),(#"a",6)]
 &nbsp;: (char * int) list
- decode [(#"a",5),(#"h",6),(#"m",7),(#"u",1),(#"i",7),(#"a",6)];
val it = "aaaaahhhhhhmmmmmmmuiiiiiiiaaaaaa"&nbsp;: string
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=71" title="Edit section: Tcl">edit</a>]</span> <span class="mw-headline" id="Tcl"><a href="http://rosettacode.org/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></span></h2>
<p>The encoding is an even-length list with elements <tt>{count char ...}</tt>
</p>
<pre class="tcl highlighted_source"><span class="kw1">proc</span> encode <span class="br0">{</span><span class="kw2">string</span><span class="br0">}</span> <span class="br0">{</span><br>    <span class="kw1">set</span> encoding <span class="br0">{</span><span class="br0">}</span><br>    <span class="co1"># use a regular expression to match runs of one character</span><br>    <span class="kw1">foreach</span> <span class="br0">{</span>run -<span class="br0">}</span> <span class="br0">[</span><span class="kw2">regexp</span> -all -inline <span class="br0">{</span><span class="br0">(</span>.<span class="br0">)</span>\<span class="nu0">1</span>+|.<span class="br0">}</span> <span class="re0">$string</span><span class="br0">]</span> <span class="br0">{</span><br>        <span class="kw2">lappend</span> encoding <span class="br0">[</span><span class="kw2">string</span> length <span class="re0">$run</span><span class="br0">]</span> <span class="br0">[</span><span class="kw2">string</span> index <span class="re0">$run</span> <span class="nu0">0</span><span class="br0">]</span><br>    <span class="br0">}</span><br>    <span class="kw1">return</span> <span class="re0">$encoding</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw1">proc</span> decode <span class="br0">{</span>encoding<span class="br0">}</span> <span class="br0">{</span><br>    <span class="kw1">foreach</span> <span class="br0">{</span>count char<span class="br0">}</span> <span class="re0">$encoding</span>  <span class="br0">{</span><br>        <span class="kw2">append</span> decoded <span class="br0">[</span><span class="kw2">string</span> repeat <span class="re0">$char</span> <span class="re0">$count</span><span class="br0">]</span><br>    <span class="br0">}</span><br>    <span class="kw1">return</span> <span class="re0">$decoded</span><br><span class="br0">}</span></pre>
<pre class="tcl highlighted_source"><span class="kw1">set</span> str <span class="st0">"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"</span><br><span class="kw1">set</span> enc <span class="br0">[</span>encode <span class="re0">$str</span><span class="br0">]</span> <span class="sy0">;</span><span class="co1"># ==&gt; {12 W 1 B 12 W 3 B 24 W 1 B 14 W}</span><br><span class="kw1">set</span> dec <span class="br0">[</span>decode <span class="re0">$enc</span><span class="br0">]</span><br><span class="kw1">if</span> <span class="br0">{</span><span class="re0">$str</span> eq <span class="re0">$dec</span><span class="br0">}</span> <span class="br0">{</span><br>    <span class="kw2">puts</span> <span class="st0">"success"</span><br><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=72" title="Edit section: TUSCRIPT">edit</a>]</span> <span class="mw-headline" id="TUSCRIPT"><a href="http://rosettacode.org/wiki/Category:TUSCRIPT" title="Category:TUSCRIPT">TUSCRIPT</a></span></h2>
<pre class="text highlighted_source">&nbsp;<br>$$ MODE TUSCRIPT<br>input="WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW",output=""<br>x=strings(input,":&lt;%:")<br>letter=ACCUMULATE (x,freq)<br>LOOP/CLEAR l=letter,f=freq<br>fl=CONCAT (f,l)<br>output=APPEND(output,"",fl)<br>ENDLOOP<br>PRINT " input: ",input<br>PRINT "output: ",output<br>&nbsp;</pre>
<p>Output:
</p>
<pre> input: WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
output: 12W1B12W3B24W1B14W
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=73" title="Edit section: Ursala">edit</a>]</span> <span class="mw-headline" id="Ursala"><a href="http://rosettacode.org/wiki/Category:Ursala" title="Category:Ursala">Ursala</a></span></h2>
<p>A standard library function, rlc, does most of the work for this task,
which is a second order function taking a binary predicate that decides
when consecutive items of an input list belong to the same run.
</p>
<pre class="text highlighted_source">#import std<br>#import nat<br>&nbsp;<br>encode = (rlc ==); *= ^lhPrNCT\~&amp;h&nbsp;%nP+ length<br>&nbsp;<br>decode = (rlc ~&amp;l-=digits); *=zyNCXS ^|DlS/~&amp; iota+&nbsp;%np<br>&nbsp;<br>test_data = 'WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW'<br>&nbsp;<br>#show+<br>&nbsp;<br>example = <br>&nbsp;<br>&lt;<br>   encode test_data,<br>   decode encode test_data&gt;</pre>
<p>The output shows an encoding of the test data, and a decoding of the encoding, which
matches the original test data.
</p>
<pre>12W1B12W3B24W1B14W
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=74" title="Edit section: Vedit macro language">edit</a>]</span> <span class="mw-headline" id="Vedit_macro_language"><a href="http://rosettacode.org/wiki/Category:Vedit_macro_language" title="Category:Vedit macro language">Vedit macro language</a></span></h2>
<p>The following example encodes/decodes an entire file.
Each run is coded with two bytes. The first byte is the run length with high bit set, the second byte is the character code.
ASCII characters with run length of 1 are left unchanged. Character codes above 127 are always coded with run length.
Newlines are not converted (the regular expression does not count newlines).
This methods supports any type of input.
</p>
<pre class="vedit highlighted_source"><span class="sy0">:</span>RL_ENCODE<span class="sy0">:</span><br>BOF<br><span class="kw1">While</span> <span class="br0">(</span><span class="sy0">!</span>At_EOF<span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw1">if</span> <span class="br0">(</span>At_EOL<span class="br0">)</span> <span class="br0">{</span> Line<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span> <span class="kw1">Continue</span> <span class="br0">}</span>    <span class="co1">// skip newlines</span><br>    #<span class="nu0">1</span> <span class="sy0">=</span> Cur_Char                       <span class="co1">// #1 = character</span><br>    Match<span class="br0">(</span><span class="st0">"(.)\1*"</span><span class="sy0">,</span> REGEXP<span class="br0">)</span>             <span class="co1">// count run length</span><br>    #<span class="nu0">2</span> <span class="sy0">=</span> Chars_Matched                  <span class="co1">// #2 = run length</span><br>    <span class="kw1">if</span> <span class="br0">(</span>#<span class="nu0">2</span> <span class="sy0">&gt;</span> <span class="nu0">127</span><span class="br0">)</span> <span class="br0">{</span> #<span class="nu0">2</span> <span class="sy0">=</span> <span class="nu0">127</span> <span class="br0">}</span>          <span class="co1">// can be max 127</span><br>    <span class="kw1">if</span> <span class="br0">(</span>#<span class="nu0">2</span> <span class="sy0">&gt;</span> <span class="nu0">1</span> <span class="sy0">||</span> #<span class="nu0">1</span> <span class="sy0">&gt;</span> <span class="nu0">127</span><span class="br0">)</span> <span class="br0">{</span><br>        Del_Char<span class="br0">(</span>#<span class="nu0">2</span><span class="br0">)</span><br>        Ins_Char<span class="br0">(</span>#<span class="nu0">2</span> <span class="sy0">|</span> <span class="nu0">128</span><span class="br0">)</span>              <span class="co1">// run length (high bit set)</span><br>        Ins_Char<span class="br0">(</span>#<span class="nu0">1</span><span class="br0">)</span>                    <span class="co1">// character</span><br>    <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span>                            <span class="co1">// single ASCII char</span><br>        Char                            <span class="co1">// skip</span><br>    <span class="br0">}</span><br><span class="br0">}</span><br><span class="kw1">Return</span><br>&nbsp;<br><span class="sy0">:</span>RL_DECODE<span class="sy0">:</span><br>BOF<br><span class="kw1">While</span> <span class="br0">(</span><span class="sy0">!</span>At_EOF<span class="br0">)</span> <span class="br0">{</span><br>    #<span class="nu0">2</span> <span class="sy0">=</span> Cur_Char<br>    <span class="kw1">if</span> <span class="br0">(</span>#<span class="nu0">2</span> <span class="sy0">&gt;</span> <span class="nu0">127</span><span class="br0">)</span> <span class="br0">{</span>                     <span class="co1">// is this run length?</span><br>        #<span class="nu0">1</span> <span class="sy0">=</span> Cur_Char<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span>                <span class="co1">// #1 = character value</span><br>        Del_Char<span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span><br>        Ins_Char<span class="br0">(</span>#<span class="nu0">1</span><span class="sy0">,</span> COUNT<span class="sy0">,</span> #<span class="nu0">2</span> <span class="sy0">&amp;</span> <span class="nu0">127</span><span class="br0">)</span><br>    <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span>                            <span class="co1">// single ASCII char</span><br>        Char<br>    <span class="br0">}</span><br><span class="br0">}</span><br><span class="kw1">Return</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit&section=75" title="Edit section: XPL0">edit</a>]</span> <span class="mw-headline" id="XPL0"><a href="http://rosettacode.org/wiki/Category:XPL0" title="Category:XPL0">XPL0</a></span></h2>
<pre class="text highlighted_source">include c:\cxpl\codes;  \intrinsic 'code' declarations<br>string 0;               \use zero-terminated strings, instead of MSb terminated<br>&nbsp;<br>proc Compress(S);       \Compress string using run-length encoding, &amp; display it<br>char S;<br>int  I, C0, C, N;<br>[I:= 0;<br>C0:= S(I);  I:= I+1;<br>repeat  ChOut(0, C0);<br>        N:= 0;<br>        repeat  C:= S(I);  I:= I+1;<br>                N:= N+1;<br>        until   C#C0;<br>        if N&gt;1 then IntOut(0, N-1);<br>        C0:= C;<br>until   C=0;<br>]; \Compress<br>&nbsp;<br>proc Expand(S);         \Expand compressed string, and display it<br>char S;<br>int  I, C0, C, N;<br>[I:= 0;<br>C0:= S(I);  I:= I+1;<br>repeat  ChOut(0, C0);<br>        C:= S(I);  I:= I+1;<br>        if C&gt;=^1 &amp; C&lt;=^9 then<br>                [N:= 0;<br>                while C&gt;=^0 &amp; C&lt;=^9 do<br>                        [N:= N*10 + C-^0;<br>                        C:= S(I);  I:= I+1;<br>                        ];<br>                while N do [ChOut(0, C0);  N:= N-1];<br>                ];<br>        C0:= C;<br>until   C=0;<br>]; \Expand<br>&nbsp;<br>[Compress("WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW");<br>CrLf(0);<br>Expand("W11BW11B2W23BW13");  CrLf(0);<br>]</pre>
<p>Output (with slightly better compression than the example):
</p>
<pre>W11BW11B2W23BW13
WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
</pre>

<!-- 
NewPP limit report
Preprocessor node count: 2990/1000000
Post-expand include size: 12234/2097152 bytes
Template argument size: 3178/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key rosettacode:pcache:idhash:4080-0!*!0!!en!2!* and timestamp 20121017140257 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&oldid=143104">http://rosettacode.org/mw/index.php?title=Run-length_encoding&amp;oldid=143104</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id="catlinks" class="catlinks"><div id="mw-normal-catlinks"><a href="http://rosettacode.org/wiki/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="http://rosettacode.org/wiki/Category:WikipediaSourced" title="Category:WikipediaSourced">WikipediaSourced</a></li><li><a href="http://rosettacode.org/wiki/Category:Programming_Tasks" title="Category:Programming Tasks">Programming Tasks</a></li><li><a href="http://rosettacode.org/wiki/Category:Compression" title="Category:Compression">Compression</a></li><li><a href="http://rosettacode.org/wiki/Category:Ada" title="Category:Ada">Ada</a></li><li><a href="http://rosettacode.org/wiki/Category:AWK" title="Category:AWK">AWK</a></li><li><a href="http://rosettacode.org/wiki/Category:ALGOL_68" title="Category:ALGOL 68">ALGOL 68</a></li><li><a href="http://rosettacode.org/wiki/Category:APL" title="Category:APL">APL</a></li><li><a href="http://rosettacode.org/wiki/Category:AutoHotkey" title="Category:AutoHotkey">AutoHotkey</a></li><li><a href="http://rosettacode.org/wiki/Category:BASIC" title="Category:BASIC">BASIC</a></li><li><a href="http://rosettacode.org/wiki/Category:BBC_BASIC" title="Category:BBC BASIC">BBC BASIC</a></li><li><a href="http://rosettacode.org/wiki/Category:Bracmat" title="Category:Bracmat">Bracmat</a></li><li><a href="http://rosettacode.org/wiki/Category:C" title="Category:C">C</a></li><li><a href="http://rosettacode.org/wiki/Category:C%2B%2B" title="Category:C++">C++</a></li><li><a href="http://rosettacode.org/wiki/Category:Boost" title="Category:Boost">Boost</a></li><li><a href="http://rosettacode.org/wiki/Category:C_sharp" title="Category:C sharp">C sharp</a></li><li><a href="http://rosettacode.org/wiki/Category:Clojure" title="Category:Clojure">Clojure</a></li><li><a href="http://rosettacode.org/wiki/Category:CoffeeScript" title="Category:CoffeeScript">CoffeeScript</a></li><li><a href="http://rosettacode.org/wiki/Category:Common_Lisp" title="Category:Common Lisp">Common Lisp</a></li><li><a href="http://rosettacode.org/wiki/Category:D" title="Category:D">D</a></li><li><a href="http://rosettacode.org/wiki/Category:E" title="Category:E">E</a></li><li><a href="http://rosettacode.org/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></li><li><a href="http://rosettacode.org/wiki/Category:Euphoria" title="Category:Euphoria">Euphoria</a></li><li><a href="http://rosettacode.org/wiki/Category:F_Sharp" title="Category:F Sharp">F Sharp</a></li><li><a href="http://rosettacode.org/wiki/Category:FALSE" title="Category:FALSE">FALSE</a></li><li><a href="http://rosettacode.org/wiki/Category:Fan" title="Category:Fan">Fan</a></li><li><a href="http://rosettacode.org/wiki/Category:Forth" title="Category:Forth">Forth</a></li><li><a href="http://rosettacode.org/wiki/Category:Fortran" title="Category:Fortran">Fortran</a></li><li><a href="http://rosettacode.org/wiki/Category:Go" title="Category:Go">Go</a></li><li><a href="http://rosettacode.org/wiki/Category:Groovy" title="Category:Groovy">Groovy</a></li><li><a href="http://rosettacode.org/wiki/Category:Haskell" title="Category:Haskell">Haskell</a></li><li><a href="http://rosettacode.org/wiki/Category:Icon" title="Category:Icon">Icon</a></li><li><a href="http://rosettacode.org/wiki/Category:Unicon" title="Category:Unicon">Unicon</a></li><li><a href="http://rosettacode.org/wiki/Category:J" title="Category:J">J</a></li><li><a href="http://rosettacode.org/wiki/Category:Java" title="Category:Java">Java</a></li><li><a href="http://rosettacode.org/wiki/Category:JUnit" title="Category:JUnit">JUnit</a></li><li><a href="http://rosettacode.org/wiki/Category:JavaScript" title="Category:JavaScript">JavaScript</a></li><li><a href="http://rosettacode.org/wiki/Category:K" title="Category:K">K</a></li><li><a href="http://rosettacode.org/wiki/Category:Liberty_BASIC" title="Category:Liberty BASIC">Liberty BASIC</a></li><li><a href="http://rosettacode.org/wiki/Category:Logo" title="Category:Logo">Logo</a></li><li><a href="http://rosettacode.org/wiki/Category:Lua" title="Category:Lua">Lua</a></li><li><a href="http://rosettacode.org/wiki/Category:Mathematica" title="Category:Mathematica">Mathematica</a></li><li><a href="http://rosettacode.org/wiki/Category:Maxima" title="Category:Maxima">Maxima</a></li><li><a href="http://rosettacode.org/wiki/Category:MMIX" title="Category:MMIX">MMIX</a></li><li><a href="http://rosettacode.org/wiki/Category:Objective-C" title="Category:Objective-C">Objective-C</a></li><li><a href="http://rosettacode.org/wiki/Category:OCaml" title="Category:OCaml">OCaml</a></li><li><a href="http://rosettacode.org/wiki/Category:Oz" title="Category:Oz">Oz</a></li><li><a href="http://rosettacode.org/wiki/Category:PARI/GP" title="Category:PARI/GP">PARI/GP</a></li><li><a href="http://rosettacode.org/wiki/Category:Pascal" title="Category:Pascal">Pascal</a></li><li><a href="http://rosettacode.org/wiki/Category:Perl" title="Category:Perl">Perl</a></li><li><a href="http://rosettacode.org/wiki/Category:Perl_6" title="Category:Perl 6">Perl 6</a></li><li><a href="http://rosettacode.org/wiki/Category:PHP" title="Category:PHP">PHP</a></li><li><a href="http://rosettacode.org/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></li><li><a href="http://rosettacode.org/wiki/Category:PL/I" title="Category:PL/I">PL/I</a></li><li><a href="http://rosettacode.org/wiki/Category:PowerBASIC" title="Category:PowerBASIC">PowerBASIC</a></li><li><a href="http://rosettacode.org/wiki/Category:PowerShell" title="Category:PowerShell">PowerShell</a></li><li><a href="http://rosettacode.org/wiki/Category:Prolog" title="Category:Prolog">Prolog</a></li><li><a href="http://rosettacode.org/wiki/Category:Pure" title="Category:Pure">Pure</a></li><li><a href="http://rosettacode.org/wiki/Category:PureBasic" title="Category:PureBasic">PureBasic</a></li><li><a href="http://rosettacode.org/wiki/Category:Python" title="Category:Python">Python</a></li><li><a href="http://rosettacode.org/wiki/Category:R" title="Category:R">R</a></li><li><a href="http://rosettacode.org/wiki/Category:REXX" title="Category:REXX">REXX</a></li><li><a href="http://rosettacode.org/wiki/Category:Ruby" title="Category:Ruby">Ruby</a></li><li><a href="http://rosettacode.org/wiki/Category:Run_BASIC" title="Category:Run BASIC">Run BASIC</a></li><li><a href="http://rosettacode.org/wiki/Category:Scala" title="Category:Scala">Scala</a></li><li><a href="http://rosettacode.org/wiki/Category:Scheme" title="Category:Scheme">Scheme</a></li><li><a href="http://rosettacode.org/wiki/Category:Sed" title="Category:Sed">Sed</a></li><li><a href="http://rosettacode.org/wiki/Category:Seed7" title="Category:Seed7">Seed7</a></li><li><a href="http://rosettacode.org/wiki/Category:Smalltalk" title="Category:Smalltalk">Smalltalk</a></li><li><a href="http://rosettacode.org/wiki/Category:SNOBOL4" title="Category:SNOBOL4">SNOBOL4</a></li><li><a href="http://rosettacode.org/wiki/Category:Standard_ML" title="Category:Standard ML">Standard ML</a></li><li><a href="http://rosettacode.org/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></li><li><a href="http://rosettacode.org/wiki/Category:TUSCRIPT" title="Category:TUSCRIPT">TUSCRIPT</a></li><li><a href="http://rosettacode.org/wiki/Category:Ursala" title="Category:Ursala">Ursala</a></li><li><a href="http://rosettacode.org/wiki/Category:Vedit_macro_language" title="Category:Vedit macro language">Vedit macro language</a></li><li><a href="http://rosettacode.org/wiki/Category:XPL0" title="Category:XPL0">XPL0</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://rosettacode.org/mw/index.php?title=Special:UserLogin&returnto=Run-length_encoding" title="You are encouraged to log in; however, it is not mandatory [alt-o]" accesskey="o">Log in / create account</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li id="ca-nstab-main" class="selected"><span><a href="./Run-length encoding - Rosetta Code_files/Run-length encoding - Rosetta Code.htm" title="View the content page [alt-c]" accesskey="c">Page</a></span></li>
					<li id="ca-talk"><span><a href="http://rosettacode.org/wiki/Talk:Run-length_encoding" title="Discussion about the content page [alt-t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="http://rosettacode.org/wiki/Run-length_encoding#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="./Run-length encoding - Rosetta Code_files/Run-length encoding - Rosetta Code.htm">Read</a></span></li>
					<li id="ca-edit"><span><a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=edit" title="You can edit this page. Please use the preview button before saving [alt-e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&action=history" title="Past revisions of this page [alt-h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="http://rosettacode.org/wiki/Run-length_encoding#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://rosettacode.org/mw/index.php" id="searchform">
		<input type="hidden" name="title" value="Special:Search">
				<input type="search" name="search" title="Search Rosetta Code [alt-f]" accesskey="f" id="searchInput">		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton">		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton">			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/mw/title.png);" href="http://rosettacode.org/wiki/Rosetta_Code" title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- Community -->
<div class="portal" id="p-Community">
	<h5>Community</h5>
	<div class="body">
		<ul>
			<li id="n-Twitter"><a href="http://twitter.com/rosettacode" rel="nofollow">Twitter</a></li>
			<li id="n-Chat.2FIRC"><a href="http://rosettacode.org/wiki/Special:WebChat">Chat/IRC</a></li>
			<li id="n-Planet"><a href="http://rosettacode.org/planet" rel="nofollow">Planet</a></li>
			<li id="n-The-Village-Pump"><a href="http://rosettacode.org/wiki/Rosetta_Code:Village_Pump">The Village Pump</a></li>
			<li id="n-Finances"><a href="http://rosettacode.org/wiki/Rosetta_Code:Finances">Finances</a></li>
		</ul>
	</div>
</div>

<!-- /Community -->

<!-- Explore -->
<div class="portal" id="p-Explore">
	<h5>Explore</h5>
	<div class="body">
		<ul>
			<li id="n-Languages"><a href="http://rosettacode.org/wiki/Category:Programming_Languages">Languages</a></li>
			<li id="n-Tasks"><a href="http://rosettacode.org/wiki/Category:Programming_Tasks">Tasks</a></li>
			<li id="n-recentchanges"><a href="http://rosettacode.org/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [alt-r]" accesskey="r">Recent changes</a></li>
			<li id="n-Similar-sites"><a href="http://rosettacode.org/wiki/Help:Similar_Sites">Similar sites</a></li>
			<li id="n-randompage"><a href="http://rosettacode.org/wiki/Special:Random" title="Load a random page [alt-x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /Explore -->

<!-- Misc -->
<div class="portal" id="p-Misc">
	<h5>Misc</h5>
	<div class="body">
		<!-- Place this tag where you want the +1 button to render -->
<div style="height: 24px; width: 106px; display: inline-block; text-indent: 0px; margin: 0px; padding: 0px; background-color: transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; background-position: initial initial; background-repeat: initial initial;" id="___plusone_0"><iframe allowtransparency="true" frameborder="0" hspace="0" marginheight="0" marginwidth="0" scrolling="no" style="position: static; top: 0px; width: 106px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 24px;" tabindex="0" vspace="0" width="100%" id="I0_1352721055391" name="I0_1352721055391" src="./Run-length encoding - Rosetta Code_files/fastbutton.htm" title="+1"></iframe></div>

<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
<iframe allowtransparency="true" frameborder="0" scrolling="no" src="./Run-length encoding - Rosetta Code_files/tweet_button.1352365724.htm" class="twitter-share-button twitter-count-horizontal" style="width: 139px; height: 28px;" title="Twitter Tweet Button" data-twttr-rendered="true"></iframe>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
<script src="./Run-length encoding - Rosetta Code_files/hostedbadge.php"></script><iframe scrolling="no" frameborder="0" allowtransparency="true" style="overflow: hidden; margin: 0px; padding: 0px; border: 0px;" src="./Run-length encoding - Rosetta Code_files/saved_resource.htm" width="65" height="18" id="iframe-stmblpn-widget-1"></iframe> <script type="text/javascript">   (function() {     var li = document.createElement('script'); li.type = 'text/javascript'; li.async = true;     li.src = window.location.protocol + '//platform.stumbleupon.com/1/widgets.js';     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(li, s);   })(); </script>	</div>
</div>

<!-- /Misc -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id="p-tb">
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://rosettacode.org/wiki/Special:WhatLinksHere/Run-length_encoding" title="A list of all wiki pages that link here [alt-j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://rosettacode.org/wiki/Special:RecentChangesLinked/Run-length_encoding" title="Recent changes in pages linked from this page [alt-k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://rosettacode.org/wiki/Special:SpecialPages" title="A list of all special pages [alt-q]" accesskey="q">Special pages</a></li>
			<li><a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://rosettacode.org/mw/index.php?title=Run-length_encoding&oldid=143104" title="Permanent link to this revision of the page">Permanent link</a></li>
<li id="t-smwbrowselink"><a href="http://rosettacode.org/wiki/Special:Browse/Run-2Dlength_encoding" title="Special:Browse/Run-2Dlength encoding">Browse properties</a></li>		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 27 August 2012, at 12:41.</li>
											<li id="footer-info-copyright">Content is available under <a class="external" href="http://www.gnu.org/licenses/fdl-1.2.html">GNU Free Documentation License 1.2</a>.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://rosettacode.org/wiki/Rosetta_Code:Privacy_policy" title="Rosetta Code:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://rosettacode.org/wiki/Rosetta_Code:About" title="Rosetta Code:About">About Rosetta Code</a></li>
											<li id="footer-places-disclaimer"><a href="http://rosettacode.org/wiki/Rosetta_Code:General_disclaimer" title="Rosetta Code:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<a href="http://www.gnu.org/licenses/fdl-1.2.html"><img src="./Run-length encoding - Rosetta Code_files/gnu-fdl.png" alt="GNU Free Documentation License 1.2" width="88" height="31"></a>
					</li>
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="./Run-length encoding - Rosetta Code_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31"></a>
						<a href="http://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki"><img src="./Run-length encoding - Rosetta Code_files/smw_button.png" alt="Powered by Semantic MediaWiki" width="88" height="31"></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="./Run-length encoding - Rosetta Code_files/load(3).php"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script><script type="text/javascript" src="./Run-length encoding - Rosetta Code_files/load(4).php"></script>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(["_setAccount", "UA-1219419-1"]);
  _gaq.push(["_trackPageview"]);

  (function() {
    var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
    ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
    var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<script src="./Run-length encoding - Rosetta Code_files/load(5).php"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs102":false,"searchNs103":false,"searchNs106":false,"searchNs107":false,"searchNs108":false,"searchNs109":false,"searchNs110":false,"searchNs111":false,"searchNs112":false,"searchNs113":false,"searchNs114":false,"searchNs115":false,"searchNs170":false,"searchNs171":false,"searchNs274":false,"searchNs275":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: rosettacode:resourceloader:filter:minify-js:4:53430b334a211d12bb807ccec9845ab3 */
}
</script><!-- Served in 0.403 secs. -->
	

</body></html>