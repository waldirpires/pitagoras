<!DOCTYPE html>
<!-- saved from url=(0045)http://rosettacode.org/wiki/LZW_compression#C -->
<html lang="en" dir="ltr" class="client-js"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>LZW compression - Rosetta Code</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.18.0">
<link rel="alternate" type="application/x-wiki" title="Edit" href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit">
<link rel="edit" title="Edit" href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit">
<link rel="shortcut icon" href="http://rosettacode.org/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="http://rosettacode.org/mw/opensearch_desc.php" title="Rosetta Code (en)">
<link rel="EditURI" type="application/rsd+xml" href="http://rosettacode.org/mw/api.php?action=rsd">
<link rel="copyright" href="http://www.gnu.org/licenses/fdl-1.2.html">
<link rel="alternate" type="application/atom+xml" title="Rosetta Code Atom feed" href="http://rosettacode.org/mw/index.php?title=Special:RecentChanges&feed=atom">
<link rel="stylesheet" href="http://rosettacode.org/mw/load.php?debug=false&lang=en&modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&only=styles&skin=vector&*">
<style type="text/css" media="all">.mw-collapsible-toggle{float:right} li .mw-collapsible-toggle{float:none} .mw-collapsible-toggle-li{list-style:none}

/* cache key: rosettacode:resourceloader:filter:minify-css:4:4250852ed2349a0d4d0fc6509a3e7d4c */</style><style type="text/css" media="all">.js-messagebox{margin:1em 5%;padding:0.5em 2.5%;border:1px solid #ccc;background-color:#fcfcfc;font-size:0.8em}.js-messagebox .js-messagebox-group{margin:1px;padding:0.5em 2.5%;border-bottom:1px solid #ddd}.js-messagebox .js-messagebox-group:last-child{border-bottom:thin none transparent}

/* cache key: rosettacode:resourceloader:filter:minify-css:4:8b08bdc91c52a9ffba396dccfb5b473c */</style><meta name="ResourceLoaderDynamicStyles" content="">
<link rel="stylesheet" href="http://rosettacode.org/mw/load.php?debug=false&lang=en&modules=site&only=styles&skin=vector&*">
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: rosettacode:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */</style>
<script src="./LZW compression - Rosetta Code_files/cb=gapi.loaded_0" async=""></script><script type="text/javascript" async="" src="./LZW compression - Rosetta Code_files/ga.js"></script><script type="text/javascript" async="" src="./LZW compression - Rosetta Code_files/widgets.js"></script><script id="twitter-wjs" src="./LZW compression - Rosetta Code_files/widgets(1).js"></script><script type="text/javascript" async="" src="./LZW compression - Rosetta Code_files/plusone.js" gapi_processed="true"></script><script src="./LZW compression - Rosetta Code_files/load.php"></script><script src="./LZW compression - Rosetta Code_files/load(1).php"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "LZW_compression", "wgTitle": "LZW compression", "wgCurRevisionId": 146744, "wgArticleId": 2981, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Programming Tasks", "Compression", "Ada", "BBC BASIC", "C", "CoffeeScript", "Common Lisp", "Babel (library)", "C++", "C sharp", "Clojure", "D", "Dylan", "Erlang", "Forth", "Go", "Haskell", "J", "Java", "JavaScript", "Objective-C", "OCaml", "Perl", "PicoLisp", "PureBasic", "Python", "Ruby", "Scheme", "Seed7", "Tcl"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": [], "sfgRemoveText": "Remove", "sfgAutocompleteOnAllChars": false, "sfgAutocompleteValues": {}, "sfgShowOnSelect": {}, "sfgFormErrorsHeader": "There were errors with your form input; see below", "sfgBlankErrorStr": "cannot be blank", "sfgBadURLErrorStr": "must have the correct URL format, starting with \"http\"", "sfgBadEmailErrorStr": "must have a valid email address format", "sfgBadNumberErrorStr": "must be a valid number", "sfgBadDateErrorStr": "must be a valid date", "sfgAnonEditWarning": "Warning: You are not logged in. Your IP address will be recorded in this page\'s edit history."});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script><script type="text/javascript" src="./LZW compression - Rosetta Code_files/load(2).php"></script>
		<link rel="alternate" type="application/rdf+xml" title="LZW compression" href="http://rosettacode.org/mw/index.php?title=Special:ExportRDF/LZW_compression&xmlmime=rdf">
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/mw/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-LZW_compression action-view skin-vector" data-twttr-rendered="true">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;" class="js-messagebox"></div>
						<!-- sitenotice -->
			<div id="siteNotice"><div id="localNotice" lang="en" dir="ltr"><center>
<table class="messagebox" style="text-align: center; background-color: lightyellow; clear: both;">
<tbody><tr>
<td> In Talk pages, please remember to sign your comments, and please remember to maintain proper indentation for thread tracking. -<a href="http://rosettacode.org/wiki/User:Short_Circuit" title="User:Short Circuit">Michael Mol</a> 13:20, 15 October 2012 (UTC)
</td></tr></tbody></table></center>
</div></div>
			<!-- /sitenotice -->
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">LZW compression</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From Rosetta Code</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="http://rosettacode.org/wiki/LZW_compression#mw-head">navigation</a>,
					<a href="http://rosettacode.org/wiki/LZW_compression#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><div class="infobox" style="width: 2in"><div class="floatleft"><a href="http://rosettacode.org/wiki/Category:Solutions_by_Programming_Task" title="Category:Solutions by Programming Task"><img alt="Task" src="./LZW compression - Rosetta Code_files/64px-Rcode-button-task-crushed.png" width="64" height="64"></a></div><b>LZW compression</b><br>
You are encouraged to <a href="http://rosettacode.org/wiki/Rosetta_Code:Solve_a_Task" title="Rosetta Code:Solve a Task">solve this task</a> according to the task description, using any language you may know.</div>
<p>The Lempel-Ziv-Welch (LZW) algorithm provides lossless data compression.
You can read a complete description of it in the <a href="http://en.wikipedia.org/wiki/Lempel-Ziv-Welch" class="extiw" title="wp:Lempel-Ziv-Welch">Wikipedia article</a> on the subject.
It was patented, but it fell in the public domain in 2004.
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2><span class="toctoggle">&nbsp;[<a href="http://rosettacode.org/wiki/LZW_compression#" class="internal" id="togglelink">hide</a>]&nbsp;</span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="http://rosettacode.org/wiki/LZW_compression#Ada"><span class="tocnumber">1</span> <span class="toctext">Ada</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="http://rosettacode.org/wiki/LZW_compression#BBC_BASIC"><span class="tocnumber">2</span> <span class="toctext">BBC BASIC</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="./LZW compression - Rosetta Code_files/LZW compression - Rosetta Code.htm"><span class="tocnumber">3</span> <span class="toctext">C</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="http://rosettacode.org/wiki/LZW_compression#CoffeeScript"><span class="tocnumber">4</span> <span class="toctext">CoffeeScript</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="http://rosettacode.org/wiki/LZW_compression#Common_Lisp"><span class="tocnumber">5</span> <span class="toctext">Common Lisp</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="http://rosettacode.org/wiki/LZW_compression#C.2B.2B"><span class="tocnumber">6</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="http://rosettacode.org/wiki/LZW_compression#C.23"><span class="tocnumber">7</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="http://rosettacode.org/wiki/LZW_compression#Clojure"><span class="tocnumber">8</span> <span class="toctext">Clojure</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="http://rosettacode.org/wiki/LZW_compression#D"><span class="tocnumber">9</span> <span class="toctext">D</span></a>
<ul>
<li class="toclevel-2 tocsection-10"><a href="http://rosettacode.org/wiki/LZW_compression#Alternative_Version"><span class="tocnumber">9.1</span> <span class="toctext">Alternative Version</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="http://rosettacode.org/wiki/LZW_compression#Dylan"><span class="tocnumber">10</span> <span class="toctext">Dylan</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="http://rosettacode.org/wiki/LZW_compression#Erlang"><span class="tocnumber">11</span> <span class="toctext">Erlang</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="http://rosettacode.org/wiki/LZW_compression#Forth"><span class="tocnumber">12</span> <span class="toctext">Forth</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="http://rosettacode.org/wiki/LZW_compression#Go"><span class="tocnumber">13</span> <span class="toctext">Go</span></a></li>
<li class="toclevel-1 tocsection-15"><a href="http://rosettacode.org/wiki/LZW_compression#Haskell"><span class="tocnumber">14</span> <span class="toctext">Haskell</span></a></li>
<li class="toclevel-1 tocsection-16"><a href="http://rosettacode.org/wiki/LZW_compression#J"><span class="tocnumber">15</span> <span class="toctext">J</span></a></li>
<li class="toclevel-1 tocsection-17"><a href="http://rosettacode.org/wiki/LZW_compression#Java"><span class="tocnumber">16</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-1 tocsection-18"><a href="http://rosettacode.org/wiki/LZW_compression#JavaScript"><span class="tocnumber">17</span> <span class="toctext">JavaScript</span></a></li>
<li class="toclevel-1 tocsection-19"><a href="http://rosettacode.org/wiki/LZW_compression#Objective-C"><span class="tocnumber">18</span> <span class="toctext">Objective-C</span></a></li>
<li class="toclevel-1 tocsection-20"><a href="http://rosettacode.org/wiki/LZW_compression#OCaml"><span class="tocnumber">19</span> <span class="toctext">OCaml</span></a></li>
<li class="toclevel-1 tocsection-21"><a href="http://rosettacode.org/wiki/LZW_compression#Perl"><span class="tocnumber">20</span> <span class="toctext">Perl</span></a></li>
<li class="toclevel-1 tocsection-22"><a href="http://rosettacode.org/wiki/LZW_compression#PicoLisp"><span class="tocnumber">21</span> <span class="toctext">PicoLisp</span></a></li>
<li class="toclevel-1 tocsection-23"><a href="http://rosettacode.org/wiki/LZW_compression#PureBasic"><span class="tocnumber">22</span> <span class="toctext">PureBasic</span></a></li>
<li class="toclevel-1 tocsection-24"><a href="http://rosettacode.org/wiki/LZW_compression#Python"><span class="tocnumber">23</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-1 tocsection-25"><a href="http://rosettacode.org/wiki/LZW_compression#Ruby"><span class="tocnumber">24</span> <span class="toctext">Ruby</span></a></li>
<li class="toclevel-1 tocsection-26"><a href="http://rosettacode.org/wiki/LZW_compression#Scheme"><span class="tocnumber">25</span> <span class="toctext">Scheme</span></a></li>
<li class="toclevel-1 tocsection-27"><a href="http://rosettacode.org/wiki/LZW_compression#Seed7"><span class="tocnumber">26</span> <span class="toctext">Seed7</span></a></li>
<li class="toclevel-1 tocsection-28"><a href="http://rosettacode.org/wiki/LZW_compression#Tcl"><span class="tocnumber">27</span> <span class="toctext">Tcl</span></a></li>
</ul>
</td></tr></tbody></table>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=1" title="Edit section: Ada">edit</a>]</span> <span class="mw-headline" id="Ada"><a href="http://rosettacode.org/wiki/Category:Ada" title="Category:Ada">Ada</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/Ada_2005" title="Ada 2005">Ada 2005</a></div>
<p>lzw.ads:
</p>
<pre class="ada highlighted_source"><span class="kw3">package</span> LZW <span class="kw1">is</span><br>&nbsp;<br>   MAX_CODE&nbsp;: <span class="kw3">constant</span>&nbsp;:= <span class="nu0">4095</span>;<br>&nbsp;<br>   <span class="kw3">type</span> Codes <span class="kw1">is</span> <span class="kw3">new</span> Natural <span class="kw3">range</span> <span class="nu0">0</span> .. <span class="me1">MAX_CODE</span>;<br>   <span class="kw3">type</span> Compressed_Data <span class="kw1">is</span> <span class="kw3">array</span> <span class="br0">(</span>Positive <span class="kw3">range</span> &lt;&gt;<span class="br0">)</span> <span class="kw3">of</span> Codes;<br>&nbsp;<br>   <span class="kw3">function</span> Compress <span class="br0">(</span>Cleartext&nbsp;: <span class="kw3">in</span> String<span class="br0">)</span> <span class="kw1">return</span> Compressed_Data;<br>   <span class="kw3">function</span> Decompress <span class="br0">(</span>Data&nbsp;: <span class="kw3">in</span> Compressed_Data<span class="br0">)</span> <span class="kw1">return</span> String;<br>&nbsp;<br><span class="kw1">end</span> LZW;</pre>
<p>lzw.adb:
</p>
<pre class="ada highlighted_source"><span class="kw3">with</span> Ada.<span class="me1">Containers</span>.<span class="me1">Ordered_Maps</span>;<br><span class="kw3">with</span> Ada.<span class="me1">Strings</span>.<span class="me1">Unbounded</span>;<br>&nbsp;<br><span class="kw3">package</span> <span class="kw3">body</span> LZW <span class="kw1">is</span><br>   <span class="kw3">package</span> UStrings <span class="kw3">renames</span> Ada.<span class="me1">Strings</span>.<span class="me1">Unbounded</span>;<br>   <span class="kw3">use</span> <span class="kw3">type</span> UStrings.<span class="me1">Unbounded_String</span>;<br>&nbsp;<br>   <span class="co1">--------------</span><br>   <span class="co1">-- Compress --</span><br>   <span class="co1">--------------</span><br>&nbsp;<br>   <span class="kw3">function</span> Compress <span class="br0">(</span>Cleartext&nbsp;: <span class="kw3">in</span> String<span class="br0">)</span> <span class="kw1">return</span> Compressed_Data <span class="kw1">is</span><br>      <span class="co1">-- translate String to Code-ID</span><br>      <span class="kw3">package</span> String_To_Code <span class="kw1">is</span> <span class="kw3">new</span> Ada.<span class="me1">Containers</span>.<span class="me1">Ordered_Maps</span> <span class="br0">(</span><br>         Key_Type =&gt; UStrings.<span class="me1">Unbounded_String</span>,<br>         Element_Type =&gt; Codes<span class="br0">)</span>;<br>&nbsp;<br>      Dictionary&nbsp;: String_To_Code.<span class="me1">Map</span>;<br>      <span class="co1">-- Next unused Code-ID</span><br>      Next_Entry&nbsp;: Codes&nbsp;:= <span class="nu0">256</span>;<br>&nbsp;<br>      <span class="co1">-- maximum same length as input, compression ratio always &gt;=1.0</span><br>      Result&nbsp;: Compressed_Data <span class="br0">(</span><span class="nu0">1</span> .. <span class="me1">Cleartext</span>'Length<span class="br0">)</span>;<br>      <span class="co1">-- position for next Code-ID</span><br>      Result_Index&nbsp;: Natural&nbsp;:= <span class="nu0">1</span>;<br>&nbsp;<br>      <span class="co1">-- current and next input string</span><br>      Current_Word&nbsp;: UStrings.<span class="me1">Unbounded_String</span>&nbsp;:=<br>        UStrings.<span class="me1">Null_Unbounded_String</span>;<br>      Next_Word   &nbsp;: UStrings.<span class="me1">Unbounded_String</span>&nbsp;:=<br>        UStrings.<span class="me1">Null_Unbounded_String</span>;<br>   <span class="kw1">begin</span><br>      <span class="co1">-- initialize Dictionary</span><br>      <span class="kw1">for</span> C <span class="kw3">in</span> Character <span class="kw1">loop</span><br>         String_To_Code.<span class="me1">Insert</span><br>           <span class="br0">(</span>Dictionary,<br>            UStrings.<span class="me1">Null_Unbounded_String</span> &amp; C,<br>            Character'Pos <span class="br0">(</span>C<span class="br0">)</span><span class="br0">)</span>;<br>      <span class="kw1">end</span> <span class="kw1">loop</span>;<br>&nbsp;<br>      <span class="kw1">for</span> Index <span class="kw3">in</span> Cleartext'<span class="kw3">Range</span> <span class="kw1">loop</span><br>         <span class="co1">-- add character to current word</span><br>         Next_Word&nbsp;:= Current_Word &amp; Cleartext <span class="br0">(</span>Index<span class="br0">)</span>;<br>         <span class="kw1">if</span> String_To_Code.<span class="me1">Contains</span> <span class="br0">(</span>Dictionary, Next_Word<span class="br0">)</span> <span class="kw1">then</span><br>            <span class="co1">-- already in dictionary, continue with next character</span><br>            Current_Word&nbsp;:= Next_Word;<br>         <span class="kw1">else</span><br>            <span class="co1">-- insert code for current word to result</span><br>            Result <span class="br0">(</span>Result_Index<span class="br0">)</span>&nbsp;:=<br>               String_To_Code.<span class="me1">Element</span> <span class="br0">(</span>Dictionary, Current_Word<span class="br0">)</span>;<br>            Result_Index         &nbsp;:= Result_Index + <span class="nu0">1</span>;<br>            <span class="co1">-- add new Code to Dictionary</span><br>            String_To_Code.<span class="me1">Insert</span> <span class="br0">(</span>Dictionary, Next_Word, Next_Entry<span class="br0">)</span>;<br>            Next_Entry&nbsp;:= Next_Entry + <span class="nu0">1</span>;<br>            <span class="co1">-- reset current word to one character</span><br>            Current_Word&nbsp;:= UStrings.<span class="me1">Null_Unbounded_String</span> &amp;<br>                            Cleartext <span class="br0">(</span>Index<span class="br0">)</span>;<br>         <span class="kw1">end</span> <span class="kw1">if</span>;<br>      <span class="kw1">end</span> <span class="kw1">loop</span>;<br>      <span class="co1">-- Last word was not entered</span><br>      Result <span class="br0">(</span>Result_Index<span class="br0">)</span>&nbsp;:=<br>         String_To_Code.<span class="me1">Element</span> <span class="br0">(</span>Dictionary, Current_Word<span class="br0">)</span>;<br>      <span class="co1">-- return correct array size</span><br>      <span class="kw1">return</span> Result <span class="br0">(</span><span class="nu0">1</span> .. <span class="me1">Result_Index</span><span class="br0">)</span>;<br>   <span class="kw1">end</span> Compress;<br>&nbsp;<br>   <span class="co1">----------------</span><br>   <span class="co1">-- Decompress --</span><br>   <span class="co1">----------------</span><br>&nbsp;<br>   <span class="kw3">function</span> Decompress <span class="br0">(</span>Data&nbsp;: <span class="kw3">in</span> Compressed_Data<span class="br0">)</span> <span class="kw1">return</span> String <span class="kw1">is</span><br>      <span class="co1">-- translate Code-ID to String</span><br>      <span class="kw3">type</span> Code_To_String <span class="kw1">is</span> <span class="kw3">array</span> <span class="br0">(</span>Codes<span class="br0">)</span> <span class="kw3">of</span> UStrings.<span class="me1">Unbounded_String</span>;<br>&nbsp;<br>      Dictionary&nbsp;: Code_To_String;<br>      <span class="co1">-- next unused Code-ID</span><br>      Next_Entry&nbsp;: Codes&nbsp;:= <span class="nu0">256</span>;<br>&nbsp;<br>      <span class="co1">-- initialize resulting string as empty string</span><br>      Result&nbsp;: UStrings.<span class="me1">Unbounded_String</span>&nbsp;:= UStrings.<span class="me1">Null_Unbounded_String</span>;<br>&nbsp;<br>      Next_Code&nbsp;: Codes;<br>      <span class="co1">-- first code has to be in dictionary</span><br>      Last_Code&nbsp;: Codes&nbsp;:= Data <span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span>;<br>      <span class="co1">-- suffix appended to last string for new dictionary entry</span><br>      Suffix&nbsp;: Character;<br>   <span class="kw1">begin</span><br>      <span class="co1">-- initialize Dictionary</span><br>      <span class="kw1">for</span> C <span class="kw3">in</span> Character <span class="kw1">loop</span><br>         Dictionary <span class="br0">(</span>Codes <span class="br0">(</span>Character'Pos <span class="br0">(</span>C<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>  &nbsp;:=<br>           UStrings.<span class="me1">Null_Unbounded_String</span> &amp; C;<br>      <span class="kw1">end</span> <span class="kw1">loop</span>;<br>&nbsp;<br>      <span class="co1">-- output first Code-ID</span><br>      UStrings.<span class="me1">Append</span> <span class="br0">(</span>Result, Dictionary <span class="br0">(</span>Last_Code<span class="br0">)</span><span class="br0">)</span>;<br>      <span class="kw1">for</span> Index <span class="kw3">in</span> <span class="nu0">2</span> .. <span class="me1">Data</span>'Last <span class="kw1">loop</span><br>         Next_Code&nbsp;:= Data <span class="br0">(</span>Index<span class="br0">)</span>;<br>         <span class="kw1">if</span> Next_Code &lt;= Next_Entry <span class="kw1">then</span><br>            <span class="co1">-- next Code-ID already in dictionary -&gt; append first char</span><br>            Suffix&nbsp;:= UStrings.<span class="me1">Element</span> <span class="br0">(</span>Dictionary <span class="br0">(</span>Next_Code<span class="br0">)</span>, <span class="nu0">1</span><span class="br0">)</span>;<br>         <span class="kw1">else</span><br>            <span class="co1">-- next Code-ID not in dictionary -&gt; use char from last ID</span><br>            Suffix&nbsp;:= UStrings.<span class="me1">Element</span> <span class="br0">(</span>Dictionary <span class="br0">(</span>Last_Code<span class="br0">)</span>, <span class="nu0">1</span><span class="br0">)</span>;<br>         <span class="kw1">end</span> <span class="kw1">if</span>;<br>         <span class="co1">-- expand the dictionary</span><br>         Dictionary <span class="br0">(</span>Next_Entry<span class="br0">)</span>&nbsp;:= Dictionary <span class="br0">(</span>Last_Code<span class="br0">)</span> &amp; Suffix;<br>         Next_Entry             &nbsp;:= Next_Entry + <span class="nu0">1</span>;<br>         <span class="co1">-- output the current Code-ID to result</span><br>         UStrings.<span class="me1">Append</span> <span class="br0">(</span>Result, Dictionary <span class="br0">(</span>Next_Code<span class="br0">)</span><span class="br0">)</span>;<br>         Last_Code&nbsp;:= Next_Code;<br>      <span class="kw1">end</span> <span class="kw1">loop</span>;<br>      <span class="co1">-- return String</span><br>      <span class="kw1">return</span> UStrings.<span class="me1">To_String</span> <span class="br0">(</span>Result<span class="br0">)</span>;<br>   <span class="kw1">end</span> Decompress;<br>&nbsp;<br><span class="kw1">end</span> LZW;</pre>
<p>test.adb:
</p>
<pre class="ada highlighted_source"><span class="kw3">with</span> LZW;<br><span class="kw3">with</span> Ada.<span class="me1">Text_IO</span>;<br>&nbsp;<br><span class="kw3">procedure</span> Test <span class="kw1">is</span><br>   <span class="kw3">package</span> Text_IO <span class="kw3">renames</span> Ada.<span class="me1">Text_IO</span>;<br>   <span class="kw3">package</span> Code_IO <span class="kw1">is</span> <span class="kw3">new</span> Ada.<span class="me1">Text_IO</span>.<span class="me1">Integer_IO</span> <span class="br0">(</span>LZW.<span class="me1">Codes</span><span class="br0">)</span>;<br>&nbsp;<br>   Test_Data&nbsp;: <span class="kw3">constant</span> LZW.<span class="me1">Compressed_Data</span>&nbsp;:=<br>      LZW.<span class="me1">Compress</span> <span class="br0">(</span><span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><span class="br0">)</span>;<br><span class="kw1">begin</span><br>   <span class="kw1">for</span> Index <span class="kw3">in</span> Test_Data'<span class="kw3">Range</span> <span class="kw1">loop</span><br>      Code_IO.<span class="me1">Put</span> <span class="br0">(</span>Test_Data <span class="br0">(</span>Index<span class="br0">)</span>, <span class="nu0">0</span><span class="br0">)</span>;<br>      Text_IO.<span class="me1">Put</span> <span class="br0">(</span><span class="st0">" "</span><span class="br0">)</span>;<br>   <span class="kw1">end</span> <span class="kw1">loop</span>;<br>   Text_IO.<span class="me1">New_Line</span>;<br>   <span class="kw1">declare</span><br>      Cleartext&nbsp;: <span class="kw3">constant</span> String&nbsp;:= LZW.<span class="me1">Decompress</span> <span class="br0">(</span>Test_Data<span class="br0">)</span>;<br>   <span class="kw1">begin</span><br>      Text_IO.<span class="me1">Put_Line</span> <span class="br0">(</span>Cleartext<span class="br0">)</span>;<br>   <span class="kw1">end</span>;<br><span class="kw1">end</span> Test;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=2" title="Edit section: BBC BASIC">edit</a>]</span> <span class="mw-headline" id="BBC_BASIC"><a href="http://rosettacode.org/wiki/Category:BBC_BASIC" title="Category:BBC BASIC">BBC BASIC</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/BBC_BASIC_for_Windows" title="BBC BASIC for Windows">BBC BASIC for Windows</a></div>
<p>Uses fixed bit-width (16 bits) and initial dictionary size = 256.
</p>
<pre class="text highlighted_source">      plaintext$ = "TOBEORNOTTOBEORTOBEORNOT"<br>      encodeLZW$ = FNencodeLZW(plaintext$)<br>      FOR i% = 1 TO LEN(encodeLZW$) STEP 2<br>        PRINT&nbsp;; ASCMID$(encodeLZW$,i%) + 256*ASCMID$(encodeLZW$,i%+1) " "&nbsp;;<br>      NEXT<br>      PRINT ' FNdecodeLZW(encodeLZW$)<br>      END<br>&nbsp;<br>      DEF FNencodeLZW(i$)<br>      LOCAL c%, d%, i%, l%, o$, w$, dict$()<br>      DIM dict$(4095)<br>      FOR i% = 0 TO 255&nbsp;: dict$(i%) = CHR$(i%)&nbsp;: NEXT<br>      l% = i%<br>      i% = 1<br>      w$ = LEFT$(i$,1)<br>      REPEAT<br>        d% = 0<br>        REPEAT<br>          c% = d%<br>          IF i% &gt; LEN(i$) EXIT REPEAT<br>          FOR d% = 1 TO l%-1<br>            IF w$ = dict$(d%) EXIT FOR<br>          NEXT d%<br>          IF d% &lt; l% i% += 1&nbsp;: w$ += MID$(i$, i%, 1)<br>        UNTIL d% &gt;= l%<br>        dict$(l%) = w$&nbsp;: l% += 1&nbsp;: w$ = RIGHT$(w$)<br>        o$ += CHR$(c% MOD 256) + CHR$(c% DIV 256)<br>      UNTIL i% &gt;= LEN(i$)<br>      = o$<br>&nbsp;<br>      DEF FNdecodeLZW(i$)<br>      LOCAL c%, i%, l%, o$, t$, w$, dict$()<br>      DIM dict$(4095)<br>      FOR i% = 0 TO 255&nbsp;: dict$(i%) = CHR$(i%)&nbsp;: NEXT<br>      l% = i%<br>      c% = ASC(i$) + 256*ASCMID$(i$,2)<br>      w$ = dict$(c%)<br>      o$ = w$<br>      IF LEN(i$) &lt; 4 THEN = o$<br>      FOR i% = 3 TO LEN(i$) STEP 2<br>        c% = ASCMID$(i$,i%) + 256*ASCMID$(i$,i%+1)<br>        IF c% &lt; l% t$ = dict$(c%) ELSE t$ = w$ + LEFT$(w$,1)<br>        o$ += t$<br>        dict$(l%) = w$ + LEFT$(t$,1)<br>        l% += 1<br>        w$ = t$<br>      NEXT<br>      = o$</pre>
<p><b>Output:</b>
</p>
<pre>84 79 66 69 79 82 78 79 84 256 258 260 265 259 261 263
TOBEORNOTTOBEORTOBEORNOT
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=3" title="Edit section: C">edit</a>]</span> <span class="mw-headline" id="C"><a href="http://rosettacode.org/wiki/Category:C" title="Category:C">C</a></span></h2>
<p>LZW encoder/decoder.  Using variable bit length from 9 to up to 16.  Encoder needs to know max allow bits, decoder doesn't.  Code 256 for clear table, 257 for end of data, everything are either byte values (&lt;256) or code values.
</p>
<pre class="c highlighted_source"><span class="co2">#include &lt;stdio.h&gt;</span><br><span class="co2">#include &lt;stdlib.h&gt;</span><br><span class="co2">#include &lt;string.h&gt;</span><br><span class="co2">#include &lt;stdint.h&gt;</span><br><span class="co2">#include &lt;unistd.h&gt;</span><br><span class="co2">#include &lt;fcntl.h&gt;</span><br><span class="co2">#include &lt;sys/types.h&gt;</span><br><span class="co2">#include &lt;sys/stat.h&gt;</span><br>&nbsp;<br><span class="coMULTI">/* -------- aux stuff ---------- */</span><br><span class="kw4">void</span><span class="sy0">*</span> mem_alloc<span class="br0">(</span><span class="kw4">size_t</span> item_size<span class="sy0">,</span> <span class="kw4">size_t</span> n_item<span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">size_t</span> <span class="sy0">*</span>x <span class="sy0">=</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html"><span class="kw3">calloc</span></a><span class="br0">(</span><span class="nu0">1</span><span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">size_t</span><span class="br0">)</span><span class="sy0">*</span><span class="nu0">2</span> <span class="sy0">+</span> n_item <span class="sy0">*</span> item_size<span class="br0">)</span><span class="sy0">;</span><br>	x<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=</span> item_size<span class="sy0">;</span><br>	x<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> n_item<span class="sy0">;</span><br>	<span class="kw1">return</span> x <span class="sy0">+</span> <span class="nu0">2</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">void</span><span class="sy0">*</span> mem_extend<span class="br0">(</span><span class="kw4">void</span> <span class="sy0">*</span>m<span class="sy0">,</span> <span class="kw4">size_t</span> new_n<span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">size_t</span> <span class="sy0">*</span>x <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">size_t</span><span class="sy0">*</span><span class="br0">)</span>m <span class="sy0">-</span> <span class="nu0">2</span><span class="sy0">;</span><br>	x <span class="sy0">=</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html"><span class="kw3">realloc</span></a><span class="br0">(</span>x<span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">size_t</span><span class="br0">)</span> <span class="sy0">*</span> <span class="nu0">2</span> <span class="sy0">+</span> <span class="sy0">*</span>x <span class="sy0">*</span> new_n<span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw1">if</span> <span class="br0">(</span>new_n <span class="sy0">&gt;</span> x<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><br>		<a href="http://www.opengroup.org/onlinepubs/009695399/functions/memset.html"><span class="kw3">memset</span></a><span class="br0">(</span><span class="br0">(</span><span class="kw4">char</span><span class="sy0">*</span><span class="br0">)</span><span class="br0">(</span>x <span class="sy0">+</span> <span class="nu0">2</span><span class="br0">)</span> <span class="sy0">+</span> x<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">*</span> x<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> x<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">*</span> <span class="br0">(</span>new_n <span class="sy0">-</span> x<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>	x<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> new_n<span class="sy0">;</span><br>	<span class="kw1">return</span> x <span class="sy0">+</span> <span class="nu0">2</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw2">inline</span> <span class="kw4">void</span> _clear<span class="br0">(</span><span class="kw4">void</span> <span class="sy0">*</span>m<span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">size_t</span> <span class="sy0">*</span>x <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">size_t</span><span class="sy0">*</span><span class="br0">)</span>m <span class="sy0">-</span> <span class="nu0">2</span><span class="sy0">;</span><br>	<a href="http://www.opengroup.org/onlinepubs/009695399/functions/memset.html"><span class="kw3">memset</span></a><span class="br0">(</span>m<span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> x<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">*</span> x<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="co2">#define _new(type, n)	mem_alloc(sizeof(type), n)</span><br><span class="co2">#define _del(m)		{ free((size_t*)(m) - 2); m = 0; }</span><br><span class="co2">#define _len(m)		*((size_t*)m - 1)</span><br><span class="co2">#define _setsize(m, n)	m = mem_extend(m, n)</span><br><span class="co2">#define _extend(m)	m = mem_extend(m, _len(m) * 2)</span><br>&nbsp;<br>&nbsp;<br><span class="coMULTI">/* ----------- LZW stuff -------------- */</span><br><span class="kw4">typedef</span> <span class="kw4">uint8_t</span> byte<span class="sy0">;</span><br><span class="kw4">typedef</span> <span class="kw4">uint16_t</span> ushort<span class="sy0">;</span><br>&nbsp;<br><span class="co2">#define M_CLR	256	/* clear table marker */</span><br><span class="co2">#define M_EOD	257	/* end-of-data marker */</span><br><span class="co2">#define M_NEW	258	/* new code index */</span><br>&nbsp;<br><span class="coMULTI">/* encode and decode dictionary structures.<br>   for encoding, entry at code index is a list of indices that follow current one,<br>   i.e. if code 97 is 'a', code 387 is 'ab', and code 1022 is 'abc',<br>   then dict[97].next['b'] = 387, dict[387].next['c'] = 1022, etc. */</span><br><span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">{</span><br>	ushort next<span class="br0">[</span><span class="nu0">256</span><span class="br0">]</span><span class="sy0">;</span><br><span class="br0">}</span> lzw_enc_t<span class="sy0">;</span><br>&nbsp;<br><span class="coMULTI">/* for decoding, dictionary contains index of whatever prefix index plus trailing<br>   byte.  i.e. like previous example,<br>   	dict[1022] = { c: 'c', prev: 387 },<br>   	dict[387]  = { c: 'b', prev: 97 },<br>   	dict[97]   = { c: 'a', prev: 0 }<br>   the "back" element is used for temporarily chaining indices when resolving<br>   a code to bytes<br> */</span><br><span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">{</span><br>	ushort prev<span class="sy0">,</span> back<span class="sy0">;</span><br>	byte c<span class="sy0">;</span><br><span class="br0">}</span> lzw_dec_t<span class="sy0">;</span><br>&nbsp;<br>byte<span class="sy0">*</span> lzw_encode<span class="br0">(</span>byte <span class="sy0">*</span>in<span class="sy0">,</span> <span class="kw4">int</span> max_bits<span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">int</span> len <span class="sy0">=</span> _len<span class="br0">(</span>in<span class="br0">)</span><span class="sy0">,</span> bits <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">,</span> next_shift <span class="sy0">=</span> <span class="nu0">512</span><span class="sy0">;</span><br>	ushort code<span class="sy0">,</span> c<span class="sy0">,</span> nc<span class="sy0">,</span> next_code <span class="sy0">=</span> M_NEW<span class="sy0">;</span><br>	lzw_enc_t <span class="sy0">*</span>d <span class="sy0">=</span> _new<span class="br0">(</span>lzw_enc_t<span class="sy0">,</span> <span class="nu0">512</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="kw1">if</span> <span class="br0">(</span>max_bits <span class="sy0">&gt;</span> <span class="nu0">16</span><span class="br0">)</span> max_bits <span class="sy0">=</span> <span class="nu0">16</span><span class="sy0">;</span><br>	<span class="kw1">if</span> <span class="br0">(</span>max_bits <span class="sy0">&lt;</span> <span class="nu0">9</span> <span class="br0">)</span> max_bits <span class="sy0">=</span> <span class="nu0">12</span><span class="sy0">;</span><br>&nbsp;<br>	byte <span class="sy0">*</span>out <span class="sy0">=</span> _new<span class="br0">(</span>ushort<span class="sy0">,</span> <span class="nu0">4</span><span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw4">int</span> out_len <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> o_bits <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>	<span class="kw4">uint32_t</span> tmp <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="kw2">inline</span> <span class="kw4">void</span> write_bits<span class="br0">(</span>ushort x<span class="br0">)</span> <span class="br0">{</span><br>		tmp <span class="sy0">=</span> <span class="br0">(</span>tmp <span class="sy0">&lt;&lt;</span> bits<span class="br0">)</span> <span class="sy0">|</span> x<span class="sy0">;</span><br>		o_bits <span class="sy0">+=</span> bits<span class="sy0">;</span><br>		<span class="kw1">if</span> <span class="br0">(</span>_len<span class="br0">(</span>out<span class="br0">)</span> <span class="sy0">&lt;=</span> out_len<span class="br0">)</span> _extend<span class="br0">(</span>out<span class="br0">)</span><span class="sy0">;</span><br>		<span class="kw1">while</span> <span class="br0">(</span>o_bits <span class="sy0">&gt;=</span> <span class="nu0">8</span><span class="br0">)</span> <span class="br0">{</span><br>			o_bits <span class="sy0">-=</span> <span class="nu0">8</span><span class="sy0">;</span><br>			out<span class="br0">[</span>out_len<span class="sy0">++</span><span class="br0">]</span> <span class="sy0">=</span> tmp <span class="sy0">&gt;&gt;</span> o_bits<span class="sy0">;</span><br>			tmp <span class="sy0">&amp;=</span> <span class="br0">(</span><span class="nu0">1</span> <span class="sy0">&lt;&lt;</span> o_bits<span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span><br>		<span class="br0">}</span><br>	<span class="br0">}</span><br>&nbsp;<br>	<span class="co1">//write_bits(M_CLR);</span><br>	<span class="kw1">for</span> <span class="br0">(</span>code <span class="sy0">=</span> <span class="sy0">*</span><span class="br0">(</span>in<span class="sy0">++</span><span class="br0">)</span><span class="sy0">;</span> <span class="sy0">--</span>len<span class="sy0">;</span> <span class="br0">)</span> <span class="br0">{</span><br>		c <span class="sy0">=</span> <span class="sy0">*</span><span class="br0">(</span>in<span class="sy0">++</span><span class="br0">)</span><span class="sy0">;</span><br>		<span class="kw1">if</span> <span class="br0">(</span><span class="br0">(</span>nc <span class="sy0">=</span> d<span class="br0">[</span>code<span class="br0">]</span>.<span class="me1">next</span><span class="br0">[</span>c<span class="br0">]</span><span class="br0">)</span><span class="br0">)</span><br>			code <span class="sy0">=</span> nc<span class="sy0">;</span><br>		<span class="kw1">else</span> <span class="br0">{</span><br>			write_bits<span class="br0">(</span>code<span class="br0">)</span><span class="sy0">;</span><br>			nc <span class="sy0">=</span> d<span class="br0">[</span>code<span class="br0">]</span>.<span class="me1">next</span><span class="br0">[</span>c<span class="br0">]</span> <span class="sy0">=</span> next_code<span class="sy0">++;</span><br>			code <span class="sy0">=</span> c<span class="sy0">;</span><br>		<span class="br0">}</span><br>&nbsp;<br>		<span class="coMULTI">/* next new code would be too long for current table */</span><br>		<span class="kw1">if</span> <span class="br0">(</span>next_code <span class="sy0">==</span> next_shift<span class="br0">)</span> <span class="br0">{</span><br>			<span class="coMULTI">/* either reset table back to 9 bits */</span><br>			<span class="kw1">if</span> <span class="br0">(</span><span class="sy0">++</span>bits <span class="sy0">&gt;</span> max_bits<span class="br0">)</span> <span class="br0">{</span><br>				<span class="coMULTI">/* table clear marker must occur before bit reset */</span><br>				write_bits<span class="br0">(</span>M_CLR<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>				bits <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">;</span><br>				next_shift <span class="sy0">=</span> <span class="nu0">512</span><span class="sy0">;</span><br>				next_code <span class="sy0">=</span> M_NEW<span class="sy0">;</span><br>				_clear<span class="br0">(</span>d<span class="br0">)</span><span class="sy0">;</span><br>			<span class="br0">}</span> <span class="kw1">else</span>	<span class="coMULTI">/* or extend table */</span><br>				_setsize<span class="br0">(</span>d<span class="sy0">,</span> next_shift <span class="sy0">*=</span> <span class="nu0">2</span><span class="br0">)</span><span class="sy0">;</span><br>		<span class="br0">}</span><br>	<span class="br0">}</span><br>&nbsp;<br>	write_bits<span class="br0">(</span>code<span class="br0">)</span><span class="sy0">;</span><br>	write_bits<span class="br0">(</span>M_EOD<span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw1">if</span> <span class="br0">(</span>tmp<span class="br0">)</span> write_bits<span class="br0">(</span>tmp<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	_del<span class="br0">(</span>d<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	_setsize<span class="br0">(</span>out<span class="sy0">,</span> out_len<span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw1">return</span> out<span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br>byte<span class="sy0">*</span> lzw_decode<span class="br0">(</span>byte <span class="sy0">*</span>in<span class="br0">)</span><br><span class="br0">{</span><br>	byte <span class="sy0">*</span>out <span class="sy0">=</span> _new<span class="br0">(</span>byte<span class="sy0">,</span> <span class="nu0">4</span><span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw4">int</span> out_len <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="kw2">inline</span> <span class="kw4">void</span> write_out<span class="br0">(</span>byte c<span class="br0">)</span><br>	<span class="br0">{</span><br>		<span class="kw1">while</span> <span class="br0">(</span>out_len <span class="sy0">&gt;=</span> _len<span class="br0">(</span>out<span class="br0">)</span><span class="br0">)</span> _extend<span class="br0">(</span>out<span class="br0">)</span><span class="sy0">;</span><br>		out<span class="br0">[</span>out_len<span class="sy0">++</span><span class="br0">]</span> <span class="sy0">=</span> c<span class="sy0">;</span><br>	<span class="br0">}</span><br>&nbsp;<br>	lzw_dec_t <span class="sy0">*</span>d <span class="sy0">=</span> _new<span class="br0">(</span>lzw_dec_t<span class="sy0">,</span> <span class="nu0">512</span><span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw4">int</span> len<span class="sy0">,</span> j<span class="sy0">,</span> next_shift <span class="sy0">=</span> <span class="nu0">512</span><span class="sy0">,</span> bits <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">,</span> n_bits <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>	ushort code<span class="sy0">,</span> c<span class="sy0">,</span> t<span class="sy0">,</span> next_code <span class="sy0">=</span> M_NEW<span class="sy0">;</span><br>&nbsp;<br>	<span class="kw4">uint32_t</span> tmp <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>	<span class="kw2">inline</span> <span class="kw4">void</span> get_code<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>		<span class="kw1">while</span><span class="br0">(</span>n_bits <span class="sy0">&lt;</span> bits<span class="br0">)</span> <span class="br0">{</span><br>			<span class="kw1">if</span> <span class="br0">(</span>len <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">)</span> <span class="br0">{</span><br>				len <span class="sy0">--;</span><br>				tmp <span class="sy0">=</span> <span class="br0">(</span>tmp <span class="sy0">&lt;&lt;</span> <span class="nu0">8</span><span class="br0">)</span> <span class="sy0">|</span> <span class="sy0">*</span><span class="br0">(</span>in<span class="sy0">++</span><span class="br0">)</span><span class="sy0">;</span><br>				n_bits <span class="sy0">+=</span> <span class="nu0">8</span><span class="sy0">;</span><br>			<span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>				tmp <span class="sy0">=</span> tmp <span class="sy0">&lt;&lt;</span> <span class="br0">(</span>bits <span class="sy0">-</span> n_bits<span class="br0">)</span><span class="sy0">;</span><br>				n_bits <span class="sy0">=</span> bits<span class="sy0">;</span><br>			<span class="br0">}</span><br>		<span class="br0">}</span><br>		n_bits <span class="sy0">-=</span> bits<span class="sy0">;</span><br>		code <span class="sy0">=</span> tmp <span class="sy0">&gt;&gt;</span> n_bits<span class="sy0">;</span><br>		tmp <span class="sy0">&amp;=</span> <span class="br0">(</span><span class="nu0">1</span> <span class="sy0">&lt;&lt;</span> n_bits<span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span><br>	<span class="br0">}</span><br>&nbsp;<br>	<span class="kw2">inline</span> <span class="kw4">void</span> clear_table<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>		_clear<span class="br0">(</span>d<span class="br0">)</span><span class="sy0">;</span><br>		<span class="kw1">for</span> <span class="br0">(</span>j <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> j <span class="sy0">&lt;</span> <span class="nu0">256</span><span class="sy0">;</span> j<span class="sy0">++</span><span class="br0">)</span> d<span class="br0">[</span>j<span class="br0">]</span>.<span class="me1">c</span> <span class="sy0">=</span> j<span class="sy0">;</span><br>		next_code <span class="sy0">=</span> M_NEW<span class="sy0">;</span><br>		next_shift <span class="sy0">=</span> <span class="nu0">512</span><span class="sy0">;</span><br>		bits <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">;</span><br>	<span class="br0">}</span><span class="sy0">;</span><br>&nbsp;<br>	clear_table<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span> <span class="coMULTI">/* in case encoded bits didn't start with M_CLR */</span><br>	<span class="kw1">for</span> <span class="br0">(</span>len <span class="sy0">=</span> _len<span class="br0">(</span>in<span class="br0">)</span><span class="sy0">;</span> len<span class="sy0">;</span><span class="br0">)</span> <span class="br0">{</span><br>		get_code<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>		<span class="kw1">if</span> <span class="br0">(</span>code <span class="sy0">==</span> M_EOD<span class="br0">)</span> <span class="kw2">break</span><span class="sy0">;</span><br>		<span class="kw1">if</span> <span class="br0">(</span>code <span class="sy0">==</span> M_CLR<span class="br0">)</span> <span class="br0">{</span><br>			clear_table<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>			<span class="kw1">continue</span><span class="sy0">;</span><br>		<span class="br0">}</span><br>&nbsp;<br>		<span class="kw1">if</span> <span class="br0">(</span>code <span class="sy0">&gt;=</span> next_code<span class="br0">)</span> <span class="br0">{</span><br>			<a href="http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html"><span class="kw3">fprintf</span></a><span class="br0">(</span>stderr<span class="sy0">,</span> <span class="st0">"Bad sequence<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy0">;</span><br>			_del<span class="br0">(</span>out<span class="br0">)</span><span class="sy0">;</span><br>			<span class="kw1">goto</span> bail<span class="sy0">;</span><br>		<span class="br0">}</span><br>&nbsp;<br>		d<span class="br0">[</span>next_code<span class="br0">]</span>.<span class="me1">prev</span> <span class="sy0">=</span> c <span class="sy0">=</span> code<span class="sy0">;</span><br>		<span class="kw1">while</span> <span class="br0">(</span>c <span class="sy0">&gt;</span> <span class="nu0">255</span><span class="br0">)</span> <span class="br0">{</span><br>			t <span class="sy0">=</span> d<span class="br0">[</span>c<span class="br0">]</span>.<span class="me1">prev</span><span class="sy0">;</span> d<span class="br0">[</span>t<span class="br0">]</span>.<span class="me1">back</span> <span class="sy0">=</span> c<span class="sy0">;</span> c <span class="sy0">=</span> t<span class="sy0">;</span><br>		<span class="br0">}</span><br>&nbsp;<br>		d<span class="br0">[</span>next_code <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span>.<span class="me1">c</span> <span class="sy0">=</span> c<span class="sy0">;</span><br>&nbsp;<br>		<span class="kw1">while</span> <span class="br0">(</span>d<span class="br0">[</span>c<span class="br0">]</span>.<span class="me1">back</span><span class="br0">)</span> <span class="br0">{</span><br>			write_out<span class="br0">(</span>d<span class="br0">[</span>c<span class="br0">]</span>.<span class="me1">c</span><span class="br0">)</span><span class="sy0">;</span><br>			t <span class="sy0">=</span> d<span class="br0">[</span>c<span class="br0">]</span>.<span class="me1">back</span><span class="sy0">;</span> d<span class="br0">[</span>c<span class="br0">]</span>.<span class="me1">back</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> c <span class="sy0">=</span> t<span class="sy0">;</span><br>		<span class="br0">}</span><br>		write_out<span class="br0">(</span>d<span class="br0">[</span>c<span class="br0">]</span>.<span class="me1">c</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>		<span class="kw1">if</span> <span class="br0">(</span><span class="sy0">++</span>next_code <span class="sy0">&gt;=</span> next_shift<span class="br0">)</span> <span class="br0">{</span><br>			<span class="kw1">if</span> <span class="br0">(</span><span class="sy0">++</span>bits <span class="sy0">&gt;</span> <span class="nu0">16</span><span class="br0">)</span> <span class="br0">{</span><br>				<span class="coMULTI">/* if input was correct, we'd have hit M_CLR before this */</span><br>				<a href="http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html"><span class="kw3">fprintf</span></a><span class="br0">(</span>stderr<span class="sy0">,</span> <span class="st0">"Too many bits<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy0">;</span><br>				_del<span class="br0">(</span>out<span class="br0">)</span><span class="sy0">;</span><br>				<span class="kw1">goto</span> bail<span class="sy0">;</span><br>			<span class="br0">}</span><br>			_setsize<span class="br0">(</span>d<span class="sy0">,</span> next_shift <span class="sy0">*=</span> <span class="nu0">2</span><span class="br0">)</span><span class="sy0">;</span><br>		<span class="br0">}</span><br>	<span class="br0">}</span><br>&nbsp;<br>	<span class="coMULTI">/* might be ok, so just whine, don't be drastic */</span><br>	<span class="kw1">if</span> <span class="br0">(</span>code <span class="sy0">!=</span> M_EOD<span class="br0">)</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/fputs.html"><span class="kw3">fputs</span></a><span class="br0">(</span><span class="st0">"Bits did not end in EOD<span class="es1">\n</span>"</span><span class="sy0">,</span> stderr<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	_setsize<span class="br0">(</span>out<span class="sy0">,</span> out_len<span class="br0">)</span><span class="sy0">;</span><br>bail<span class="sy0">:</span>	_del<span class="br0">(</span>d<span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw1">return</span> out<span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">int</span> i<span class="sy0">,</span> fd <span class="sy0">=</span> open<span class="br0">(</span><span class="st0">"unixdict.txt"</span><span class="sy0">,</span> O_RDONLY<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="kw1">if</span> <span class="br0">(</span>fd <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span> <span class="br0">{</span><br>		<a href="http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html"><span class="kw3">fprintf</span></a><span class="br0">(</span>stderr<span class="sy0">,</span> <span class="st0">"Can't read file<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy0">;</span><br>		<span class="kw1">return</span> <span class="nu0">1</span><span class="sy0">;</span><br>	<span class="br0">}</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="kw4">struct</span> stat st<span class="sy0">;</span><br>	fstat<span class="br0">(</span>fd<span class="sy0">,</span> <span class="sy0">&amp;</span>st<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	byte <span class="sy0">*</span>in <span class="sy0">=</span> _new<span class="br0">(</span><span class="kw4">char</span><span class="sy0">,</span> st.<span class="me1">st_size</span><span class="br0">)</span><span class="sy0">;</span><br>	read<span class="br0">(</span>fd<span class="sy0">,</span> in<span class="sy0">,</span> st.<span class="me1">st_size</span><span class="br0">)</span><span class="sy0">;</span><br>	_setsize<span class="br0">(</span>in<span class="sy0">,</span> st.<span class="me1">st_size</span><span class="br0">)</span><span class="sy0">;</span><br>	close<span class="br0">(</span>fd<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">(</span><span class="st0">"input size:  &nbsp;%d<span class="es1">\n</span>"</span><span class="sy0">,</span> _len<span class="br0">(</span>in<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	byte <span class="sy0">*</span>enc <span class="sy0">=</span> lzw_encode<span class="br0">(</span>in<span class="sy0">,</span> <span class="nu0">9</span><span class="br0">)</span><span class="sy0">;</span><br>	<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">(</span><span class="st0">"encoded size:&nbsp;%d<span class="es1">\n</span>"</span><span class="sy0">,</span> _len<span class="br0">(</span>enc<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	byte <span class="sy0">*</span>dec <span class="sy0">=</span> lzw_decode<span class="br0">(</span>enc<span class="br0">)</span><span class="sy0">;</span><br>	<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">(</span><span class="st0">"decoded size:&nbsp;%d<span class="es1">\n</span>"</span><span class="sy0">,</span> _len<span class="br0">(</span>dec<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> _len<span class="br0">(</span>dec<span class="br0">)</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span><br>		<span class="kw1">if</span> <span class="br0">(</span>dec<span class="br0">[</span>i<span class="br0">]</span> <span class="sy0">!=</span> in<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span><br>			<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">(</span><span class="st0">"bad decode at&nbsp;%d<span class="es1">\n</span>"</span><span class="sy0">,</span> i<span class="br0">)</span><span class="sy0">;</span><br>			<span class="kw2">break</span><span class="sy0">;</span><br>		<span class="br0">}</span><br>&nbsp;<br>	<span class="kw1">if</span> <span class="br0">(</span>i <span class="sy0">==</span> _len<span class="br0">(</span>dec<span class="br0">)</span><span class="br0">)</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">(</span><span class="st0">"Decoded ok<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>&nbsp;<br>	_del<span class="br0">(</span>in<span class="br0">)</span><span class="sy0">;</span><br>	_del<span class="br0">(</span>enc<span class="br0">)</span><span class="sy0">;</span><br>	_del<span class="br0">(</span>dec<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=4" title="Edit section: CoffeeScript">edit</a>]</span> <span class="mw-headline" id="CoffeeScript"><a href="http://rosettacode.org/wiki/Category:CoffeeScript" title="Category:CoffeeScript">CoffeeScript</a></span></h2>
<p>This only does the encoding step for now.
</p>
<pre class="coffeescript highlighted_source">&nbsp;<br>lzw = <span class="br0">(</span>s<span class="br0">)</span> <span class="sy0">-&gt;</span><br>  dct = <span class="br0">{</span><span class="br0">}</span> <span class="co1"># map substrings to codes between 256 and 4096</span><br>  stream = <span class="br0">[</span><span class="br0">]</span> <span class="co1"># array of compression results</span><br>&nbsp;<br>  <span class="co1"># initialize basic ASCII characters</span><br>  <span class="kw1">for</span> code_num <span class="kw1">in</span> <span class="br0">[</span><span class="nu0">0</span>..<span class="nu0">255</span><span class="br0">]</span><br>    c = String.<span class="me1">fromCharCode</span><span class="br0">(</span>code_num<span class="br0">)</span><br>    dct<span class="br0">[</span>c<span class="br0">]</span> = code_num<br>  code_num = <span class="nu0">256</span><br>&nbsp;<br>  i = <span class="nu0">0</span><br>  <span class="kw1">while</span> i <span class="sy0">&lt;</span> s.<span class="me1">length</span><br>    <span class="co1"># Find word and new_word</span><br>    <span class="co1">#   word = longest substr already encountered, or next character</span><br>    <span class="co1">#   new_word = word plus next character, a new substr to encode</span><br>    word = <span class="st0">''</span><br>    j = i<br>    <span class="kw1">while</span> j <span class="sy0">&lt;</span> s.<span class="me1">length</span><br>      new_word = word <span class="sy0">+</span> s<span class="br0">[</span>j<span class="br0">]</span><br>      <span class="kw1">break</span> <span class="kw1">if</span> <span class="sy0">!</span>dct<span class="br0">[</span>new_word<span class="br0">]</span><br>      word = new_word<br>      j <span class="sy0">+</span>= <span class="nu0">1</span><br>&nbsp;<br>    <span class="co1"># stream out the code for the substring</span><br>    stream.<span class="me1">push</span> dct<span class="br0">[</span>word<span class="br0">]</span><br>&nbsp;<br>    <span class="co1"># build up our encoding dictionary</span><br>    <span class="kw1">if</span> code_num <span class="sy0">&lt;</span> <span class="nu0">4096</span><br>      dct<span class="br0">[</span>new_word<span class="br0">]</span> = code_num<br>      code_num <span class="sy0">+</span>= <span class="nu0">1</span><br>&nbsp;<br>    <span class="co1"># advance thru the string</span><br>    i <span class="sy0">+</span>= word.<span class="me1">length</span><br>  stream<br>&nbsp;<br>console.<span class="me1">log</span> lzw <span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><br>&nbsp;</pre>
<p>output
</p>
<pre class="text highlighted_source">&nbsp;<br>&gt; coffee lzw.coffee <br>[ 84,<br>  79,<br>  66,<br>  69,<br>  79,<br>  82,<br>  78,<br>  79,<br>  84,<br>  256,<br>  258,<br>  260,<br>  265,<br>  259,<br>  261,<br>  263 ]<br>&nbsp;</pre>
<p><br>
</p>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=5" title="Edit section: Common Lisp">edit</a>]</span> <span class="mw-headline" id="Common_Lisp"><a href="http://rosettacode.org/wiki/Category:Common_Lisp" title="Category:Common Lisp">Common Lisp</a></span></h2>
<div class="examplemeta libheader"><b>Library:</b> <a href="http://rosettacode.org/wiki/Category:Babel_(library)" title="Category:Babel (library)">Babel</a></div>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/LZW_compression#Perl" title="LZW compression">Perl</a></div>
<p>This version is based upon the Perl one. It doesn't contain mixed type data at the cost of being more consy. It includes vector operation routines, since using <code>VECTOR-PUSH-APPEND</code> reallocates the whole vector with each call.
</p><p>The Babel library is required to convert octet vectors to strings. Lisp strings can contain characters out of the ASCII/latin1 character set, including the whole Unicode range in them. The exact encoding used is dependent upon the user's locale (<code>LC_CTYPE</code> on Unix).
</p>
<pre class="lisp highlighted_source"><span class="br0">(</span>declaim <span class="br0">(</span>ftype <span class="br0">(</span><span class="kw1">function</span> <span class="br0">(</span>vector vector <span class="sy0">&amp;</span>optional fixnum fixnum<span class="br0">)</span> vector<span class="br0">)</span><br>                vector-<span class="kw1">append</span><span class="br0">)</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">defun</span> vector-<span class="kw1">append</span> <span class="br0">(</span>old new <span class="sy0">&amp;</span>optional <span class="br0">(</span>start2 <span class="nu0">0</span><span class="br0">)</span> end2<span class="br0">)</span><br>  <span class="br0">(</span>declare <span class="br0">(</span>optimize <span class="br0">(</span>speed <span class="nu0">3</span><span class="br0">)</span> <span class="br0">(</span>safety <span class="nu0">0</span><span class="br0">)</span> <span class="br0">(</span>debug <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">prog1</span> old                     <br>    <span class="br0">(</span><span class="kw1">let</span>* <span class="br0">(</span><span class="br0">(</span>old-fill <span class="br0">(</span>fill-pointer old<span class="br0">)</span><span class="br0">)</span><br>           <span class="br0">(</span>new-fill <span class="br0">(</span>+ old-fill <span class="br0">(</span><span class="kw1">length</span> new<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>      <span class="br0">(</span><span class="kw1">when</span> <span class="br0">(</span><span class="sy0">&gt;</span> new-fill <span class="br0">(</span>array-dimension old <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="br0">(</span>adjust-<span class="kw1">array</span> old <span class="br0">(</span>* <span class="nu0">4</span> new-fill<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>      <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span>fill-pointer old<span class="br0">)</span> new-fill<span class="br0">)</span><br>      <span class="br0">(</span>replace old new <span class="sy0">:</span><span class="me1">start1</span> old-fill <span class="sy0">:</span><span class="me1">start2</span> start2 <span class="sy0">:</span><span class="me1">end2</span> end2<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>declaim <span class="br0">(</span>ftype <span class="br0">(</span><span class="kw1">function</span> <span class="br0">(</span>vector t<span class="br0">)</span> vector<span class="br0">)</span> vector-append1<span class="br0">)</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">defun</span> vector-append1 <span class="br0">(</span>old new<span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">prog1</span> old                     <br>    <span class="br0">(</span><span class="kw1">let</span>* <span class="br0">(</span><span class="br0">(</span>old-fill <span class="br0">(</span>fill-pointer old<span class="br0">)</span><span class="br0">)</span><br>           <span class="br0">(</span>new-fill <span class="br0">(</span><span class="nu0">1</span>+ old-fill<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>      <span class="br0">(</span><span class="kw1">when</span> <span class="br0">(</span><span class="sy0">&gt;</span> new-fill <span class="br0">(</span>array-dimension old <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="br0">(</span>adjust-<span class="kw1">array</span> old <span class="br0">(</span>* <span class="nu0">4</span> new-fill<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>      <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span>fill-pointer old<span class="br0">)</span> new-fill<span class="br0">)</span><br>      <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span><span class="kw1">aref</span> old old-fill<span class="br0">)</span> new<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>declaim <span class="br0">(</span>ftype <span class="br0">(</span><span class="kw1">function</span> <span class="br0">(</span><span class="sy0">&amp;</span>optional t<span class="br0">)</span> vector<span class="br0">)</span> make-empty-vector<span class="br0">)</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">defun</span> make-empty-vector <span class="br0">(</span><span class="sy0">&amp;</span>optional <span class="br0">(</span>element-type t<span class="br0">)</span><span class="br0">)</span><br>  <span class="br0">(</span>make-<span class="kw1">array</span> <span class="nu0">0</span> <span class="sy0">:</span><span class="me1">element-type</span> element-type <span class="sy0">:</span><span class="me1">fill-pointer</span> <span class="nu0">0</span> <span class="sy0">:</span><span class="me1">adjustable</span> t<span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br>&nbsp;<br><span class="br0">(</span>declaim <span class="br0">(</span>ftype <span class="br0">(</span><span class="kw1">function</span> <span class="br0">(</span>t <span class="sy0">&amp;</span>optional t<span class="br0">)</span> vector<span class="br0">)</span> make-vector-with-elt<span class="br0">)</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">defun</span> make-vector-with-elt <span class="br0">(</span>elt <span class="sy0">&amp;</span>optional <span class="br0">(</span>element-type t<span class="br0">)</span><span class="br0">)</span><br>  <span class="br0">(</span>make-<span class="kw1">array</span> <span class="nu0">1</span> <span class="sy0">:</span><span class="me1">element-type</span> element-type<br>                <span class="sy0">:</span><span class="me1">fill-pointer</span> <span class="nu0">1</span><br>                <span class="sy0">:</span><span class="me1">adjustable</span> t<br>                <span class="sy0">:</span><span class="me1">initial-element</span> elt<span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>declaim <span class="br0">(</span>ftype <span class="br0">(</span><span class="kw1">function</span> <span class="br0">(</span>vector t<span class="br0">)</span> vector<span class="br0">)</span> vector-append1-new<span class="br0">)</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">defun</span> vector-append1-new <span class="br0">(</span>old new<span class="br0">)</span><br>  <span class="br0">(</span>vector-append1 <span class="br0">(</span>vector-<span class="kw1">append</span> <span class="br0">(</span>make-empty-vector 'octet<span class="br0">)</span> old<span class="br0">)</span><br>                  new<span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>declaim <span class="br0">(</span>ftype <span class="br0">(</span><span class="kw1">function</span> <span class="br0">(</span>vector vector<span class="br0">)</span> vector<span class="br0">)</span> vector-append-new<span class="br0">)</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">defun</span> vector-append-new <span class="br0">(</span>old new<span class="br0">)</span><br>  <span class="br0">(</span>vector-<span class="kw1">append</span> <span class="br0">(</span>vector-<span class="kw1">append</span> <span class="br0">(</span>make-empty-vector 'octet<span class="br0">)</span> old<span class="br0">)</span><br>                 new<span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>deftype octet <span class="br0">(</span><span class="br0">)</span> '<span class="br0">(</span>unsigned-byte <span class="nu0">8</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>declaim <span class="br0">(</span>ftype <span class="br0">(</span><span class="kw1">function</span> <span class="br0">(</span><span class="br0">)</span> hash-table<span class="br0">)</span> build-dictionary<span class="br0">)</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">defun</span> build-dictionary <span class="br0">(</span><span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>dictionary <span class="br0">(</span>make-hash-table <span class="sy0">:</span><span class="me1">test</span> #'equalp<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span>loop for i below <span class="nu0">256</span><br>          <span class="kw1">do</span> <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>vec <span class="br0">(</span>make-vector-with-elt i 'octet<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>               <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span>gethash vec dictionary<span class="br0">)</span> vec<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    dictionary<span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>declaim <span class="br0">(</span>ftype <span class="br0">(</span><span class="kw1">function</span> <span class="br0">(</span><span class="br0">(</span>vector octet<span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span>vector octet<span class="br0">)</span><span class="br0">)</span><br>                lzw-compress-octets<span class="br0">)</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">defun</span> lzw-compress-octets <span class="br0">(</span>octets<span class="br0">)</span><br>  <span class="br0">(</span>declare <span class="br0">(</span>optimize <span class="br0">(</span>speed <span class="nu0">3</span><span class="br0">)</span> <span class="br0">(</span>safety <span class="nu0">0</span><span class="br0">)</span> <span class="br0">(</span>debug <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="br0">(</span>loop with dictionary-size of-type fixnum <span class="sy0">=</span> <span class="nu0">256</span><br>        with w <span class="sy0">=</span> <span class="br0">(</span>make-empty-vector 'octet<span class="br0">)</span><br>        with result <span class="sy0">=</span> <span class="br0">(</span>make-empty-vector 't<span class="br0">)</span><br>        with dictionary <span class="sy0">=</span> <span class="br0">(</span>build-dictionary<span class="br0">)</span><br>        for c across octets<br>        for wc <span class="sy0">=</span> <span class="br0">(</span>vector-append1-new w c<span class="br0">)</span><br>        <span class="kw1">if</span> <span class="br0">(</span>gethash wc dictionary<span class="br0">)</span> <span class="kw1">do</span> <span class="br0">(</span><span class="kw1">setq</span> w wc<span class="br0">)</span><br>        else <span class="kw1">do</span><br>          <span class="br0">(</span>vector-<span class="kw1">append</span> result <span class="br0">(</span>gethash w dictionary<span class="br0">)</span><span class="br0">)</span><br>          <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span>gethash wc dictionary<span class="br0">)</span><br>                <span class="br0">(</span>make-vector-with-elt dictionary-size<span class="br0">)</span><span class="br0">)</span> <br>          <span class="br0">(</span>incf dictionary-size<span class="br0">)</span><br>          <span class="br0">(</span><span class="kw1">setq</span> w <span class="br0">(</span>make-vector-with-elt c 'octet<span class="br0">)</span><span class="br0">)</span><br>        finally <span class="br0">(</span>unless <span class="br0">(</span><span class="kw1">zerop</span> <span class="br0">(</span><span class="kw1">length</span> <span class="br0">(</span>the <span class="br0">(</span>vector octet<span class="br0">)</span> w<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>                  <span class="br0">(</span>vector-<span class="kw1">append</span> result <span class="br0">(</span>gethash w dictionary<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>                <span class="br0">(</span><span class="kw1">return</span> result<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>declaim <span class="br0">(</span>ftype <span class="br0">(</span><span class="kw1">function</span> <span class="br0">(</span>vector<span class="br0">)</span> <span class="br0">(</span>vector octet<span class="br0">)</span><span class="br0">)</span> lzw-decompress<span class="br0">)</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">defun</span> #<span class="nu0">1</span><span class="sy0">=</span>lzw-decompress <span class="br0">(</span>octets<span class="br0">)</span><br>  <span class="br0">(</span>declare <span class="br0">(</span>optimize <span class="br0">(</span>speed <span class="nu0">3</span><span class="br0">)</span> <span class="br0">(</span>safety <span class="nu0">0</span><span class="br0">)</span> <span class="br0">(</span>debug <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">when</span> <span class="br0">(</span><span class="kw1">zerop</span> <span class="br0">(</span><span class="kw1">length</span> octets<span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span>return-from #<span class="nu0">1</span># <span class="br0">(</span>make-empty-vector 'octet<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="br0">(</span>loop with dictionary-size <span class="sy0">=</span> <span class="nu0">256</span><br>        with dictionary <span class="sy0">=</span> <span class="br0">(</span>build-dictionary<span class="br0">)</span><br>        with result <span class="sy0">=</span> <span class="br0">(</span>make-vector-with-elt <span class="br0">(</span><span class="kw1">aref</span> octets <span class="nu0">0</span><span class="br0">)</span> 'octet<span class="br0">)</span><br>        with w <span class="sy0">=</span> <span class="br0">(</span>copy-seq result<span class="br0">)</span><br>        for i from <span class="nu0">1</span> below <span class="br0">(</span><span class="kw1">length</span> octets<span class="br0">)</span><br>        for k <span class="sy0">=</span> <span class="br0">(</span>make-vector-with-elt <span class="br0">(</span><span class="kw1">aref</span> octets i<span class="br0">)</span> 't<span class="br0">)</span><br>        for entry <span class="sy0">=</span> <span class="br0">(</span><span class="kw1">or</span> <span class="br0">(</span>gethash k dictionary<span class="br0">)</span><br>                        <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>equalp k dictionary-size<span class="br0">)</span><br>                            <span class="br0">(</span>coerce <span class="br0">(</span><span class="kw1">list</span> w <span class="br0">(</span><span class="kw1">aref</span> w <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span> '<span class="br0">(</span>vector octet<span class="br0">)</span><span class="br0">)</span><br>                            <span class="br0">(</span><span class="kw1">error</span> <span class="st0">"bad compresed entry at pos ~S"</span> i<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="kw1">do</span> <span class="br0">(</span>vector-<span class="kw1">append</span> result entry<span class="br0">)</span><br>           <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span>gethash <span class="br0">(</span>make-vector-with-elt dictionary-size<span class="br0">)</span> dictionary<span class="br0">)</span><br>                 <span class="br0">(</span>vector-append1-new w <span class="br0">(</span><span class="kw1">aref</span> entry <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>           <span class="br0">(</span>incf dictionary-size<span class="br0">)</span><br>           <span class="br0">(</span><span class="kw1">setq</span> w entry<span class="br0">)</span><br>        finally <span class="br0">(</span><span class="kw1">return</span> result<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>defgeneric lzw-compress <span class="br0">(</span>datum<span class="br0">)</span><br>  <span class="br0">(</span><span class="sy0">:</span><span class="me1">method</span> <span class="br0">(</span><span class="br0">(</span>string string<span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span>lzw-compress <span class="br0">(</span>babel<span class="sy0">:</span><span class="me1">string-to-octets</span> string<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="br0">(</span><span class="sy0">:</span><span class="me1">method</span> <span class="br0">(</span><span class="br0">(</span>octets vector<span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span>lzw-compress-octets octets<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defun</span> lzw-decompress-to-string <span class="br0">(</span>octets<span class="br0">)</span><br>  <span class="br0">(</span>babel<span class="sy0">:</span><span class="me1">octets-to-string</span> <span class="br0">(</span>lzw-decompress octets<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defun</span> test <span class="br0">(</span>string<span class="br0">)</span><br>  <span class="br0">(</span>assert <span class="br0">(</span><span class="kw1">equal</span> #<span class="nu0">2</span><span class="sy0">=</span><span class="br0">(</span>lzw-decompress-to-string <span class="br0">(</span>lzw-compress string<span class="br0">)</span><span class="br0">)</span> string<span class="br0">)</span> <span class="br0">(</span><span class="br0">)</span><br>          <span class="st0">"Can't compress ~S properly, got ~S instead"</span> string #<span class="nu0">2</span>#<span class="br0">)</span><br>  t<span class="br0">)</span></pre>
<p>And the format used:
</p>
<pre class="lisp highlighted_source">CL-USER<span class="sy0">&gt;</span> <span class="br0">(</span>test <span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><span class="br0">)</span><br>T<br>CL-USER<span class="sy0">&gt;</span> <span class="br0">(</span>lzw-compress <span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><span class="br0">)</span><br>#<span class="br0">(</span><span class="nu0">84</span> <span class="nu0">79</span> <span class="nu0">66</span> <span class="nu0">69</span> <span class="nu0">79</span> <span class="nu0">82</span> <span class="nu0">78</span> <span class="nu0">79</span> <span class="nu0">84</span> <span class="nu0">256</span> <span class="nu0">258</span> <span class="nu0">260</span> <span class="nu0">265</span> <span class="nu0">259</span> <span class="nu0">261</span> <span class="nu0">263</span><span class="br0">)</span><br>CL-USER<span class="sy0">&gt;</span> <span class="br0">(</span>lzw-decompress-to-string *<span class="br0">)</span><br><span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=6" title="Edit section: C++">edit</a>]</span> <span class="mw-headline" id="C.2B.2B"><a href="http://rosettacode.org/wiki/Category:C%2B%2B" title="Category:C++">C++</a></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/LZW_compression#D" title="LZW compression">D</a></div>
<pre class="cpp highlighted_source"><span class="co2">#include &lt;string&gt;</span><br><span class="co2">#include &lt;map&gt;</span><br>&nbsp;<br><span class="co1">// Compress a string to a list of output symbols.</span><br><span class="co1">// The result will be written to the output iterator</span><br><span class="co1">// starting at "result"; the final iterator is returned.</span><br><span class="kw2">template</span> <span class="sy1">&lt;</span><span class="kw2">typename</span> Iterator<span class="sy1">&gt;</span><br>Iterator compress<span class="br0">(</span><span class="kw4">const</span> std<span class="sy4">::</span><span class="me2">string</span> <span class="sy3">&amp;</span>uncompressed, Iterator result<span class="br0">)</span> <span class="br0">{</span><br>  <span class="co1">// Build the dictionary.</span><br>  <span class="kw4">int</span> dictSize <span class="sy1">=</span> <span class="nu0">256</span><span class="sy4">;</span><br>  std<span class="sy4">::</span><span class="me2">map</span><span class="sy1">&lt;</span>std<span class="sy4">::</span><span class="me2">string</span>,<span class="kw4">int</span><span class="sy1">&gt;</span> dictionary<span class="sy4">;</span><br>  <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> <span class="nu0">256</span><span class="sy4">;</span> i<span class="sy2">++</span><span class="br0">)</span><br>    dictionary<span class="br0">[</span>std<span class="sy4">::</span><span class="me2">string</span><span class="br0">(</span><span class="nu0">1</span>, i<span class="br0">)</span><span class="br0">]</span> <span class="sy1">=</span> i<span class="sy4">;</span><br>&nbsp;<br>  std<span class="sy4">::</span><span class="me2">string</span> w<span class="sy4">;</span><br>  <span class="kw1">for</span> <span class="br0">(</span>std<span class="sy4">::</span><span class="me2">string</span><span class="sy4">::</span><span class="me2">const_iterator</span> it <span class="sy1">=</span> uncompressed.<span class="me1">begin</span><span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span><br>       it <span class="sy3">!</span><span class="sy1">=</span> uncompressed.<span class="me1">end</span><span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span> <span class="sy2">++</span>it<span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw4">char</span> c <span class="sy1">=</span> <span class="sy2">*</span>it<span class="sy4">;</span><br>    std<span class="sy4">::</span><span class="me2">string</span> wc <span class="sy1">=</span> w <span class="sy2">+</span> c<span class="sy4">;</span><br>    <span class="kw1">if</span> <span class="br0">(</span>dictionary.<span class="me1">count</span><span class="br0">(</span>wc<span class="br0">)</span><span class="br0">)</span><br>      w <span class="sy1">=</span> wc<span class="sy4">;</span><br>    <span class="kw1">else</span> <span class="br0">{</span><br>      <span class="sy2">*</span>result<span class="sy2">++</span> <span class="sy1">=</span> dictionary<span class="br0">[</span>w<span class="br0">]</span><span class="sy4">;</span><br>      <span class="co1">// Add wc to the dictionary.</span><br>      dictionary<span class="br0">[</span>wc<span class="br0">]</span> <span class="sy1">=</span> dictSize<span class="sy2">++</span><span class="sy4">;</span><br>      w <span class="sy1">=</span> std<span class="sy4">::</span><span class="me2">string</span><span class="br0">(</span><span class="nu0">1</span>, c<span class="br0">)</span><span class="sy4">;</span><br>    <span class="br0">}</span><br>  <span class="br0">}</span><br>&nbsp;<br>  <span class="co1">// Output the code for w.</span><br>  <span class="kw1">if</span> <span class="br0">(</span><span class="sy3">!</span>w.<span class="me1">empty</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="sy2">*</span>result<span class="sy2">++</span> <span class="sy1">=</span> dictionary<span class="br0">[</span>w<span class="br0">]</span><span class="sy4">;</span><br>  <span class="kw1">return</span> result<span class="sy4">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="co1">// Decompress a list of output ks to a string.</span><br><span class="co1">// "begin" and "end" must form a valid range of ints</span><br><span class="kw2">template</span> <span class="sy1">&lt;</span><span class="kw2">typename</span> Iterator<span class="sy1">&gt;</span><br>std<span class="sy4">::</span><span class="me2">string</span> decompress<span class="br0">(</span>Iterator begin, Iterator end<span class="br0">)</span> <span class="br0">{</span><br>  <span class="co1">// Build the dictionary.</span><br>  <span class="kw4">int</span> dictSize <span class="sy1">=</span> <span class="nu0">256</span><span class="sy4">;</span><br>  std<span class="sy4">::</span><span class="me2">map</span><span class="sy1">&lt;</span><span class="kw4">int</span>,std<span class="sy4">::</span><span class="me2">string</span><span class="sy1">&gt;</span> dictionary<span class="sy4">;</span><br>  <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> <span class="nu0">256</span><span class="sy4">;</span> i<span class="sy2">++</span><span class="br0">)</span><br>    dictionary<span class="br0">[</span>i<span class="br0">]</span> <span class="sy1">=</span> std<span class="sy4">::</span><span class="me2">string</span><span class="br0">(</span><span class="nu0">1</span>, i<span class="br0">)</span><span class="sy4">;</span><br>&nbsp;<br>  std<span class="sy4">::</span><span class="me2">string</span> w<span class="br0">(</span><span class="nu0">1</span>, <span class="sy2">*</span>begin<span class="sy2">++</span><span class="br0">)</span><span class="sy4">;</span><br>  std<span class="sy4">::</span><span class="me2">string</span> result <span class="sy1">=</span> w<span class="sy4">;</span><br>  std<span class="sy4">::</span><span class="me2">string</span> entry<span class="sy4">;</span><br>  <span class="kw1">for</span> <span class="br0">(</span> <span class="sy4">;</span> begin <span class="sy3">!</span><span class="sy1">=</span> end<span class="sy4">;</span> begin<span class="sy2">++</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw4">int</span> k <span class="sy1">=</span> <span class="sy2">*</span>begin<span class="sy4">;</span><br>    <span class="kw1">if</span> <span class="br0">(</span>dictionary.<span class="me1">count</span><span class="br0">(</span>k<span class="br0">)</span><span class="br0">)</span><br>      entry <span class="sy1">=</span> dictionary<span class="br0">[</span>k<span class="br0">]</span><span class="sy4">;</span><br>    <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span>k <span class="sy1">==</span> dictSize<span class="br0">)</span><br>      entry <span class="sy1">=</span> w <span class="sy2">+</span> w<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="sy4">;</span><br>    <span class="kw1">else</span><br>      <span class="kw1">throw</span> <span class="st0">"Bad compressed k"</span><span class="sy4">;</span><br>&nbsp;<br>    result <span class="sy2">+</span><span class="sy1">=</span> entry<span class="sy4">;</span><br>&nbsp;<br>    <span class="co1">// Add w+entry[0] to the dictionary.</span><br>    dictionary<span class="br0">[</span>dictSize<span class="sy2">++</span><span class="br0">]</span> <span class="sy1">=</span> w <span class="sy2">+</span> entry<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="sy4">;</span><br>&nbsp;<br>    w <span class="sy1">=</span> entry<span class="sy4">;</span><br>  <span class="br0">}</span><br>  <span class="kw1">return</span> result<span class="sy4">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="co2">#include &lt;iostream&gt;</span><br><span class="co2">#include &lt;iterator&gt;</span><br><span class="co2">#include &lt;vector&gt;</span><br>&nbsp;<br><span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>  std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> compressed<span class="sy4">;</span><br>  compress<span class="br0">(</span><span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span>, std<span class="sy4">::</span><span class="me2">back_inserter</span><span class="br0">(</span>compressed<span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span><br>  copy<span class="br0">(</span>compressed.<span class="me1">begin</span><span class="br0">(</span><span class="br0">)</span>, compressed.<span class="me1">end</span><span class="br0">(</span><span class="br0">)</span>, std<span class="sy4">::</span><span class="me2">ostream_iterator</span><span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="br0">(</span>std<span class="sy4">::</span><span class="kw3">cout</span>, <span class="st0">", "</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span><br>  std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span><br>  std<span class="sy4">::</span><span class="me2">string</span> decompressed <span class="sy1">=</span> decompress<span class="br0">(</span>compressed.<span class="me1">begin</span><span class="br0">(</span><span class="br0">)</span>, compressed.<span class="me1">end</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span><br>  std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> decompressed <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span><br>&nbsp;<br>  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span><br><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=7" title="Edit section: C#">edit</a>]</span> <span class="mw-headline" id="C.23"><span id="C_sharp"><a href="http://rosettacode.org/wiki/Category:C_sharp" title="Category:C sharp">C#</a></span></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/LZW_compression#Java" title="LZW compression">Java</a></div>
<pre class="c highlighted_source">using System<span class="sy0">;</span><br>using System.<span class="me1">Collections</span>.<span class="me1">Generic</span><span class="sy0">;</span><br>using System.<span class="me1">Text</span><span class="sy0">;</span><br>&nbsp;<br>namespace LZW<br><span class="br0">{</span><br>    public class Program<br>    <span class="br0">{</span><br>        public <span class="kw4">static</span> <span class="kw4">void</span> Main<span class="br0">(</span>string<span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span><br>        <span class="br0">{</span><br>            List<span class="sy0">&lt;</span>int<span class="sy0">&gt;</span> compressed <span class="sy0">=</span> Compress<span class="br0">(</span><span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><span class="br0">)</span><span class="sy0">;</span><br>            Console.<span class="me1">WriteLine</span><span class="br0">(</span>string.<span class="me1">Join</span><span class="br0">(</span><span class="st0">", "</span><span class="sy0">,</span> compressed<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>            string decompressed <span class="sy0">=</span> Decompress<span class="br0">(</span>compressed<span class="br0">)</span><span class="sy0">;</span><br>            Console.<span class="me1">WriteLine</span><span class="br0">(</span>decompressed<span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        public <span class="kw4">static</span> List<span class="sy0">&lt;</span>int<span class="sy0">&gt;</span> Compress<span class="br0">(</span>string uncompressed<span class="br0">)</span><br>        <span class="br0">{</span><br>            <span class="co1">// build the dictionary</span><br>            Dictionary<span class="sy0">&lt;</span>string<span class="sy0">,</span> int<span class="sy0">&gt;</span> dictionary <span class="sy0">=</span> new Dictionary<span class="sy0">&lt;</span>string<span class="sy0">,</span> int<span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">256</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span><br>                dictionary.<span class="me1">Add</span><span class="br0">(</span><span class="br0">(</span><span class="br0">(</span><span class="kw4">char</span><span class="br0">)</span>i<span class="br0">)</span>.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">,</span> i<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>            string w <span class="sy0">=</span> string.<span class="me1">Empty</span><span class="sy0">;</span><br>            List<span class="sy0">&lt;</span>int<span class="sy0">&gt;</span> compressed <span class="sy0">=</span> new List<span class="sy0">&lt;</span>int<span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>            foreach <span class="br0">(</span><span class="kw4">char</span> c in uncompressed<span class="br0">)</span><br>            <span class="br0">{</span><br>                string wc <span class="sy0">=</span> w <span class="sy0">+</span> c<span class="sy0">;</span><br>                <span class="kw1">if</span> <span class="br0">(</span>dictionary.<span class="me1">ContainsKey</span><span class="br0">(</span>wc<span class="br0">)</span><span class="br0">)</span><br>                <span class="br0">{</span><br>                    w <span class="sy0">=</span> wc<span class="sy0">;</span><br>                <span class="br0">}</span><br>                <span class="kw1">else</span><br>                <span class="br0">{</span><br>                    <span class="co1">// write w to output</span><br>                    compressed.<span class="me1">Add</span><span class="br0">(</span>dictionary<span class="br0">[</span>w<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>                    <span class="co1">// wc is a new sequence; add it to the dictionary</span><br>                    dictionary.<span class="me1">Add</span><span class="br0">(</span>wc<span class="sy0">,</span> dictionary.<span class="me1">Count</span><span class="br0">)</span><span class="sy0">;</span><br>                    w <span class="sy0">=</span> c.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>                <span class="br0">}</span><br>            <span class="br0">}</span><br>&nbsp;<br>            <span class="co1">// write remaining output if necessary</span><br>            <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>string.<span class="me1">IsNullOrEmpty</span><span class="br0">(</span>w<span class="br0">)</span><span class="br0">)</span><br>                compressed.<span class="me1">Add</span><span class="br0">(</span>dictionary<span class="br0">[</span>w<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>            <span class="kw1">return</span> compressed<span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        public <span class="kw4">static</span> string Decompress<span class="br0">(</span>List<span class="sy0">&lt;</span>int<span class="sy0">&gt;</span> compressed<span class="br0">)</span><br>        <span class="br0">{</span><br>            <span class="co1">// build the dictionary</span><br>            Dictionary<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">,</span> string<span class="sy0">&gt;</span> dictionary <span class="sy0">=</span> new Dictionary<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">,</span> string<span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">256</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span><br>                dictionary.<span class="me1">Add</span><span class="br0">(</span>i<span class="sy0">,</span> <span class="br0">(</span><span class="br0">(</span><span class="kw4">char</span><span class="br0">)</span>i<span class="br0">)</span>.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>            string w <span class="sy0">=</span> dictionary<span class="br0">[</span>compressed<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">]</span><span class="sy0">;</span><br>            compressed.<span class="me1">RemoveAt</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span><br>            StringBuilder decompressed <span class="sy0">=</span> new StringBuilder<span class="br0">(</span>w<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>            foreach <span class="br0">(</span><span class="kw4">int</span> k in compressed<span class="br0">)</span><br>            <span class="br0">{</span><br>                string entry <span class="sy0">=</span> <span class="kw2">null</span><span class="sy0">;</span><br>                <span class="kw1">if</span> <span class="br0">(</span>dictionary.<span class="me1">ContainsKey</span><span class="br0">(</span>k<span class="br0">)</span><span class="br0">)</span><br>                    entry <span class="sy0">=</span> dictionary<span class="br0">[</span>k<span class="br0">]</span><span class="sy0">;</span><br>                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span>k <span class="sy0">==</span> dictionary.<span class="me1">Count</span><span class="br0">)</span><br>                    entry <span class="sy0">=</span> w <span class="sy0">+</span> w<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="sy0">;</span><br>&nbsp;<br>                decompressed.<span class="me1">Append</span><span class="br0">(</span>entry<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>                <span class="co1">// new sequence; add it to the dictionary</span><br>                dictionary.<span class="me1">Add</span><span class="br0">(</span>dictionary.<span class="me1">Count</span><span class="sy0">,</span> w <span class="sy0">+</span> entry<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>                w <span class="sy0">=</span> entry<span class="sy0">;</span><br>            <span class="br0">}</span><br>&nbsp;<br>            <span class="kw1">return</span> decompressed.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>    <span class="br0">}</span><br><span class="br0">}</span></pre>
<p>Output:
</p>
<pre>84, 79, 66, 69, 79, 82, 78, 79, 84, 256, 258, 260, 265, 259, 261, 263
TOBEORNOTTOBEORTOBEORNOT</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=8" title="Edit section: Clojure">edit</a>]</span> <span class="mw-headline" id="Clojure"><a href="http://rosettacode.org/wiki/Category:Clojure" title="Category:Clojure">Clojure</a></span></h2>
<pre class="lisp highlighted_source"><span class="br0">(</span>defn make-dict <span class="br0">[</span><span class="br0">]</span><br>  <span class="br0">(</span><span class="kw1">let</span> <span class="br0">[</span>vals <span class="br0">(</span>range <span class="nu0">0</span> <span class="nu0">256</span><span class="br0">)</span><span class="br0">]</span><br>    <span class="br0">(</span>zipmap <span class="br0">(</span>map <span class="br0">(</span>comp #'<span class="kw1">list</span> #'char<span class="br0">)</span> vals<span class="br0">)</span> vals<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>defn compress <span class="br0">[</span>#<span class="sy0">^</span>String text<span class="br0">]</span><br>  <span class="br0">(</span>loop <span class="br0">[</span>t <span class="br0">(</span>seq text<span class="br0">)</span><br>         r '<span class="br0">(</span><span class="br0">)</span><br>         w '<span class="br0">(</span><span class="br0">)</span><br>         dict <span class="br0">(</span>make-dict<span class="br0">)</span><br>         s <span class="nu0">256</span><span class="br0">]</span><br>    <span class="br0">(</span><span class="kw1">let</span> <span class="br0">[</span>c <span class="br0">(</span>first t<span class="br0">)</span><span class="br0">]</span><br>      <span class="br0">(</span><span class="kw1">if</span> c<br>        <span class="br0">(</span><span class="kw1">let</span> <span class="br0">[</span>wc <span class="br0">(</span><span class="kw1">cons</span> c w<span class="br0">)</span><span class="br0">]</span><br>          <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">get</span> dict wc<span class="br0">)</span><br>            <span class="br0">(</span>recur <span class="br0">(</span>rest t<span class="br0">)</span> r wc dict s<span class="br0">)</span><br>            <span class="br0">(</span>recur <span class="br0">(</span>rest t<span class="br0">)</span> <span class="br0">(</span><span class="kw1">cons</span> <span class="br0">(</span><span class="kw1">get</span> dict w<span class="br0">)</span> r<span class="br0">)</span> <span class="br0">(</span><span class="kw1">list</span> c<span class="br0">)</span> <span class="br0">(</span><span class="kw1">assoc</span> dict wc s<span class="br0">)</span> <span class="br0">(</span>inc s<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="br0">(</span><span class="kw1">reverse</span> <span class="br0">(</span><span class="kw1">if</span> w <span class="br0">(</span><span class="kw1">cons</span> <span class="br0">(</span><span class="kw1">get</span> dict w<span class="br0">)</span> r<span class="br0">)</span> r<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>compress <span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><span class="br0">)</span></pre>
<p>The output:
</p>
<pre class="lisp highlighted_source"><span class="br0">(</span><span class="nu0">84</span> <span class="nu0">79</span> <span class="nu0">66</span> <span class="nu0">69</span> <span class="nu0">79</span> <span class="nu0">82</span> <span class="nu0">78</span> <span class="nu0">79</span> <span class="nu0">84</span> <span class="nu0">256</span> <span class="nu0">258</span> <span class="nu0">260</span> <span class="nu0">265</span> <span class="nu0">259</span> <span class="nu0">261</span> <span class="nu0">263</span><span class="br0">)</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=9" title="Edit section: D">edit</a>]</span> <span class="mw-headline" id="D"><a href="http://rosettacode.org/wiki/Category:D" title="Category:D">D</a></span></h2>
<pre class="d highlighted_source"><span class="kw2">import</span> std.<span class="me1">stdio</span><span class="sy0">,</span> std.<span class="me1">array</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw4">auto</span> compress<span class="br0">(</span><span class="kw4">string</span> original<span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw4">int</span><span class="br0">[</span><span class="kw4">string</span><span class="br0">]</span> dict<span class="sy0">;</span><br>    <span class="kw1">foreach</span> <span class="br0">(</span>b<span class="sy0">;</span> <span class="nu0">0</span> <span class="sy0">..</span> <span class="nu0">256</span><span class="br0">)</span><br>        dict<span class="br0">[</span><span class="br0">[</span><span class="kw2">cast</span><span class="br0">(</span><span class="kw4">immutable</span> <span class="kw4">char</span><span class="br0">)</span>b<span class="br0">]</span><span class="br0">]</span> <span class="sy0">=</span> b<span class="sy0">;</span><br>&nbsp;<br>    <span class="kw4">string</span> w<span class="sy0">;</span><br>    <span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> result<span class="sy0">;</span><br>    <span class="kw1">foreach</span> <span class="br0">(</span>ch<span class="sy0">;</span> original<span class="br0">)</span><br>        <span class="kw1">if</span> <span class="br0">(</span>w <span class="sy0">~</span> ch <span class="kw2">in</span> dict<span class="br0">)</span><br>            w <span class="sy0">=</span> w <span class="sy0">~</span> ch<span class="sy0">;</span><br>        <span class="kw1">else</span> <span class="br0">{</span><br>            result <span class="sy0">~=</span> dict<span class="br0">[</span>w<span class="br0">]</span><span class="sy0">;</span><br>            dict<span class="br0">[</span>w <span class="sy0">~</span> ch<span class="br0">]</span> <span class="sy0">=</span> dict.<span class="me1">length</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span><br>            w <span class="sy0">=</span> <span class="br0">[</span>ch<span class="br0">]</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>    <span class="kw1">return</span> w.<span class="me1">empty</span> <span class="sy0">?</span> result <span class="sy0">:</span> <span class="br0">(</span>result <span class="sy0">~</span> dict<span class="br0">[</span>w<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">auto</span> decompress<span class="br0">(</span><span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> compressed<span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw4">auto</span> dict <span class="sy0">=</span> <span class="kw2">new</span> <span class="kw4">string</span><span class="br0">[</span><span class="nu0">256</span><span class="br0">]</span><span class="sy0">;</span><br>    <span class="kw1">foreach</span> <span class="br0">(</span>b<span class="sy0">;</span> <span class="nu0">0</span> <span class="sy0">..</span> <span class="nu0">256</span><span class="br0">)</span><br>        dict<span class="br0">[</span>b<span class="br0">]</span> <span class="sy0">=</span> <span class="br0">[</span><span class="kw2">cast</span><span class="br0">(</span><span class="kw4">char</span><span class="br0">)</span>b<span class="br0">]</span><span class="sy0">;</span><br>&nbsp;<br>    <span class="kw4">auto</span> w <span class="sy0">=</span> dict<span class="br0">[</span>compressed<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">]</span><span class="sy0">;</span><br>    <span class="kw4">auto</span> result <span class="sy0">=</span> w<span class="sy0">;</span><br>    <span class="kw1">foreach</span> <span class="br0">(</span>k<span class="sy0">;</span> compressed<span class="br0">[</span><span class="nu0">1</span> <span class="sy0">..</span> $<span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw4">auto</span> entry <span class="sy0">=</span> <span class="br0">(</span>k <span class="sy0">&lt;</span> dict.<span class="me1">length</span><span class="br0">)</span> <span class="sy0">?</span> dict<span class="br0">[</span>k<span class="br0">]</span> <span class="sy0">:</span> w <span class="sy0">~</span> w<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="sy0">;</span><br>        result <span class="sy0">~=</span> entry<span class="sy0">;</span><br>        dict <span class="sy0">~=</span> w <span class="sy0">~</span> entry<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="sy0">;</span><br>        w <span class="sy0">=</span> entry<span class="sy0">;</span><br>    <span class="br0">}</span><br>    <span class="kw1">return</span> result<span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw4">auto</span> comp <span class="sy0">=</span> compress<span class="br0">(</span><span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><span class="br0">)</span><span class="sy0">;</span><br>    writeln<span class="br0">(</span>comp<span class="sy0">,</span> <span class="st0">"<span class="es1">\n</span>"</span><span class="sy0">,</span> decompress<span class="br0">(</span>comp<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<div>
<dl><dt>Output:</dt></dl></div>

<pre>[84, 79, 66, 69, 79, 82, 78, 79, 84, 256, 258, 260, 265, 259, 261, 263]
TOBEORNOTTOBEORTOBEORNOT</pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=10" title="Edit section: Alternative Version">edit</a>]</span> <span class="mw-headline" id="Alternative_Version">Alternative Version</span></h3>
<p>This longer version is more efficient and it uses stronger static typing.
</p>
<pre class="d highlighted_source"><span class="kw2">import</span> std.<span class="me1">array</span><span class="sy0">:</span> empty<span class="sy0">;</span><br>&nbsp;<br><span class="kw4">struct</span> LZW <span class="br0">{</span><br>    <span class="co1">// T is ubyte instead of char because D strings are UTF-8.</span><br>    <span class="kw2">alias</span> T <span class="sy0">=</span> <span class="kw4">ubyte</span><span class="sy0">;</span><br>    <span class="kw2">alias</span> Tcomp <span class="sy0">=</span> <span class="kw4">ushort</span><span class="sy0">;</span><br>    <span class="kw4">static</span> <span class="kw2">assert</span><span class="br0">(</span>Tcomp.<span class="me1">sizeof</span> <span class="sy0">&gt;</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="kw2">alias</span> Ta <span class="sy0">=</span> <span class="kw4">immutable</span><span class="br0">(</span>T<span class="br0">)</span><span class="br0">[</span><span class="br0">]</span><span class="sy0">;</span><br>&nbsp;<br>    <span class="kw4">enum</span> <span class="kw4">int</span> initDictSize <span class="sy0">=</span> <span class="nu0">256</span><span class="sy0">;</span><br>    <span class="kw4">static</span> <span class="kw4">immutable</span> <span class="kw4">ubyte</span><span class="br0">[</span>initDictSize<span class="br0">]</span> bytes<span class="sy0">;</span><br>    <span class="kw4">static</span> <span class="kw2">this</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">immutable</span> i<span class="sy0">;</span> <span class="nu0">0</span> <span class="sy0">..</span> <span class="me1">initDictSize</span><span class="br0">)</span><br>            bytes<span class="br0">[</span>i<span class="br0">]</span> <span class="sy0">=</span> <span class="kw2">cast</span><span class="br0">(</span>T<span class="br0">)</span>i<span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="co1">//static Tcomp[] compress(in T[] original)</span><br>    <span class="kw4">static</span> Tcomp<span class="br0">[</span><span class="br0">]</span> compress<span class="br0">(</span><span class="kw4">immutable</span> <span class="kw2">scope</span> T<span class="br0">[</span><span class="br0">]</span> original<span class="br0">)</span><br>    <span class="coMULTI">/*pure nothrow*/</span> <span class="kw2">out</span><span class="br0">(</span>result<span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>original.<span class="me1">empty</span><span class="br0">)</span><br>            <span class="kw2">assert</span><span class="br0">(</span>result<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">&lt;</span> initDictSize<span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span> <span class="kw2">body</span> <span class="br0">{</span><br>        <span class="kw1">if</span> <span class="br0">(</span>original.<span class="me1">empty</span><span class="br0">)</span><br>            <span class="kw1">return</span> <span class="br0">[</span><span class="br0">]</span><span class="sy0">;</span><br>        Tcomp<span class="br0">[</span>Ta<span class="br0">]</span> dict<span class="sy0">;</span><br>        <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">immutable</span> b<span class="sy0">;</span> bytes<span class="br0">)</span><br>            dict<span class="br0">[</span><span class="br0">[</span>b<span class="br0">]</span><span class="br0">]</span> <span class="sy0">=</span> b<span class="sy0">;</span><br>&nbsp;<br>        <span class="co1">// In this algorithm regular slices give lower efficiency.</span><br>        <span class="kw4">struct</span> Slice <span class="br0">{</span><br>            <span class="kw4">size_t</span> start<span class="sy0">,</span> end<span class="sy0">;</span><br>            <span class="kw4">@property</span> opSlice<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span> <span class="br0">{</span><br>                <span class="kw1">return</span> original<span class="br0">[</span>start <span class="sy0">..</span> <span class="me1">end</span><span class="br0">]</span><span class="sy0">;</span><br>            <span class="br0">}</span><br>            <span class="kw2">alias</span> <span class="kw2">this</span> <span class="sy0">=</span> opSlice<span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        Slice w<span class="sy0">;</span><br>        Tcomp<span class="br0">[</span><span class="br0">]</span> result<span class="sy0">;</span><br>        <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">immutable</span> i<span class="sy0">;</span> <span class="nu0">0</span> <span class="sy0">..</span> <span class="me1">original</span>.<span class="me1">length</span><span class="br0">)</span> <span class="br0">{</span><br>            <span class="kw4">auto</span> wc <span class="sy0">=</span> Slice<span class="br0">(</span>w.<span class="me1">start</span><span class="sy0">,</span> w.<span class="me1">end</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="kw1">if</span> <span class="br0">(</span>wc <span class="kw2">in</span> dict<span class="br0">)</span> <span class="br0">{</span><br>                w <span class="sy0">=</span> wc<span class="sy0">;</span><br>            <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>                result <span class="sy0">~=</span> dict<span class="br0">[</span>w<span class="br0">]</span><span class="sy0">;</span><br>                <span class="co1">// AA.length is not pure nor nothrow.</span><br>                <span class="co1">//assert(dict.length &lt;= Tcomp.max);</span><br>                <span class="co1">//dict[wc] = cast(Tcomp)dict.length;</span><br>                <span class="kw2">assert</span><span class="br0">(</span>dict.<span class="me1">length</span> <span class="sy0">&lt;</span> Tcomp.<span class="me1">max</span><span class="br0">)</span><span class="sy0">;</span> <span class="co1">// Overflow guard.</span><br>                dict<span class="br0">[</span>wc<span class="br0">]</span> <span class="sy0">=</span> <span class="kw2">cast</span><span class="br0">(</span>Tcomp<span class="br0">)</span><span class="br0">(</span>dict.<span class="me1">length</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br>                w <span class="sy0">=</span> Slice<span class="br0">(</span>i<span class="sy0">,</span> i <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="br0">}</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>w.<span class="me1">empty</span><span class="br0">)</span><br>            result <span class="sy0">~=</span> dict<span class="br0">[</span>w<span class="br0">]</span><span class="sy0">;</span><br>        <span class="kw1">return</span> result<span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw4">static</span> Ta decompress<span class="br0">(</span><span class="kw2">in</span> Tcomp<span class="br0">[</span><span class="br0">]</span> compressed<span class="br0">)</span> <span class="kw4">pure</span><br>    <span class="kw2">in</span> <span class="br0">{</span><br>        <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>compressed.<span class="me1">empty</span><span class="br0">)</span><br>            <span class="kw2">assert</span><span class="br0">(</span>compressed<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">&lt;</span> initDictSize<span class="sy0">,</span> <span class="st0">"Bad compressed"</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span> <span class="kw2">body</span> <span class="br0">{</span><br>        <span class="kw1">if</span> <span class="br0">(</span>compressed.<span class="me1">empty</span><span class="br0">)</span><br>            <span class="kw1">return</span> <span class="br0">[</span><span class="br0">]</span><span class="sy0">;</span><br>&nbsp;<br>        <span class="kw4">auto</span> dict <span class="sy0">=</span> <span class="kw2">new</span> Ta<span class="br0">[</span>initDictSize<span class="br0">]</span><span class="sy0">;</span><br>        <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">immutable</span> b<span class="sy0">;</span> bytes<span class="br0">)</span><br>            dict<span class="br0">[</span>b<span class="br0">]</span> <span class="sy0">=</span> <span class="br0">[</span>b<span class="br0">]</span><span class="sy0">;</span><br>&nbsp;<br>        <span class="kw4">auto</span> w <span class="sy0">=</span> dict<span class="br0">[</span>compressed<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">]</span><span class="sy0">;</span><br>        <span class="kw4">auto</span> result <span class="sy0">=</span> w<span class="sy0">;</span><br>        <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">immutable</span> k<span class="sy0">;</span> compressed<span class="br0">[</span><span class="nu0">1</span> <span class="sy0">..</span> $<span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span><br>            Ta entry<span class="sy0">;</span><br>            <span class="kw1">if</span> <span class="br0">(</span>k <span class="sy0">&lt;</span> dict.<span class="me1">length</span><span class="br0">)</span><br>                entry <span class="sy0">=</span> dict<span class="br0">[</span>k<span class="br0">]</span><span class="sy0">;</span><br>            <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span>k <span class="sy0">==</span> dict.<span class="me1">length</span><span class="br0">)</span><br>                entry <span class="sy0">=</span> w <span class="sy0">~</span> w<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="sy0">;</span><br>            <span class="kw1">else</span><br>                <span class="kw2">throw</span> <span class="kw2">new</span> <span class="kw3">Exception</span><span class="br0">(</span><span class="st0">"Bad compressed k."</span><span class="br0">)</span><span class="sy0">;</span><br>            result <span class="sy0">~=</span> entry<span class="sy0">;</span><br>&nbsp;<br>            dict <span class="sy0">~=</span> w <span class="sy0">~</span> entry<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="sy0">;</span><br>            w <span class="sy0">=</span> entry<span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="kw1">return</span> result<span class="sy0">;</span><br>    <span class="br0">}</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw2">import</span> std.<span class="me1">stdio</span><span class="sy0">;</span><br>    <span class="kw4">immutable</span> txt <span class="sy0">=</span> <span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><span class="sy0">;</span><br>    <span class="coMULTI">/*immutable*/</span> <span class="kw4">const</span> compressed <span class="sy0">=</span> LZW.<span class="me1">compress</span><span class="br0">(</span><span class="kw2">cast</span><span class="br0">(</span>LZW.<span class="me1">Ta</span><span class="br0">)</span>txt<span class="br0">)</span><span class="sy0">;</span><br>    writeln<span class="br0">(</span>compressed<span class="br0">)</span><span class="sy0">;</span><br>    <span class="kw4">immutable</span> decompressed <span class="sy0">=</span> LZW.<span class="me1">decompress</span><span class="br0">(</span>compressed<span class="br0">)</span><span class="sy0">;</span><br>    writeln<span class="br0">(</span><span class="kw2">cast</span><span class="br0">(</span><span class="kw4">string</span><span class="br0">)</span>decompressed<span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<div>
<dl><dt>Output:</dt></dl></div>

<pre>[84, 79, 66, 69, 79, 82, 78, 79, 84, 256, 258, 260, 265, 259, 261, 263]
TOBEORNOTTOBEORTOBEORNOT</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=11" title="Edit section: Dylan">edit</a>]</span> <span class="mw-headline" id="Dylan"><a href="http://rosettacode.org/wiki/Category:Dylan" title="Category:Dylan">Dylan</a></span></h2>
<pre class="text highlighted_source">Module:   LZW<br>Synopsis: LZW implementation for Rosetta code<br>&nbsp;<br>define method output(n&nbsp;:: &lt;integer&gt;)<br>  format-out("%d ", n);<br>end;<br>&nbsp;<br>define method contains?(dict, var)<br>  let x = element(dict, var, default: #f);<br>  x ~= #f;<br>end;<br>&nbsp;<br>define method byte-&gt;string(c)<br>  add("", as(&lt;character&gt;, c));<br>end;<br>&nbsp;<br>define method compress(input&nbsp;:: &lt;string&gt;) =&gt; &lt;vector&gt;;<br>  let result = make(&lt;vector&gt;);<br>  let dict = make(&lt;string-table&gt;);<br>  for (x from 0 to 255) <br>    dict[byte-&gt;string(x)]&nbsp;:= x;<br>  end;<br>&nbsp;<br>  let next-code = 256; <br>  let cur-seq = "";<br>  for (c in input)<br>    let wc = add(cur-seq, c);<br>    if (contains?(dict, wc))<br>      cur-seq&nbsp;:= wc;<br>    else<br>      result&nbsp;:= add(result, dict[cur-seq]);<br>      dict[wc]&nbsp;:= next-code;<br>      next-code&nbsp;:= next-code + 1;<br>      cur-seq&nbsp;:= add("", c);<br>    end<br>  end;<br>  unless (empty?(cur-seq)) <br>    result&nbsp;:= add(result, dict[cur-seq]);<br>  end;<br>  result<br>end;<br>&nbsp;<br>format-out("%=\n", compress("TOBEORNOTTOBEORTOBEORNOT"))</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=12" title="Edit section: Erlang">edit</a>]</span> <span class="mw-headline" id="Erlang"><a href="http://rosettacode.org/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></span></h2>
<pre class="erlang highlighted_source"><span class="sy3">-</span><span class="re2">module</span><span class="br0">(</span>lzw<span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="sy3">-</span><span class="re2">export</span><span class="br0">(</span><span class="br0">[</span>test<span class="sy3">/</span><span class="nu0">0</span><span class="sy1">,</span> encode<span class="sy3">/</span><span class="nu0">1</span><span class="sy1">,</span> decode<span class="sy3">/</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="sy3">-</span><span class="re2">import</span><span class="br0">(</span>lists<span class="sy1">,</span> <span class="br0">[</span>reverse<span class="sy3">/</span><span class="nu0">1</span><span class="sy1">,</span> reverse<span class="sy3">/</span><span class="nu0">2</span><span class="br0">]</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">test</span><span class="br0">(</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">Str</span> <span class="sy3">=</span> <span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><span class="sy1">,</span><br>    <span class="br0">[</span><span class="nu0">84</span><span class="sy1">,</span><span class="nu0">79</span><span class="sy1">,</span><span class="nu0">66</span><span class="sy1">,</span><span class="nu0">69</span><span class="sy1">,</span><span class="nu0">79</span><span class="sy1">,</span><span class="nu0">82</span><span class="sy1">,</span><span class="nu0">78</span><span class="sy1">,</span><span class="nu0">79</span><span class="sy1">,</span><span class="nu0">84</span><span class="sy1">,</span><span class="nu0">256</span><span class="sy1">,</span><span class="nu0">258</span><span class="sy1">,</span><span class="nu0">260</span><span class="sy1">,</span><span class="nu0">265</span><span class="sy1">,</span><span class="nu0">259</span><span class="sy1">,</span><span class="nu0">261</span><span class="sy1">,</span><span class="nu0">263</span><span class="br0">]</span> <span class="sy3">=</span><br>	<span class="re3">encode</span><span class="br0">(</span><span class="re5">Str</span><span class="br0">)</span><span class="sy1">,</span><br>    <span class="re5">Str</span> <span class="sy3">=</span> <span class="re3">decode</span><span class="br0">(</span><span class="re3">encode</span><span class="br0">(</span><span class="re5">Str</span><span class="br0">)</span><span class="br0">)</span><span class="sy1">,</span><br>    ok<span class="sy1">.</span><br>&nbsp;<br><span class="re3">encode</span><span class="br0">(</span><span class="re5">Str</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">D</span> <span class="sy3">=</span> <span class="re3">init</span><span class="br0">(</span><a href="http://erlang.org/doc/man/dict.html"><span class="kw5">dict</span></a>:<span class="re3">new</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy1">,</span><br>    <span class="re3">encode</span><span class="br0">(</span><span class="re5">Str</span><span class="sy1">,</span> <span class="re5">D</span><span class="sy1">,</span> <span class="nu0">256</span><span class="sy1">,</span> <span class="br0">[</span><span class="br0">]</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">encode</span><span class="br0">(</span><span class="br0">[</span><span class="re5">H</span><span class="br0">]</span><span class="sy1">,</span> <span class="re5">D</span><span class="sy1">,</span> <span class="re5">_</span><span class="sy1">,</span> <span class="re5">Out</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">Val</span> <span class="sy3">=</span> <a href="http://erlang.org/doc/man/dict.html"><span class="kw5">dict</span></a>:<span class="re3">fetch</span><span class="br0">(</span><span class="br0">[</span><span class="re5">H</span><span class="br0">]</span><span class="sy1">,</span> <span class="re5">D</span><span class="br0">)</span><span class="sy1">,</span><br>    <span class="re3">reverse</span><span class="br0">(</span><span class="br0">[</span><span class="re5">Val</span>|Out<span class="br0">]</span><span class="br0">)</span><span class="sy1">;</span><br><span class="re3">encode</span><span class="br0">(</span><span class="br0">[</span><span class="re5">H</span>|T<span class="br0">]</span><span class="sy1">,</span> <span class="re5">D</span><span class="sy1">,</span> <span class="re5">Free</span><span class="sy1">,</span> <span class="re5">Out</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">Val</span> <span class="sy3">=</span> <a href="http://erlang.org/doc/man/dict.html"><span class="kw5">dict</span></a>:<span class="re3">fetch</span><span class="br0">(</span><span class="br0">[</span><span class="re5">H</span><span class="br0">]</span><span class="sy1">,</span> <span class="re5">D</span><span class="br0">)</span><span class="sy1">,</span><br>    <span class="re3">find_match</span><span class="br0">(</span><span class="re5">T</span><span class="sy1">,</span> <span class="br0">[</span><span class="re5">H</span><span class="br0">]</span><span class="sy1">,</span> <span class="re5">Val</span><span class="sy1">,</span> <span class="re5">D</span><span class="sy1">,</span> <span class="re5">Free</span><span class="sy1">,</span> <span class="re5">Out</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">find_match</span><span class="br0">(</span><span class="br0">[</span><span class="re5">H</span>|T<span class="br0">]</span><span class="sy1">,</span> <span class="re5">L</span><span class="sy1">,</span> <span class="re5">LastVal</span><span class="sy1">,</span> <span class="re5">D</span><span class="sy1">,</span> <span class="re5">Free</span><span class="sy1">,</span> <span class="re5">Out</span><span class="br0">)</span> <span class="sy1">-&gt;</span> <br>    <span class="kw1">case</span> <a href="http://erlang.org/doc/man/dict.html"><span class="kw5">dict</span></a>:<span class="re3">find</span><span class="br0">(</span><span class="br0">[</span><span class="re5">H</span>|L<span class="br0">]</span><span class="sy1">,</span> <span class="re5">D</span><span class="br0">)</span> <span class="kw1">of</span><br>	<span class="br0">{</span>ok<span class="sy1">,</span> <span class="re5">Val</span><span class="br0">}</span> <span class="sy1">-&gt;</span><br>	    <span class="re3">find_match</span><span class="br0">(</span><span class="re5">T</span><span class="sy1">,</span> <span class="br0">[</span><span class="re5">H</span>|L<span class="br0">]</span><span class="sy1">,</span> <span class="re5">Val</span><span class="sy1">,</span> <span class="re5">D</span><span class="sy1">,</span> <span class="re5">Free</span><span class="sy1">,</span> <span class="re5">Out</span><span class="br0">)</span><span class="sy1">;</span><br>	error <span class="sy1">-&gt;</span><br>	    <span class="re5">D1</span> <span class="sy3">=</span> <a href="http://erlang.org/doc/man/dict.html"><span class="kw5">dict</span></a>:<span class="re3">store</span><span class="br0">(</span><span class="br0">[</span><span class="re5">H</span>|L<span class="br0">]</span><span class="sy1">,</span> <span class="re5">Free</span><span class="sy1">,</span> <span class="re5">D</span><span class="br0">)</span><span class="sy1">,</span><br>	    <span class="re3">encode</span><span class="br0">(</span><span class="br0">[</span><span class="re5">H</span>|T<span class="br0">]</span><span class="sy1">,</span> <span class="re5">D1</span><span class="sy1">,</span> <span class="re5">Free</span><span class="sy3">+</span><span class="nu0">1</span><span class="sy1">,</span> <span class="br0">[</span><span class="re5">LastVal</span>|Out<span class="br0">]</span><span class="br0">)</span><br>    <span class="kw1">end</span><span class="sy1">;</span><br><span class="re3">find_match</span><span class="br0">(</span><span class="br0">[</span><span class="br0">]</span><span class="sy1">,</span> <span class="re5">_</span><span class="sy1">,</span> <span class="re5">LastVal</span><span class="sy1">,</span> <span class="re5">_</span><span class="sy1">,</span> <span class="re5">_</span><span class="sy1">,</span> <span class="re5">Out</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re3">reverse</span><span class="br0">(</span><span class="br0">[</span><span class="re5">LastVal</span>|Out<span class="br0">]</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">decode</span><span class="br0">(</span><span class="br0">[</span><span class="re5">H</span>|T<span class="br0">]</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">D</span>   <span class="sy3">=</span> <span class="re3">init1</span><span class="br0">(</span><a href="http://erlang.org/doc/man/dict.html"><span class="kw5">dict</span></a>:<span class="re3">new</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy1">,</span><br>    <span class="re5">Val</span> <span class="sy3">=</span> <a href="http://erlang.org/doc/man/dict.html"><span class="kw5">dict</span></a>:<span class="re3">fetch</span><span class="br0">(</span><span class="re5">H</span><span class="sy1">,</span> <span class="re5">D</span><span class="br0">)</span><span class="sy1">,</span><br>    <span class="re3">decode</span><span class="br0">(</span><span class="re5">T</span><span class="sy1">,</span> <span class="re5">Val</span><span class="sy1">,</span> <span class="nu0">256</span><span class="sy1">,</span> <span class="re5">D</span><span class="sy1">,</span> <span class="re5">Val</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">decode</span><span class="br0">(</span><span class="br0">[</span><span class="br0">]</span><span class="sy1">,</span> <span class="re5">_</span><span class="sy1">,</span> <span class="re5">_</span><span class="sy1">,</span> <span class="re5">_</span><span class="sy1">,</span> <span class="re5">L</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re3">reverse</span><span class="br0">(</span><span class="re5">L</span><span class="br0">)</span><span class="sy1">;</span><br><span class="re3">decode</span><span class="br0">(</span><span class="br0">[</span><span class="re5">H</span>|T<span class="br0">]</span><span class="sy1">,</span> <span class="re5">Old</span><span class="sy1">,</span> <span class="re5">Free</span><span class="sy1">,</span> <span class="re5">D</span><span class="sy1">,</span> <span class="re5">L</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">Val</span> <span class="sy3">=</span> <a href="http://erlang.org/doc/man/dict.html"><span class="kw5">dict</span></a>:<span class="re3">fetch</span><span class="br0">(</span><span class="re5">H</span><span class="sy1">,</span> <span class="re5">D</span><span class="br0">)</span><span class="sy1">,</span><br>    <span class="re5">Add</span> <span class="sy3">=</span> <span class="br0">[</span><a href="http://erlang.org/doc/man/lists.html"><span class="kw5">lists</span></a>:<span class="re3">last</span><span class="br0">(</span><span class="re5">Val</span><span class="br0">)</span>|Old<span class="br0">]</span><span class="sy1">,</span><br>    <span class="re5">D1</span>  <span class="sy3">=</span> <a href="http://erlang.org/doc/man/dict.html"><span class="kw5">dict</span></a>:<span class="re3">store</span><span class="br0">(</span><span class="re5">Free</span><span class="sy1">,</span> <span class="re5">Add</span><span class="sy1">,</span> <span class="re5">D</span><span class="br0">)</span><span class="sy1">,</span><br>    <span class="re3">decode</span><span class="br0">(</span><span class="re5">T</span><span class="sy1">,</span> <span class="re5">Val</span><span class="sy1">,</span> <span class="re5">Free</span><span class="sy3">+</span><span class="nu0">1</span><span class="sy1">,</span> <span class="re5">D1</span><span class="sy1">,</span> <span class="re5">Val</span> <span class="sy3">++</span> <span class="re5">L</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">init</span><span class="br0">(</span><span class="re5">D</span><span class="br0">)</span> <span class="sy1">-&gt;</span> <span class="re3">init</span><span class="br0">(</span><span class="nu0">255</span><span class="sy1">,</span> <span class="re5">D</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">init</span><span class="br0">(</span><span class="nu0">0</span><span class="sy1">,</span> <span class="re5">D</span><span class="br0">)</span> <span class="sy1">-&gt;</span>  <span class="re5">D</span><span class="sy1">;</span><br><span class="re3">init</span><span class="br0">(</span><span class="re5">N</span><span class="sy1">,</span> <span class="re5">D</span><span class="br0">)</span> <span class="sy1">-&gt;</span>  <span class="re5">D1</span> <span class="sy3">=</span> <a href="http://erlang.org/doc/man/dict.html"><span class="kw5">dict</span></a>:<span class="re3">store</span><span class="br0">(</span><span class="br0">[</span><span class="re5">N</span><span class="br0">]</span><span class="sy1">,</span><span class="re5">N</span><span class="sy1">,</span><span class="re5">D</span><span class="br0">)</span><span class="sy1">,</span>  <span class="re3">init</span><span class="br0">(</span><span class="re5">N</span><span class="sy3">-</span><span class="nu0">1</span><span class="sy1">,</span> <span class="re5">D1</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">init1</span><span class="br0">(</span><span class="re5">D</span><span class="br0">)</span> <span class="sy1">-&gt;</span> <span class="re3">init1</span><span class="br0">(</span><span class="nu0">255</span><span class="sy1">,</span> <span class="re5">D</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">init1</span><span class="br0">(</span><span class="nu0">0</span><span class="sy1">,</span> <span class="re5">D</span><span class="br0">)</span> <span class="sy1">-&gt;</span>  <span class="re5">D</span><span class="sy1">;</span><br><span class="re3">init1</span><span class="br0">(</span><span class="re5">N</span><span class="sy1">,</span> <span class="re5">D</span><span class="br0">)</span> <span class="sy1">-&gt;</span>  <span class="re5">D1</span> <span class="sy3">=</span> <a href="http://erlang.org/doc/man/dict.html"><span class="kw5">dict</span></a>:<span class="re3">store</span><span class="br0">(</span><span class="re5">N</span><span class="sy1">,</span><span class="br0">[</span><span class="re5">N</span><span class="br0">]</span><span class="sy1">,</span><span class="re5">D</span><span class="br0">)</span><span class="sy1">,</span>  <span class="re3">init1</span><span class="br0">(</span><span class="re5">N</span><span class="sy3">-</span><span class="nu0">1</span><span class="sy1">,</span> <span class="re5">D1</span><span class="br0">)</span><span class="sy1">.</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=13" title="Edit section: Forth">edit</a>]</span> <span class="mw-headline" id="Forth"><a href="http://rosettacode.org/wiki/Category:Forth" title="Category:Forth">Forth</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/GNU_Forth" title="GNU Forth">GNU Forth</a> version 0.6.2</div>
<pre class="text highlighted_source">256 value next-symbol<br>&nbsp;<br>\ current string fragment<br>&nbsp;<br>create w 256 allot     \ counted string<br>&nbsp;<br>: w=c ( c -- )       w 1+ c!        1 w c!&nbsp;;<br>: w+c ( c -- )  w count + c!  w c@ 1+ w c!&nbsp;;<br>&nbsp;<br>\ Compression<br>&nbsp;<br>\ dictionary of strings to symbols<br>0 value dict<br>&nbsp;<br>: init-dict  table to dict  256 to next-symbol  dict set-current&nbsp;;<br>&nbsp;<br>: free-dict                           forth-wordlist set-current&nbsp;;<br>&nbsp;<br>: in-dict? ( key len --&nbsp;? )		\ can assume len &gt; 1<br>  dict search-wordlist dup if nip then&nbsp;;<br>&nbsp;<br>: lookup-dict ( key len -- symbol )<br>  dup 1 = if drop c@ exit then<br>  dict search-wordlist if &gt;body @ else abort" bad-dict!" then&nbsp;;<br>&nbsp;<br>: put-dict ( data key len -- )<br>  nextname create ,&nbsp;;<br>&nbsp;<br>\ output buffer of symbols<br>\  in real life, these symbols would be packed into octets<br>variable out-size<br>create out 256 cells allot<br>&nbsp;<br>: output ( symbol -- )<br>  dup out out-size @ cells +&nbsp;!  1 out-size +!<br>  dup 256 &lt; if emit space else . then&nbsp;;<br>&nbsp;<br>: compress ( addr len -- )<br>  init-dict  0 out-size&nbsp;!<br>  over c@ w=c  1 /string<br>  bounds do<br>    i c@ w+c<br>    w count in-dict? 0= if<br>      w count 1- lookup-dict output<br>      next-symbol dup w count put-dict<br>      1+ to next-symbol<br>      i c@ w=c<br>    then<br>  loop<br>  w count lookup-dict output<br>  free-dict&nbsp;;<br>&nbsp;<br>\ Decompression<br>&nbsp;<br>\ array of symbols to strings (in real code this would need to be growable)<br>\  next-symbol is reused for the size of this table<br>create symtab 256 cells allot<br>0 value start<br>&nbsp;<br>: init-symtab  256 to next-symbol  here to start&nbsp;;<br>&nbsp;<br>: free-symtab  start here - allot&nbsp;;<br>&nbsp;<br>: get-symbol ( symbol -- addr len )<br>  dup 256 &lt; if pad c! pad 1 exit then<br>  256 - cells symtab + @ count&nbsp;;<br>&nbsp;<br>: add-symbol ( addr len -- )<br>  here symtab next-symbol 256 - cells +&nbsp;!<br>  s,<br>  next-symbol 1+ to next-symbol&nbsp;;<br>&nbsp;<br>create entry 256 allot<br>&nbsp;<br>: decompress ( addr len -- )<br>  init-symtab<br>  over @ dup emit w=c<br>  cells bounds cell+ do<br>    i @ next-symbol &lt; if<br>      i @ get-symbol entry place<br>    else i @ next-symbol = if<br>      w 1+ c@ w count + c!  w count 1+ entry place<br>    else<br>      abort" bad symbol!"<br>    then then<br>    entry count type	\ output<br>    entry 1+ c@ w+c<br>    w count add-symbol<br>    entry count w place<br>  1 cells +loop<br>  free-symtab&nbsp;;<br>&nbsp;<br>\ Testing<br>&nbsp;<br>s" TOBEORNOTTOBEORTOBEORNOT" compress cr<br>\ T O B E O R N O T 256 258 260 265 259 261 263<br>&nbsp;<br>out out-size @ decompress cr<br>\ TOBEORNOTTOBEORTOBEORNOT</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=14" title="Edit section: Go">edit</a>]</span> <span class="mw-headline" id="Go"><a href="http://rosettacode.org/wiki/Category:Go" title="Category:Go">Go</a></span></h2>
<p>Go also has an LZW package in the standard library.
</p>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/LZW_compression#Java" title="LZW compression">Java</a></div>
<pre class="go highlighted_source"><span class="kw1">package</span> main<br><span class="kw1">import</span> <span class="st0">"fmt"</span><br>&nbsp;<br><span class="co1">// Compress a string to a list of output symbols.</span><br><span class="kw4">func</span> compress<span class="sy1">(</span>uncompressed <span class="kw4">string</span><span class="sy1">)</span> <span class="sy1">[]</span><span class="kw4">int</span> <span class="sy1">{</span><br>    <span class="co1">// Build the dictionary.</span><br>    dictSize <span class="sy2">:=</span> <span class="nu0">256</span><br>    dictionary <span class="sy2">:=</span> <span class="kw3">make</span><span class="sy1">(</span><span class="kw4">map</span><span class="sy1">[</span><span class="kw4">string</span><span class="sy1">]</span><span class="kw4">int</span><span class="sy1">)</span><br>    <span class="kw1">for</span> <span class="nu2">i</span> <span class="sy2">:=</span> <span class="nu0">0</span><span class="sy1">;</span> <span class="nu2">i</span> &lt; <span class="nu0">256</span><span class="sy1">;</span> <span class="nu2">i</span><span class="sy2">++</span> <span class="sy1">{</span><br>        dictionary<span class="sy1">[</span><span class="kw4">string</span><span class="sy1">(</span><span class="nu2">i</span><span class="sy1">)]</span> <span class="sy2">=</span> <span class="nu2">i</span><br>    <span class="sy1">}</span><br>&nbsp;<br>    w <span class="sy2">:=</span> <span class="st0">""</span><br>    result <span class="sy2">:=</span> <span class="kw3">make</span><span class="sy1">([]</span><span class="kw4">int</span><span class="sy1">,</span> <span class="nu0">0</span><span class="sy1">)</span><br>    <span class="kw1">for</span> _<span class="sy1">,</span> c <span class="sy2">:=</span> <span class="kw1">range</span> <span class="sy1">[]</span><span class="kw4">byte</span><span class="sy1">(</span>uncompressed<span class="sy1">)</span> <span class="sy1">{</span><br>        wc <span class="sy2">:=</span> w <span class="sy3">+</span> <span class="kw4">string</span><span class="sy1">(</span>c<span class="sy1">)</span><br>        <span class="kw1">if</span> _<span class="sy1">,</span> ok <span class="sy2">:=</span> dictionary<span class="sy1">[</span>wc<span class="sy1">];</span> ok <span class="sy1">{</span><br>            w <span class="sy2">=</span> wc<br>        <span class="sy1">}</span> <span class="kw1">else</span> <span class="sy1">{</span><br>            result <span class="sy2">=</span> append<span class="sy1">(</span>result<span class="sy1">,</span> dictionary<span class="sy1">[</span>w<span class="sy1">])</span><br>            <span class="co1">// Add wc to the dictionary.</span><br>            dictionary<span class="sy1">[</span>wc<span class="sy1">]</span> <span class="sy2">=</span> dictSize<br>            dictSize<span class="sy2">++</span><br>            w <span class="sy2">=</span> <span class="kw4">string</span><span class="sy1">(</span>c<span class="sy1">)</span><br>        <span class="sy1">}</span><br>    <span class="sy1">}</span><br>&nbsp;<br>    <span class="co1">// Output the code for w.</span><br>    <span class="kw1">if</span> w <span class="sy2">!=</span> <span class="st0">""</span> <span class="sy1">{</span><br>        result <span class="sy2">=</span> append<span class="sy1">(</span>result<span class="sy1">,</span> dictionary<span class="sy1">[</span>w<span class="sy1">])</span><br>    <span class="sy1">}</span><br>    <span class="kw1">return</span> result<br><span class="sy1">}</span><br>&nbsp;<br><span class="co1">// Decompress a list of output ks to a string.</span><br><span class="kw4">func</span> decompress<span class="sy1">(</span>compressed <span class="sy1">[]</span><span class="kw4">int</span><span class="sy1">)</span> <span class="kw4">string</span> <span class="sy1">{</span><br>    <span class="co1">// Build the dictionary.</span><br>    dictSize <span class="sy2">:=</span> <span class="nu0">256</span><br>    dictionary <span class="sy2">:=</span> <span class="kw3">make</span><span class="sy1">(</span><span class="kw4">map</span><span class="sy1">[</span><span class="kw4">int</span><span class="sy1">]</span><span class="kw4">string</span><span class="sy1">)</span><br>    <span class="kw1">for</span> <span class="nu2">i</span> <span class="sy2">:=</span> <span class="nu0">0</span><span class="sy1">;</span> <span class="nu2">i</span> &lt; <span class="nu0">256</span><span class="sy1">;</span> <span class="nu2">i</span><span class="sy2">++</span> <span class="sy1">{</span><br>        dictionary<span class="sy1">[</span><span class="nu2">i</span><span class="sy1">]</span> <span class="sy2">=</span> <span class="kw4">string</span><span class="sy1">(</span><span class="nu2">i</span><span class="sy1">)</span><br>    <span class="sy1">}</span><br>&nbsp;<br>    w <span class="sy2">:=</span> <span class="kw4">string</span><span class="sy1">(</span>compressed<span class="sy1">[</span><span class="nu0">0</span><span class="sy1">])</span><br>    result <span class="sy2">:=</span> w<br>    <span class="kw1">for</span> _<span class="sy1">,</span> k <span class="sy2">:=</span> <span class="kw1">range</span> compressed<span class="sy1">[</span><span class="nu0">1</span><span class="sy1">:]</span> <span class="sy1">{</span><br>        <span class="kw1">var</span> entry <span class="kw4">string</span><br>        <span class="kw1">if</span> x<span class="sy1">,</span> ok <span class="sy2">:=</span> dictionary<span class="sy1">[</span>k<span class="sy1">];</span> ok <span class="sy1">{</span><br>            entry <span class="sy2">=</span> x<br>        <span class="sy1">}</span> <span class="kw1">else</span> <span class="kw1">if</span> k <span class="sy3">==</span> dictSize <span class="sy1">{</span><br>            entry <span class="sy2">=</span> w <span class="sy3">+</span> w<span class="sy1">[:</span><span class="nu0">1</span><span class="sy1">]</span><br>        <span class="sy1">}</span> <span class="kw1">else</span> <span class="sy1">{</span><br>            <span class="kw3">panic</span><span class="sy1">(</span>fmt<span class="sy3">.</span>Sprintf<span class="sy1">(</span><span class="st0">"Bad compressed k:&nbsp;%d"</span><span class="sy1">,</span> k<span class="sy1">))</span><br>        <span class="sy1">}</span><br>&nbsp;<br>        result <span class="sy2">+=</span> entry<br>&nbsp;<br>        <span class="co1">// Add w+entry[0] to the dictionary.</span><br>        dictionary<span class="sy1">[</span>dictSize<span class="sy1">]</span> <span class="sy2">=</span> w <span class="sy3">+</span> entry<span class="sy1">[:</span><span class="nu0">1</span><span class="sy1">]</span><br>        dictSize<span class="sy2">++</span><br>&nbsp;<br>        w <span class="sy2">=</span> entry<br>    <span class="sy1">}</span><br>    <span class="kw1">return</span> result<br><span class="sy1">}</span><br>&nbsp;<br><span class="kw4">func</span> main<span class="sy1">()</span> <span class="sy1">{</span><br>    compressed <span class="sy2">:=</span> compress<span class="sy1">(</span><span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><span class="sy1">)</span><br>    fmt<span class="sy3">.</span><span class="me1">Println</span><span class="sy1">(</span>compressed<span class="sy1">)</span><br>    decompressed <span class="sy2">:=</span> decompress<span class="sy1">(</span>compressed<span class="sy1">)</span><br>    fmt<span class="sy3">.</span><span class="me1">Println</span><span class="sy1">(</span>decompressed<span class="sy1">)</span><br><span class="sy1">}</span></pre>
<div>
<dl><dt>Output:</dt></dl></div>

<pre>[84 79 66 69 79 82 78 79 84 256 258 260 265 259 261 263]
TOBEORNOTTOBEORTOBEORNOT
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=15" title="Edit section: Haskell">edit</a>]</span> <span class="mw-headline" id="Haskell"><a href="http://rosettacode.org/wiki/Category:Haskell" title="Category:Haskell">Haskell</a></span></h2>
<pre class="haskell highlighted_source"><span class="kw1">import</span> Data<span class="sy0">.</span>List<br><span class="kw1">import</span> Data<span class="sy0">.</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char"><span class="kw4">Char</span></a><br><span class="kw1">import</span> Data<span class="sy0">.</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe"><span class="kw4">Maybe</span></a><br><span class="kw1">import</span> Control<span class="sy0">.</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad"><span class="kw4">Monad</span></a><br><span class="kw1">import</span> Control<span class="sy0">.</span>Arrow<br>&nbsp;<br>take2 <span class="sy0">=</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter"><span class="kw3">filter</span></a><span class="br0">(</span><span class="br0">(</span><span class="sy0">==</span><span class="nu0">2</span><span class="br0">)</span><span class="sy0">.</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length"><span class="kw3">length</span></a><span class="br0">)</span><span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a> <span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take"><span class="kw3">take</span></a> <span class="nu0">2</span><span class="br0">)</span><span class="sy0">.</span> tails<br>&nbsp;<br>doLZW <span class="sy0">_</span> <span class="br0">[</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">[</span><span class="br0">]</span><br>doLZW <span class="kw1">as</span> <span class="br0">(</span>x:xs<span class="br0">)</span> <span class="sy0">=</span>  lzw <span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return"><span class="kw3">return</span></a> <span class="kw1">as</span><span class="br0">)</span> <span class="br0">[</span>x<span class="br0">]</span> xs<br>   <span class="kw1">where</span> lzw a w <span class="br0">[</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">[</span>fromJust <span class="sy0">$</span> elemIndex w a<span class="br0">]</span><br>         lzw a w <span class="br0">(</span>x:xs<span class="br0">)</span>  <span class="sy0">|</span> w<span class="st0">' `elem` a = lzw a w'</span> xs<br>                         <span class="sy0">|</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise"><span class="kw3">otherwise</span></a>   <span class="sy0">=</span> fromJust <span class="br0">(</span>elemIndex w a<span class="br0">)</span>&nbsp;: lzw <span class="br0">(</span>a<span class="sy0">++</span><span class="br0">[</span>w<span class="st0">']) [x] xs<br>              where w'</span> <span class="sy0">=</span> w<span class="sy0">++</span><span class="br0">[</span>x<span class="br0">]</span><br>&nbsp;<br>undoLZW <span class="sy0">_</span> <span class="br0">[</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">[</span><span class="br0">]</span><br>undoLZW a cs <span class="sy0">=</span><br>  <span class="br0">(</span><span class="br0">(</span>cs <span class="sy0">&gt;&gt;=</span><span class="br0">)</span><span class="sy0">.</span><span class="br0">(</span><span class="sy0">!!</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">$</span><br>  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl"><span class="kw3">foldl</span></a> <span class="br0">(</span>liftM2 <span class="br0">(</span><span class="sy0">.</span><span class="br0">)</span> <span class="br0">(</span><span class="sy0">++</span><span class="br0">)</span> <span class="br0">(</span><span class="br0">(</span><span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return"><span class="kw3">return</span></a><span class="sy0">.</span> liftM2 <span class="br0">(</span><span class="sy0">++</span><span class="br0">)</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head"><span class="kw3">head</span></a> <span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take"><span class="kw3">take</span></a> <span class="nu0">1</span><span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:last"><span class="kw3">last</span></a><span class="br0">)</span><span class="br0">)</span><span class="sy0">.</span><span class="br0">)</span><span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a><span class="sy0">.</span> <span class="br0">(</span><span class="sy0">!!</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return"><span class="kw3">return</span></a> a<span class="br0">)</span> <span class="br0">(</span>take2 cs<span class="br0">)</span></pre>
<p>Testing:
</p>
<pre class="haskell highlighted_source"><span class="sy0">*</span>Main<span class="sy0">&gt;</span> doLZW <span class="br0">[</span><span class="st0">'<span class="es0">\0</span>'</span><span class="sy0">..</span><span class="st0">'<span class="es0">\2</span>55'</span><span class="br0">]</span> <span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><br><span class="br0">[</span><span class="nu0">84</span><span class="sy0">,</span><span class="nu0">79</span><span class="sy0">,</span><span class="nu0">66</span><span class="sy0">,</span><span class="nu0">69</span><span class="sy0">,</span><span class="nu0">79</span><span class="sy0">,</span><span class="nu0">82</span><span class="sy0">,</span><span class="nu0">78</span><span class="sy0">,</span><span class="nu0">79</span><span class="sy0">,</span><span class="nu0">84</span><span class="sy0">,</span><span class="nu0">256</span><span class="sy0">,</span><span class="nu0">258</span><span class="sy0">,</span><span class="nu0">260</span><span class="sy0">,</span><span class="nu0">265</span><span class="sy0">,</span><span class="nu0">259</span><span class="sy0">,</span><span class="nu0">261</span><span class="sy0">,</span><span class="nu0">263</span><span class="br0">]</span><br>&nbsp;<br><span class="sy0">*</span>Main<span class="sy0">&gt;</span> undoLZW <span class="br0">[</span><span class="st0">'<span class="es0">\0</span>'</span><span class="sy0">..</span><span class="st0">'<span class="es0">\2</span>55'</span><span class="br0">]</span> <span class="br0">[</span><span class="nu0">84</span><span class="sy0">,</span><span class="nu0">79</span><span class="sy0">,</span><span class="nu0">66</span><span class="sy0">,</span><span class="nu0">69</span><span class="sy0">,</span><span class="nu0">79</span><span class="sy0">,</span><span class="nu0">82</span><span class="sy0">,</span><span class="nu0">78</span><span class="sy0">,</span><span class="nu0">79</span><span class="sy0">,</span><span class="nu0">84</span><span class="sy0">,</span><span class="nu0">256</span><span class="sy0">,</span><span class="nu0">258</span><span class="sy0">,</span><span class="nu0">260</span><span class="sy0">,</span><span class="nu0">265</span><span class="sy0">,</span><span class="nu0">259</span><span class="sy0">,</span><span class="nu0">261</span><span class="sy0">,</span><span class="nu0">263</span><span class="br0">]</span><br><span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span></pre>
<p>Encode --&gt; decode --&gt; compare with original text.
</p>
<pre class="haskell highlighted_source"><span class="sy0">*</span>Main<span class="sy0">&gt;</span> <span class="br0">(</span>ap <span class="br0">(</span><span class="sy0">==</span><span class="br0">)</span> <span class="sy0">.</span> liftM2 <span class="br0">(</span><span class="sy0">.</span><span class="br0">)</span> undoLZW doLZW<span class="br0">)</span> <span class="br0">[</span><span class="st0">'<span class="es0">\0</span>'</span><span class="sy0">..</span><span class="st0">'<span class="es0">\2</span>55'</span><span class="br0">]</span> <span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><br>True</pre>
<p>Other (elegant) code can be found at Haskell wiki <a rel="nofollow" class="external text" href="http://www.haskell.org/haskellwiki/Toy_compression_implementations">Toy compression</a>
</p>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=16" title="Edit section: J">edit</a>]</span> <span class="mw-headline" id="J"><a href="http://rosettacode.org/wiki/Category:J" title="Category:J">J</a></span></h2>
<p>Straightforward implementations of encoding and decoding:
</p>
<pre class="j highlighted_source">encodeLZW =: <span class="nu0">4</span>&nbsp;: <span class="nu0">0</span><br> d=.&nbsp;;/<span class="kw2">x</span><br> r=.<span class="nu0">0</span>$<span class="nu0">0</span><br> wc=.w=.{.<span class="kw2">y</span><br> <span class="re0">for_c.</span> }.<span class="kw2">y</span> <span class="kw1">do.</span><br>   wc=.w,c<br>   <span class="kw1">if.</span> d e.~ &lt;wc <span class="kw1">do.</span> w=.wc <span class="kw1">else.</span><br>     r=. r, d i.&lt;w<br>     d=.d,&lt;wc<br>     w=.c<br>   <span class="kw1">end.</span><br> <span class="kw1">end.</span><br> r, d i.&lt;w<br><span class="sy0">)</span></pre>
<p>Test:
</p>
<pre>   a. encodeLZW 'TOBEORNOTTOBEORTOBEORNOT'
84 79 66 69 79 82 78 79 84 256 258 260 265 259 261 263</pre>
<p>Decoding:
</p>
<pre class="j highlighted_source">decodeLZW =: <span class="nu0">4</span>&nbsp;: <span class="nu0">0</span><br> d=.;/<span class="kw2">x</span><br> w=.r=. &gt;d{~{.<span class="kw2">y</span><br> ds=. #d<br> <span class="re0">for_c.</span> }.<span class="kw2">y</span> <span class="kw1">do.</span><br>   <span class="kw1">select.</span> * c-ds<br>    <span class="kw1">case.</span> <span class="nu0">_1</span> <span class="kw1">do.</span> r=.r,e=.&gt;c{d  <br>    <span class="kw1">case.</span>  <span class="nu0">0</span> <span class="kw1">do.</span> r=.r,e=.w,{.w<br>    <span class="kw1">case.</span>    <span class="kw1">do.</span> <span class="st_h">'error'</span> <span class="kw1">return.</span><br>   <span class="kw1">end.</span><br>   d=.d,&lt; w,{.e<br>   w=.e<br>   ds=.ds+<span class="nu0">1</span><br> <span class="kw1">end.</span><br>&nbsp;;r<br><span class="sy0">)</span></pre>
<p>Test:
</p>
<pre>   a. decodeLZW 84 79 66 69 79 82 78 79 84 256 258 260 265 259 261 263
TOBEORNOTTOBEORTOBEORNOT</pre>
<p>encode --&gt; decode --&gt; compare with original:
</p>
<pre>   a. (] -: [ decodeLZW encodeLZW) 'TOBEORNOTTOBEORTOBEORNOT'
1</pre>
<p>Error test:
</p>
<pre>   a. decodeLZW 84 79 66 69 79 82 78 79 84 256 258 456 260 265 259 261 263
error</pre>
<p>Tacit J expression for decoding:
</p>
<pre>decodeLZW=:[:;]{[:;[:(],&lt;@(&gt;@{.,{.@&gt;@{:)@:{)&amp;.&gt;/&lt;@(;/@[),~|.@(2&lt;\])</pre>
<pre>   a. decodeLZW 84 79 66 69 79 82 78 79 84 256 258 260 265 259 261 263
TOBEORNOTTOBEORTOBEORNOT</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=17" title="Edit section: Java">edit</a>]</span> <span class="mw-headline" id="Java"><a href="http://rosettacode.org/wiki/Category:Java" title="Category:Java">Java</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/Java" title="Java" class="mw-redirect">Java</a> version 1.5+</div>
<pre class="java5 highlighted_source"><span class="kw2">import</span> <span class="co2">java.util.*</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw2">public</span> <span class="kw2">class</span> LZW <span class="br0">{</span><br>    <span class="co3">/** Compress a string to a list of output symbols. */</span><br>    <span class="kw2">public</span> <span class="kw2">static</span> <a href="http://www.google.com/search?sitesearch=java.sun.com&q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List"><span class="kw166">List</span></a><span class="sy0">&lt;</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Integer.html"><span class="kw21">Integer</span></a><span class="sy0">&gt;</span> compress<span class="br0">(</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a> uncompressed<span class="br0">)</span> <span class="br0">{</span><br>        <span class="co1">// Build the dictionary.</span><br>        <span class="kw3">int</span> dictSize = <span class="nu0">256</span><span class="sy0">;</span><br>        <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/Map.html"><span class="kw46">Map</span></a><span class="sy0">&lt;</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a>,<a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Integer.html"><span class="kw21">Integer</span></a><span class="sy0">&gt;</span> dictionary = <span class="kw2">new</span> <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/HashMap.html"><span class="kw46">HashMap</span></a><span class="sy0">&lt;</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a>,<a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Integer.html"><span class="kw21">Integer</span></a><span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">int</span> i = <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">256</span><span class="sy0">;</span> i++<span class="br0">)</span><br>            dictionary.<span class="me1">put</span><span class="br0">(</span><span class="st0">""</span> + <span class="br0">(</span><span class="kw3">char</span><span class="br0">)</span>i, i<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>        <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a> w = <span class="st0">""</span><span class="sy0">;</span><br>        <a href="http://www.google.com/search?sitesearch=java.sun.com&q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List"><span class="kw166">List</span></a><span class="sy0">&lt;</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Integer.html"><span class="kw21">Integer</span></a><span class="sy0">&gt;</span> result = <span class="kw2">new</span> <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/ArrayList.html"><span class="kw46">ArrayList</span></a><span class="sy0">&lt;</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Integer.html"><span class="kw21">Integer</span></a><span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">char</span> c&nbsp;: uncompressed.<span class="me1">toCharArray</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span><br>            <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a> wc = w + c<span class="sy0">;</span><br>            <span class="kw1">if</span> <span class="br0">(</span>dictionary.<span class="me1">containsKey</span><span class="br0">(</span>wc<span class="br0">)</span><span class="br0">)</span><br>                w = wc<span class="sy0">;</span><br>            <span class="kw1">else</span> <span class="br0">{</span><br>                result.<span class="me1">add</span><span class="br0">(</span>dictionary.<span class="me1">get</span><span class="br0">(</span>w<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>                <span class="co1">// Add wc to the dictionary.</span><br>                dictionary.<span class="me1">put</span><span class="br0">(</span>wc, dictSize++<span class="br0">)</span><span class="sy0">;</span><br>                w = <span class="st0">""</span> + c<span class="sy0">;</span><br>            <span class="br0">}</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="co1">// Output the code for w.</span><br>        <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>w.<span class="me1">equals</span><span class="br0">(</span><span class="st0">""</span><span class="br0">)</span><span class="br0">)</span><br>            result.<span class="me1">add</span><span class="br0">(</span>dictionary.<span class="me1">get</span><span class="br0">(</span>w<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw2">return</span> result<span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="co3">/** Decompress a list of output ks to a string. */</span><br>    <span class="kw2">public</span> <span class="kw2">static</span> <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a> decompress<span class="br0">(</span><a href="http://www.google.com/search?sitesearch=java.sun.com&q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List"><span class="kw166">List</span></a><span class="sy0">&lt;</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Integer.html"><span class="kw21">Integer</span></a><span class="sy0">&gt;</span> compressed<span class="br0">)</span> <span class="br0">{</span><br>        <span class="co1">// Build the dictionary.</span><br>        <span class="kw3">int</span> dictSize = <span class="nu0">256</span><span class="sy0">;</span><br>        <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/Map.html"><span class="kw46">Map</span></a><span class="sy0">&lt;</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Integer.html"><span class="kw21">Integer</span></a>,<a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a><span class="sy0">&gt;</span> dictionary = <span class="kw2">new</span> <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/HashMap.html"><span class="kw46">HashMap</span></a><span class="sy0">&lt;</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Integer.html"><span class="kw21">Integer</span></a>,<a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a><span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">int</span> i = <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">256</span><span class="sy0">;</span> i++<span class="br0">)</span><br>            dictionary.<span class="me1">put</span><span class="br0">(</span>i, <span class="st0">""</span> + <span class="br0">(</span><span class="kw3">char</span><span class="br0">)</span>i<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>        <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a> w = <span class="st0">""</span> + <span class="br0">(</span><span class="kw3">char</span><span class="br0">)</span><span class="br0">(</span><span class="kw3">int</span><span class="br0">)</span>compressed.<span class="me1">remove</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span><br>        <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a> result = w<span class="sy0">;</span><br>        <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">int</span> k&nbsp;: compressed<span class="br0">)</span> <span class="br0">{</span><br>            <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a> entry<span class="sy0">;</span><br>            <span class="kw1">if</span> <span class="br0">(</span>dictionary.<span class="me1">containsKey</span><span class="br0">(</span>k<span class="br0">)</span><span class="br0">)</span><br>                entry = dictionary.<span class="me1">get</span><span class="br0">(</span>k<span class="br0">)</span><span class="sy0">;</span><br>            <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span>k == dictSize<span class="br0">)</span><br>                entry = w + w.<span class="me1">charAt</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="kw1">else</span><br>                <span class="kw2">throw</span> <span class="kw2">new</span> <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/IllegalArgumentException.html"><span class="kw21">IllegalArgumentException</span></a><span class="br0">(</span><span class="st0">"Bad compressed k: "</span> + k<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>            result += entry<span class="sy0">;</span><br>&nbsp;<br>            <span class="co1">// Add w+entry[0] to the dictionary.</span><br>            dictionary.<span class="me1">put</span><span class="br0">(</span>dictSize++, w + entry.<span class="me1">charAt</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>            w = entry<span class="sy0">;</span><br>        <span class="br0">}</span><br>        <span class="kw2">return</span> result<span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw3">void</span> main<span class="br0">(</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span> <span class="br0">{</span><br>        <a href="http://www.google.com/search?sitesearch=java.sun.com&q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List"><span class="kw166">List</span></a><span class="sy0">&lt;</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Integer.html"><span class="kw21">Integer</span></a><span class="sy0">&gt;</span> compressed = compress<span class="br0">(</span><span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><span class="br0">)</span><span class="sy0">;</span><br>        <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><span class="kw21">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>compressed<span class="br0">)</span><span class="sy0">;</span><br>        <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a> decompressed = decompress<span class="br0">(</span>compressed<span class="br0">)</span><span class="sy0">;</span><br>        <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><span class="kw21">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>decompressed<span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span><br><span class="br0">}</span></pre>
<p>Output (Command Line direct output):
</p>
<pre class="java5 highlighted_source"><span class="br0">[</span><span class="nu0">84</span>, <span class="nu0">79</span>, <span class="nu0">66</span>, <span class="nu0">69</span>, <span class="nu0">79</span>, <span class="nu0">82</span>, <span class="nu0">78</span>, <span class="nu0">79</span>, <span class="nu0">84</span>, <span class="nu0">256</span>, <span class="nu0">258</span>, <span class="nu0">260</span>, <span class="nu0">265</span>, <span class="nu0">259</span>, <span class="nu0">261</span>, <span class="nu0">263</span><span class="br0">]</span><br>TOBEORNOTTOBEORTOBEORNOT</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=18" title="Edit section: JavaScript">edit</a>]</span> <span class="mw-headline" id="JavaScript"><a href="http://rosettacode.org/wiki/Category:JavaScript" title="Category:JavaScript">JavaScript</a></span></h2>
<pre class="javascript highlighted_source"><span class="co1">//LZW Compression/Decompression for Strings</span><br><span class="kw1">var</span> LZW <span class="sy0">=</span> <span class="br0">{</span><br>    compress<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">(</span>uncompressed<span class="br0">)</span> <span class="br0">{</span><br>        <span class="st0">"use strict"</span><span class="sy0">;</span><br>        <span class="co1">// Build the dictionary.</span><br>        <span class="kw1">var</span> i<span class="sy0">,</span><br>            dictionary <span class="sy0">=</span> <span class="br0">{</span><span class="br0">}</span><span class="sy0">,</span><br>            c<span class="sy0">,</span><br>            wc<span class="sy0">,</span><br>            w <span class="sy0">=</span> <span class="st0">""</span><span class="sy0">,</span><br>            result <span class="sy0">=</span> <span class="br0">[</span><span class="br0">]</span><span class="sy0">,</span><br>            dictSize <span class="sy0">=</span> <span class="nu0">256</span><span class="sy0">;</span><br>        <span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">256</span><span class="sy0">;</span> i <span class="sy0">+=</span> <span class="nu0">1</span><span class="br0">)</span> <span class="br0">{</span><br>            dictionary<span class="br0">[</span><span class="kw4">String</span>.<span class="me1">fromCharCode</span><span class="br0">(</span>i<span class="br0">)</span><span class="br0">]</span> <span class="sy0">=</span> i<span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> uncompressed.<span class="me1">length</span><span class="sy0">;</span> i <span class="sy0">+=</span> <span class="nu0">1</span><span class="br0">)</span> <span class="br0">{</span><br>            c <span class="sy0">=</span> uncompressed.<span class="me1">charAt</span><span class="br0">(</span>i<span class="br0">)</span><span class="sy0">;</span><br>            wc <span class="sy0">=</span> w <span class="sy0">+</span> c<span class="sy0">;</span><br>            <span class="kw1">if</span> <span class="br0">(</span>dictionary<span class="br0">[</span>wc<span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span><br>                w <span class="sy0">=</span> wc<span class="sy0">;</span><br>            <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>                result.<span class="me1">push</span><span class="br0">(</span>dictionary<span class="br0">[</span>w<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>                <span class="co1">// Add wc to the dictionary.</span><br>                dictionary<span class="br0">[</span>wc<span class="br0">]</span> <span class="sy0">=</span> dictSize<span class="sy0">++;</span><br>                w <span class="sy0">=</span> <span class="kw4">String</span><span class="br0">(</span>c<span class="br0">)</span><span class="sy0">;</span><br>            <span class="br0">}</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="co1">// Output the code for w.</span><br>        <span class="kw1">if</span> <span class="br0">(</span>w <span class="sy0">!==</span> <span class="st0">""</span><span class="br0">)</span> <span class="br0">{</span><br>            result.<span class="me1">push</span><span class="br0">(</span>dictionary<span class="br0">[</span>w<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>        <span class="kw1">return</span> result<span class="sy0">;</span><br>    <span class="br0">}</span><span class="sy0">,</span><br>&nbsp;<br>&nbsp;<br>    decompress<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">(</span>compressed<span class="br0">)</span> <span class="br0">{</span><br>        <span class="st0">"use strict"</span><span class="sy0">;</span><br>        <span class="co1">// Build the dictionary.</span><br>        <span class="kw1">var</span> i<span class="sy0">,</span><br>            dictionary <span class="sy0">=</span> <span class="br0">[</span><span class="br0">]</span><span class="sy0">,</span><br>            w<span class="sy0">,</span><br>            result<span class="sy0">,</span><br>            k<span class="sy0">,</span><br>            entry <span class="sy0">=</span> <span class="st0">""</span><span class="sy0">,</span><br>            dictSize <span class="sy0">=</span> <span class="nu0">256</span><span class="sy0">;</span><br>        <span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">256</span><span class="sy0">;</span> i <span class="sy0">+=</span> <span class="nu0">1</span><span class="br0">)</span> <span class="br0">{</span><br>            dictionary<span class="br0">[</span>i<span class="br0">]</span> <span class="sy0">=</span> <span class="kw4">String</span>.<span class="me1">fromCharCode</span><span class="br0">(</span>i<span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        w <span class="sy0">=</span> <span class="kw4">String</span>.<span class="me1">fromCharCode</span><span class="br0">(</span>compressed<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>        result <span class="sy0">=</span> w<span class="sy0">;</span><br>        <span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> compressed.<span class="me1">length</span><span class="sy0">;</span> i <span class="sy0">+=</span> <span class="nu0">1</span><span class="br0">)</span> <span class="br0">{</span><br>            k <span class="sy0">=</span> compressed<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">;</span><br>            <span class="kw1">if</span> <span class="br0">(</span>dictionary<span class="br0">[</span>k<span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span><br>                entry <span class="sy0">=</span> dictionary<span class="br0">[</span>k<span class="br0">]</span><span class="sy0">;</span><br>            <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>                <span class="kw1">if</span> <span class="br0">(</span>k <span class="sy0">===</span> dictSize<span class="br0">)</span> <span class="br0">{</span><br>                    entry <span class="sy0">=</span> w <span class="sy0">+</span> w.<span class="me1">charAt</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span><br>                <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>                    <span class="kw1">return</span> <span class="kw2">null</span><span class="sy0">;</span><br>                <span class="br0">}</span><br>            <span class="br0">}</span><br>&nbsp;<br>            result <span class="sy0">+=</span> entry<span class="sy0">;</span><br>&nbsp;<br>            <span class="co1">// Add w+entry[0] to the dictionary.</span><br>            dictionary<span class="br0">[</span>dictSize<span class="sy0">++</span><span class="br0">]</span> <span class="sy0">=</span> w <span class="sy0">+</span> entry.<span class="me1">charAt</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>            w <span class="sy0">=</span> entry<span class="sy0">;</span><br>        <span class="br0">}</span><br>        <span class="kw1">return</span> result<span class="sy0">;</span><br>    <span class="br0">}</span><br><span class="br0">}</span><span class="sy0">,</span> <span class="co1">// For Test Purposes</span><br>    comp <span class="sy0">=</span> LZW.<span class="me1">compress</span><span class="br0">(</span><span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><span class="br0">)</span><span class="sy0">,</span><br>    decomp <span class="sy0">=</span> LZW.<span class="me1">decompress</span><span class="br0">(</span>comp<span class="br0">)</span><span class="sy0">;</span><br>document.<span class="me1">write</span><span class="br0">(</span>comp <span class="sy0">+</span> <span class="st0">'&lt;br&gt;'</span> <span class="sy0">+</span> decomp<span class="br0">)</span><span class="sy0">;</span></pre>
<p>Output:
</p>
<pre class="javascript highlighted_source"><span class="nu0">84</span><span class="sy0">,</span><span class="nu0">79</span><span class="sy0">,</span><span class="nu0">66</span><span class="sy0">,</span><span class="nu0">69</span><span class="sy0">,</span><span class="nu0">79</span><span class="sy0">,</span><span class="nu0">82</span><span class="sy0">,</span><span class="nu0">78</span><span class="sy0">,</span><span class="nu0">79</span><span class="sy0">,</span><span class="nu0">84</span><span class="sy0">,</span><span class="nu0">256</span><span class="sy0">,</span><span class="nu0">258</span><span class="sy0">,</span><span class="nu0">260</span><span class="sy0">,</span><span class="nu0">265</span><span class="sy0">,</span><span class="nu0">259</span><span class="sy0">,</span><span class="nu0">261</span><span class="sy0">,</span><span class="nu0">263</span><br>TOBEORNOTTOBEORTOBEORNOT</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=19" title="Edit section: Objective-C">edit</a>]</span> <span class="mw-headline" id="Objective-C"><a href="http://rosettacode.org/wiki/Category:Objective-C" title="Category:Objective-C">Objective-C</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/GNUstep" title="GNUstep">GNUstep</a></div>
<p>The class for the LZW compression algorithm:
</p>
<pre class="objc highlighted_source"><span class="co1">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="co1">#import &lt;stdio.h&gt;</span><br>&nbsp;<br><span class="kw1">@interface</span> LZWCompressor <span class="sy0">:</span> <a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/"><span class="kw5">NSObject</span></a><br><span class="br0">{</span><br>  <span class="kw1">@private</span><br>    <a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/"><span class="kw5">NSMutableArray</span></a> <span class="sy0">*</span>iostream;<br>    <a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableDictionary_Class/"><span class="kw5">NSMutableDictionary</span></a> <span class="sy0">*</span>dict;<br>    NSUInteger codemark;<br><span class="br0">}</span><br>&nbsp;<br><span class="sy0">-</span><span class="br0">(</span>LZWCompressor <span class="sy0">*</span><span class="br0">)</span> init;<br><span class="sy0">-</span><span class="br0">(</span>LZWCompressor <span class="sy0">*</span><span class="br0">)</span> initWithArray<span class="sy0">:</span> <span class="br0">(</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/"><span class="kw5">NSMutableArray</span></a> <span class="sy0">*</span><span class="br0">)</span> stream;<br><span class="sy0">-</span><span class="br0">(</span><span class="kw4">BOOL</span><span class="br0">)</span> compressData<span class="sy0">:</span> <span class="br0">(</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/"><span class="kw5">NSData</span></a> <span class="sy0">*</span><span class="br0">)</span> <span class="kw4">string</span>;<br><span class="sy0">-</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> setArray<span class="sy0">:</span> <span class="br0">(</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/"><span class="kw5">NSMutableArray</span></a> <span class="sy0">*</span><span class="br0">)</span> stream;<br><span class="sy0">-</span><span class="br0">(</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/"><span class="kw5">NSArray</span></a> <span class="sy0">*</span><span class="br0">)</span> getArray;<br><span class="kw1">@end</span><br>&nbsp;<br><span class="kw1">@implementation</span> LZWCompressor <span class="sy0">:</span> <a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/"><span class="kw5">NSObject</span></a><br>&nbsp;<br><span class="sy0">-</span><span class="br0">(</span>LZWCompressor <span class="sy0">*</span><span class="br0">)</span> init<br><span class="br0">{</span><br>   self <span class="sy0">=</span> <span class="br0">[</span>super init<span class="br0">]</span>;<br>   <span class="kw1">if</span> <span class="br0">(</span> self <span class="br0">)</span><br>   <span class="br0">{</span><br>      iostream <span class="sy0">=</span> <span class="kw2">nil</span>;<br>      codemark <span class="sy0">=</span> <span class="nu0">256</span>;<br>      dict <span class="sy0">=</span> <span class="br0">[</span><span class="br0">[</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableDictionary_Class/"><span class="kw5">NSMutableDictionary</span></a> alloc<span class="br0">]</span> initWithCapacity<span class="sy0">:</span> <span class="nu0">512</span><span class="br0">]</span>;<br>   <span class="br0">}</span><br>   <span class="kw1">return</span> self;<br><span class="br0">}</span><br>&nbsp;<br><span class="sy0">-</span><span class="br0">(</span>LZWCompressor <span class="sy0">*</span><span class="br0">)</span> initWithArray<span class="sy0">:</span> <span class="br0">(</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/"><span class="kw5">NSMutableArray</span></a> <span class="sy0">*</span><span class="br0">)</span> stream<br><span class="br0">{</span><br>   self <span class="sy0">=</span> <span class="br0">[</span>self init<span class="br0">]</span>;<br>   <span class="kw1">if</span> <span class="br0">(</span> self <span class="br0">)</span><br>   <span class="br0">{</span><br>      <span class="br0">[</span>self setArray<span class="sy0">:</span> stream<span class="br0">]</span>;<br>   <span class="br0">}</span><br>   <span class="kw1">return</span> self;<br><span class="br0">}</span><br>&nbsp;<br><span class="sy0">-</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> dealloc<br><span class="br0">{</span><br>   <span class="br0">[</span>dict release<span class="br0">]</span>;<br>   <span class="br0">[</span>iostream release<span class="br0">]</span>;<br>   <span class="br0">[</span>super dealloc<span class="br0">]</span>;<br><span class="br0">}</span><br>&nbsp;<br><span class="sy0">-</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> setArray<span class="sy0">:</span> <span class="br0">(</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/"><span class="kw5">NSMutableArray</span></a> <span class="sy0">*</span><span class="br0">)</span> stream<br><span class="br0">{</span><br>   iostream <span class="sy0">=</span> <span class="br0">[</span>stream retain<span class="br0">]</span>;<br><span class="br0">}</span><br>&nbsp;<br><span class="sy0">-</span><span class="br0">(</span><span class="kw4">BOOL</span><span class="br0">)</span> compressData<span class="sy0">:</span> <span class="br0">(</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/"><span class="kw5">NSData</span></a> <span class="sy0">*</span><span class="br0">)</span> <span class="kw4">string</span>;<br><span class="br0">{</span><br>    NSUInteger i;<br>    <span class="kw4">unsigned</span> <span class="kw4">char</span> j;<br>&nbsp;<br>    <span class="co2">// prepare dict</span><br>    <span class="kw1">for</span><span class="br0">(</span>i<span class="sy0">=</span><span class="nu0">0</span>; i &lt; <span class="nu0">256</span>; i<span class="sy0">++</span><span class="br0">)</span><br>    <span class="br0">{</span><br>       j <span class="sy0">=</span> i;<br>       <a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/"><span class="kw5">NSData</span></a> <span class="sy0">*</span>s <span class="sy0">=</span> <span class="br0">[</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/"><span class="kw5">NSData</span></a> dataWithBytes<span class="sy0">:</span> <span class="sy0">&amp;</span>j length<span class="sy0">:</span> <span class="nu0">1</span><span class="br0">]</span>;<br>       <span class="br0">[</span>dict setObject<span class="sy0">:</span> <span class="br0">[</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/"><span class="kw5">NSNumber</span></a> numberWithUnsignedInt<span class="sy0">:</span> i<span class="br0">]</span> forKey<span class="sy0">:</span> s<span class="br0">]</span>;<br>    <span class="br0">}</span><br>&nbsp;<br>    <a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableData_Class/"><span class="kw5">NSMutableData</span></a> <span class="sy0">*</span>w <span class="sy0">=</span> <span class="br0">[</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableData_Class/"><span class="kw5">NSMutableData</span></a> data<span class="br0">]</span>;<br>    <a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableData_Class/"><span class="kw5">NSMutableData</span></a> <span class="sy0">*</span>wc <span class="sy0">=</span> <span class="br0">[</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableData_Class/"><span class="kw5">NSMutableData</span></a> data<span class="br0">]</span>;<br>&nbsp;<br>    <span class="kw1">for</span><span class="br0">(</span>i<span class="sy0">=</span><span class="nu0">0</span>; i &lt; <span class="br0">[</span><span class="kw4">string</span> length<span class="br0">]</span>; i<span class="sy0">++</span><span class="br0">)</span><br>    <span class="br0">{</span><br>       <span class="br0">[</span>wc setData<span class="sy0">:</span> w<span class="br0">]</span>;<br>       <span class="br0">[</span>wc appendData<span class="sy0">:</span> <span class="br0">[</span><span class="kw4">string</span> subdataWithRange<span class="sy0">:</span> NSMakeRange<span class="br0">(</span>i, <span class="nu0">1</span><span class="br0">)</span><span class="br0">]</span><span class="br0">]</span>;<br>       <span class="kw1">if</span> <span class="br0">(</span> <span class="br0">[</span>dict objectForKey<span class="sy0">:</span> wc<span class="br0">]</span> <span class="sy0">!=</span> <span class="kw2">nil</span> <span class="br0">)</span><br>       <span class="br0">{</span><br>          <span class="br0">[</span>w setData<span class="sy0">:</span> wc<span class="br0">]</span>;<br>       <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>          <span class="br0">[</span>iostream addObject<span class="sy0">:</span> <span class="br0">[</span>dict objectForKey<span class="sy0">:</span> w<span class="br0">]</span><span class="br0">]</span>;<br>          <span class="br0">[</span>dict setObject<span class="sy0">:</span> <span class="br0">[</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/"><span class="kw5">NSNumber</span></a> numberWithUnsignedInt<span class="sy0">:</span> codemark<span class="br0">]</span> forKey<span class="sy0">:</span> wc<span class="br0">]</span>;<br>          codemark<span class="sy0">++</span>;<br>          <span class="br0">[</span>w setData<span class="sy0">:</span> <span class="br0">[</span><span class="kw4">string</span> subdataWithRange<span class="sy0">:</span> NSMakeRange<span class="br0">(</span>i, <span class="nu0">1</span><span class="br0">)</span><span class="br0">]</span><span class="br0">]</span>;<br>       <span class="br0">}</span><br>    <span class="br0">}</span><br>    <span class="kw1">if</span> <span class="br0">(</span> <span class="br0">[</span>w length<span class="br0">]</span> <span class="sy0">!=</span> <span class="nu0">0</span> <span class="br0">)</span><br>    <span class="br0">{</span><br>       <span class="br0">[</span>iostream addObject<span class="sy0">:</span> <span class="br0">[</span>dict objectForKey<span class="sy0">:</span> w<span class="br0">]</span><span class="br0">]</span>;<br>    <span class="br0">}</span><br>    <span class="kw1">return</span> <span class="kw2">YES</span>;<br><span class="br0">}</span><br>&nbsp;<br><span class="sy0">-</span><span class="br0">(</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/"><span class="kw5">NSArray</span></a> <span class="sy0">*</span><span class="br0">)</span> getArray<br><span class="br0">{</span><br>  <span class="kw1">return</span> iostream;<br><span class="br0">}</span><br>&nbsp;<br><span class="kw1">@end</span></pre>
<p>Usage example:
</p>
<pre class="objc highlighted_source"><span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>text <span class="sy0">=</span> <span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span>;<br>&nbsp;<br><span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span><br><span class="br0">{</span><br>  <a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSAutoreleasePool_Class/"><span class="kw5">NSAutoreleasePool</span></a> <span class="sy0">*</span>pool <span class="sy0">=</span> <span class="br0">[</span><span class="br0">[</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSAutoreleasePool_Class/"><span class="kw5">NSAutoreleasePool</span></a> alloc<span class="br0">]</span> init<span class="br0">]</span>;<br>&nbsp;<br>  <a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/"><span class="kw5">NSMutableArray</span></a> <span class="sy0">*</span>array <span class="sy0">=</span> <span class="br0">[</span><span class="br0">[</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/"><span class="kw5">NSMutableArray</span></a> alloc<span class="br0">]</span> init<span class="br0">]</span>;<br>  LZWCompressor <span class="sy0">*</span>lzw <span class="sy0">=</span> <span class="br0">[</span><span class="br0">[</span>LZWCompressor alloc<span class="br0">]</span><br>                        initWithArray<span class="sy0">:</span> array <span class="br0">]</span>;<br>  <span class="kw1">if</span> <span class="br0">(</span> lzw <span class="br0">)</span><br>  <span class="br0">{</span><br>     <span class="br0">[</span>lzw compressData<span class="sy0">:</span> <span class="br0">[</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/"><span class="kw5">NSData</span></a> dataWithBytes<span class="sy0">:</span> text<br>                         length<span class="sy0">:</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html"><span class="kw3">strlen</span></a><span class="br0">(</span>text<span class="br0">)</span><span class="br0">]</span><span class="br0">]</span>;<br>     <a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSEnumerator_Class/"><span class="kw5">NSEnumerator</span></a> <span class="sy0">*</span>en <span class="sy0">=</span> <span class="br0">[</span>array objectEnumerator<span class="br0">]</span>;<br>     <span class="kw4">id</span> obj;<br>     <span class="kw1">while</span><span class="br0">(</span> <span class="br0">(</span>obj <span class="sy0">=</span> <span class="br0">[</span>en nextObject<span class="br0">]</span><span class="br0">)</span> <span class="br0">)</span><br>     <span class="br0">{</span><br>        <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">(</span><span class="st0">"%u<span class="es0">\n</span>"</span>, <span class="br0">[</span>obj unsignedIntValue<span class="br0">]</span><span class="br0">)</span>;<br>     <span class="br0">}</span><br>     <span class="br0">[</span>lzw release<span class="br0">]</span>;<br>  <span class="br0">}</span><br>  <span class="br0">[</span>array release<span class="br0">]</span>;<br>&nbsp;<br>  <span class="br0">[</span>pool release<span class="br0">]</span>;<br>  <span class="kw1">return</span> <span class="kw2">EXIT_SUCCESS</span>;<br><span class="br0">}</span></pre>
<p>Output (reformatted by hand):
</p>
<pre> 84  79  66  69  79  82  78  79
 84 256 258 260 265 259 261 263
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=20" title="Edit section: OCaml">edit</a>]</span> <span class="mw-headline" id="OCaml"><a href="http://rosettacode.org/wiki/Category:OCaml" title="Category:OCaml">OCaml</a></span></h2>
<pre class="ocaml highlighted_source"><span class="sy0">#</span>directory <span class="st0">"+extlib"</span>  <span class="co1">(* or maybe "+site-lib/extlib/" *)</span><br><span class="sy0">#</span>load <span class="st0">"extLib.cma"</span><br><span class="kw1">open</span> ExtString<br>&nbsp;<br><span class="co1">(** compress a string to a list of output symbols *)</span><br><span class="kw1">let</span> compress <span class="re1">~uncompressed</span> <span class="sy0">=</span><br>  <span class="co1">(* build the dictionary *)</span><br>  <span class="kw1">let</span> dict_size <span class="sy0">=</span> <span class="nu0">256</span> <span class="kw1">in</span><br>  <span class="kw1">let</span> dictionary <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html"><span class="kw2">Hashtbl</span></a><span class="sy0">.</span>create <span class="nu0">397</span> <span class="kw1">in</span><br>  <span class="kw1">for</span> i<span class="sy0">=</span><span class="nu0">0</span> <span class="kw1">to</span> <span class="nu0">255</span> <span class="kw1">do</span><br>    <span class="kw1">let</span> str <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html"><span class="kw2">String</span></a><span class="sy0">.</span>make <span class="nu0">1</span> <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALchar_of_int"><span class="kw3">char_of_int</span></a> i<span class="br0">)</span> <span class="kw1">in</span><br>    <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html"><span class="kw2">Hashtbl</span></a><span class="sy0">.</span>add dictionary str i<br>  <span class="kw1">done</span><span class="sy0">;</span><br>&nbsp;<br>  <span class="kw1">let</span> f <span class="sy0">=</span> <span class="br0">(</span><span class="kw1">fun</span> <span class="br0">(</span>w, dict_size, result<span class="br0">)</span> c <span class="sy0">-&gt;</span><br>    <span class="kw1">let</span> c <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html"><span class="kw2">String</span></a><span class="sy0">.</span>make <span class="nu0">1</span> c <span class="kw1">in</span><br>    <span class="kw1">let</span> wc <span class="sy0">=</span> w <span class="sy0">^</span> c <span class="kw1">in</span><br>    <span class="kw1">if</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html"><span class="kw2">Hashtbl</span></a><span class="sy0">.</span>mem dictionary wc <span class="kw1">then</span><br>      <span class="br0">(</span>wc, dict_size, result<span class="br0">)</span><br>    <span class="kw1">else</span><br>      <span class="kw1">begin</span><br>        <span class="co1">(* add wc to the dictionary *)</span><br>        <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html"><span class="kw2">Hashtbl</span></a><span class="sy0">.</span>add dictionary wc dict_size<span class="sy0">;</span><br>        <span class="kw1">let</span> this <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html"><span class="kw2">Hashtbl</span></a><span class="sy0">.</span>find dictionary w <span class="kw1">in</span><br>        <span class="br0">(</span>c, dict_size <span class="sy0">+</span> <span class="nu0">1</span>, this<span class="sy0">::</span>result<span class="br0">)</span><br>      <span class="kw1">end</span><br>  <span class="br0">)</span> <span class="kw1">in</span><br>  <span class="kw1">let</span> w, _, result <span class="sy0">=</span><br>    <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html"><span class="kw2">String</span></a><span class="sy0">.</span>fold_left f <span class="br0">(</span><span class="st0">""</span>, dict_size, <span class="br0">[</span><span class="br0">]</span><span class="br0">)</span> uncompressed<br>  <span class="kw1">in</span><br>&nbsp;<br>  <span class="co1">(* output the code for w *)</span><br>  <span class="kw1">let</span> result <span class="sy0">=</span><br>    <span class="kw1">if</span> w <span class="sy0">=</span> <span class="st0">""</span><br>    <span class="kw1">then</span> result<br>    <span class="kw1">else</span> <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html"><span class="kw2">Hashtbl</span></a><span class="sy0">.</span>find dictionary w<span class="br0">)</span> <span class="sy0">::</span> result<br>  <span class="kw1">in</span><br>&nbsp;<br>  <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>rev result<span class="br0">)</span><br><span class="sy0">;;</span><br>&nbsp;<br><span class="kw1">exception</span> ValueError <span class="kw1">of</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring"><span class="kw4">string</span></a><br>&nbsp;<br><span class="co1">(** decompress a list of output symbols to a string *)</span><br><span class="kw1">let</span> decompress <span class="re1">~compressed</span> <span class="sy0">=</span><br>  <span class="co1">(* build the dictionary *)</span><br>  <span class="kw1">let</span> dict_size <span class="sy0">=</span> <span class="nu0">256</span> <span class="kw1">in</span><br>  <span class="kw1">let</span> dictionary <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html"><span class="kw2">Hashtbl</span></a><span class="sy0">.</span>create <span class="nu0">397</span> <span class="kw1">in</span><br>  <span class="kw1">for</span> i<span class="sy0">=</span><span class="nu0">0</span> <span class="kw1">to</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred"><span class="kw3">pred</span></a> dict_size <span class="kw1">do</span><br>    <span class="kw1">let</span> str <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html"><span class="kw2">String</span></a><span class="sy0">.</span>make <span class="nu0">1</span> <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALchar_of_int"><span class="kw3">char_of_int</span></a> i<span class="br0">)</span> <span class="kw1">in</span><br>    <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html"><span class="kw2">Hashtbl</span></a><span class="sy0">.</span>add dictionary i str<br>  <span class="kw1">done</span><span class="sy0">;</span><br>&nbsp;<br>  <span class="kw1">let</span> w, compressed <span class="sy0">=</span><br>    <span class="kw1">match</span> compressed <span class="kw1">with</span><br>    <span class="sy0">|</span> hd<span class="sy0">::</span>tl <span class="sy0">-&gt;</span> <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html"><span class="kw2">String</span></a><span class="sy0">.</span>make <span class="nu0">1</span> <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALchar_of_int"><span class="kw3">char_of_int</span></a> hd<span class="br0">)</span><span class="br0">)</span>, tl<br>    <span class="sy0">|</span> <span class="br0">[</span><span class="br0">]</span> <span class="sy0">-&gt;</span> <span class="kw1">failwith</span> <span class="st0">"empty input"</span><br>  <span class="kw1">in</span><br>&nbsp;<br>  <span class="kw1">let</span> result <span class="sy0">=</span> <span class="br0">[</span>w<span class="br0">]</span> <span class="kw1">in</span><br>&nbsp;<br>  <span class="kw1">let</span> result, _, _ <span class="sy0">=</span><br>    <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>fold_left <span class="br0">(</span><span class="kw1">fun</span> <span class="br0">(</span>result, w, dict_size<span class="br0">)</span> k <span class="sy0">-&gt;</span><br>      <span class="kw1">let</span> entry <span class="sy0">=</span><br>        <span class="kw1">if</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html"><span class="kw2">Hashtbl</span></a><span class="sy0">.</span>mem dictionary k <span class="kw1">then</span><br>          <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html"><span class="kw2">Hashtbl</span></a><span class="sy0">.</span>find dictionary k<br>        <span class="kw1">else</span> <span class="kw1">if</span> k <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html"><span class="kw2">Hashtbl</span></a><span class="sy0">.</span>length dictionary <span class="kw1">then</span><br>          w <span class="sy0">^</span> <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html"><span class="kw2">String</span></a><span class="sy0">.</span>make <span class="nu0">1</span> w<span class="sy0">.</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span><br>        <span class="kw1">else</span><br>          <span class="kw1">raise</span><span class="br0">(</span>ValueError<span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html"><span class="kw2">Printf</span></a><span class="sy0">.</span>sprintf <span class="st0">"Bad compressed k:&nbsp;%d"</span> k<span class="br0">)</span><span class="br0">)</span><br>      <span class="kw1">in</span><br>      <span class="kw1">let</span> result <span class="sy0">=</span> entry <span class="sy0">::</span> result <span class="kw1">in</span><br>&nbsp;<br>      <span class="co1">(* add (w ^ entry.[0]) to the dictionary *)</span><br>      <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html"><span class="kw2">Hashtbl</span></a><span class="sy0">.</span>add dictionary dict_size <span class="br0">(</span>w <span class="sy0">^</span> <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html"><span class="kw2">String</span></a><span class="sy0">.</span>make <span class="nu0">1</span> entry<span class="sy0">.</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>      <span class="br0">(</span>result, entry, dict_size <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span><br>    <span class="br0">)</span> <span class="br0">(</span>result, w, dict_size<span class="br0">)</span> compressed<br>  <span class="kw1">in</span><br>  <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>rev result<span class="br0">)</span><br><span class="sy0">;;</span></pre>
<p>here is the interface:
</p>
<pre class="ocaml highlighted_source"><span class="kw1">val</span> compress <span class="sy0">:</span> uncompressed<span class="sy0">:</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring"><span class="kw4">string</span></a> <span class="sy0">-&gt;</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint"><span class="kw4">int</span></a> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist"><span class="kw4">list</span></a><br><span class="kw1">val</span> decompress <span class="sy0">:</span> compressed<span class="sy0">:</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint"><span class="kw4">int</span></a> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist"><span class="kw4">list</span></a> <span class="sy0">-&gt;</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring"><span class="kw4">string</span></a> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist"><span class="kw4">list</span></a></pre>
<p>How to use:<br>
The compressed datas are a list of symbols (of type int) that will require more than 8 bits to be saved.
So to know how many bits are required, you need to know how many bits are required for the greatest symbol in the list.
</p>
<pre class="ocaml highlighted_source"><span class="kw1">let</span> greatest <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>fold_left <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax"><span class="kw3">max</span></a> <span class="nu0">0</span> <span class="sy0">;;</span><br>&nbsp;<br><span class="co1">(** number of bits needed to encode the integer m *)</span><br><span class="kw1">let</span> n_bits m <span class="sy0">=</span><br>  <span class="kw1">let</span> m <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat"><span class="kw3">float</span></a> m <span class="kw1">in</span><br>  <span class="kw1">let</span> <span class="kw1">rec</span> aux n <span class="sy0">=</span><br>    <span class="kw1">let</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax"><span class="kw3">max</span></a> <span class="sy0">=</span> <span class="br0">(</span><span class="nu0">2</span><span class="sy0">.</span> <span class="sy0">**</span> n<span class="br0">)</span> <span class="sy0">-.</span> <span class="nu0">1</span><span class="sy0">.</span> <span class="kw1">in</span><br>    <span class="kw1">if</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax"><span class="kw3">max</span></a> <span class="sy0">&gt;=</span> m <span class="kw1">then</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_float"><span class="kw3">int_of_float</span></a> n<br>    <span class="kw1">else</span> aux <span class="br0">(</span>n <span class="sy0">+.</span> <span class="nu0">1.0</span><span class="br0">)</span><br>  <span class="kw1">in</span><br>  aux <span class="nu0">1.0</span><br><span class="sy0">;;</span><br>&nbsp;<br><span class="kw1">let</span> write_compressed <span class="re1">~filename</span> <span class="re1">~compressed</span> <span class="sy0">=</span><br>  <span class="kw1">let</span> nbits <span class="sy0">=</span> n_bits<span class="br0">(</span>greatest compressed<span class="br0">)</span> <span class="kw1">in</span><br>  <span class="kw1">let</span> oc <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_out"><span class="kw3">open_out</span></a> filename <span class="kw1">in</span><br>  <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALoutput_byte"><span class="kw3">output_byte</span></a> oc nbits<span class="sy0">;</span><br>  <span class="kw1">let</span> ob <span class="sy0">=</span> IO<span class="sy0">.</span>output_bits<span class="br0">(</span>IO<span class="sy0">.</span>output_channel oc<span class="br0">)</span> <span class="kw1">in</span><br>  <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>iter <span class="br0">(</span>IO<span class="sy0">.</span>write_bits ob nbits<span class="br0">)</span> compressed<span class="sy0">;</span><br>  IO<span class="sy0">.</span>flush_bits ob<span class="sy0">;</span><br>  <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_out"><span class="kw3">close_out</span></a> oc<span class="sy0">;</span><br><span class="sy0">;;</span><br>&nbsp;<br><span class="kw1">let</span> read_compressed <span class="re1">~filename</span> <span class="sy0">=</span><br>  <span class="kw1">let</span> ic <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in"><span class="kw3">open_in</span></a> filename <span class="kw1">in</span><br>  <span class="kw1">let</span> nbits <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_byte"><span class="kw3">input_byte</span></a> ic <span class="kw1">in</span><br>  <span class="kw1">let</span> ib <span class="sy0">=</span> IO<span class="sy0">.</span>input_bits<span class="br0">(</span>IO<span class="sy0">.</span>input_channel ic<span class="br0">)</span> <span class="kw1">in</span><br>  <span class="kw1">let</span> <span class="kw1">rec</span> loop acc <span class="sy0">=</span><br>    <span class="kw1">try</span><br>      <span class="kw1">let</span> code <span class="sy0">=</span> IO<span class="sy0">.</span>read_bits ib nbits <span class="kw1">in</span><br>      loop <span class="br0">(</span>code<span class="sy0">::</span>acc<span class="br0">)</span><br>    <span class="kw1">with</span> _ <span class="sy0">-&gt;</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>rev acc<br>  <span class="kw1">in</span><br>  <span class="kw1">let</span> compressed <span class="sy0">=</span> loop <span class="br0">[</span><span class="br0">]</span> <span class="kw1">in</span><br>  <span class="kw1">let</span> result <span class="sy0">=</span> decompress <span class="re1">~compressed</span> <span class="kw1">in</span><br>  <span class="kw1">let</span> buf <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Buffer.html"><span class="kw2">Buffer</span></a><span class="sy0">.</span>create <span class="nu0">2048</span> <span class="kw1">in</span><br>  <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>iter <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Buffer.html"><span class="kw2">Buffer</span></a><span class="sy0">.</span>add_string buf<span class="br0">)</span> result<span class="sy0">;</span><br>  <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Buffer.html"><span class="kw2">Buffer</span></a><span class="sy0">.</span>contents buf<span class="br0">)</span><br><span class="sy0">;;</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=21" title="Edit section: Perl">edit</a>]</span> <span class="mw-headline" id="Perl"><a href="http://rosettacode.org/wiki/Category:Perl" title="Category:Perl">Perl</a></span></h2>
<p>In this version the hashes contain mixed typed data:
</p>
<pre class="perl highlighted_source"><span class="co1"># Compress a string to a list of output symbols.</span><br><span class="kw2">sub</span> compress <span class="br0">{</span><br>    <span class="kw1">my</span> <span class="re0">$uncompressed</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/shift.html"><span class="kw3">shift</span></a><span class="sy0">;</span><br>&nbsp;<br>    <span class="co1"># Build the dictionary.</span><br>    <span class="kw1">my</span> <span class="re0">$dict_size</span> <span class="sy0">=</span> <span class="nu0">256</span><span class="sy0">;</span><br>    <span class="kw1">my</span> <span class="re0">%dictionary</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/map.html"><span class="kw3">map</span></a> <span class="br0">{</span><a href="http://perldoc.perl.org/functions/chr.html"><span class="kw3">chr</span></a> <span class="co5">$_</span> <span class="sy0">=&gt;</span> <a href="http://perldoc.perl.org/functions/chr.html"><span class="kw3">chr</span></a> <span class="co5">$_</span><span class="br0">}</span> <span class="nu0">0</span><span class="sy0">..</span><span class="re0">$dict_size</span><span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span><br>&nbsp;<br>    <span class="kw1">my</span> <span class="re0">$w</span> <span class="sy0">=</span> <span class="st0">""</span><span class="sy0">;</span><br>    <span class="kw1">my</span> <span class="re0">@result</span><span class="sy0">;</span><br>    <span class="kw1">foreach</span> <span class="kw1">my</span> <span class="re0">$c</span> <span class="br0">(</span><a href="http://perldoc.perl.org/functions/split.html"><span class="kw3">split</span></a> <span class="st_h">''</span><span class="sy0">,</span> <span class="re0">$uncompressed</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw1">my</span> <span class="re0">$wc</span> <span class="sy0">=</span> <span class="re0">$w</span> <span class="sy0">.</span> <span class="re0">$c</span><span class="sy0">;</span><br>        <span class="kw1">if</span> <span class="br0">(</span><a href="http://perldoc.perl.org/functions/exists.html"><span class="kw3">exists</span></a> <span class="re0">$dictionary</span><span class="br0">{</span><span class="re0">$wc</span><span class="br0">}</span><span class="br0">)</span> <span class="br0">{</span><br>            <span class="re0">$w</span> <span class="sy0">=</span> <span class="re0">$wc</span><span class="sy0">;</span><br>        <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>            <a href="http://perldoc.perl.org/functions/push.html"><span class="kw3">push</span></a> <span class="re0">@result</span><span class="sy0">,</span> <span class="re0">$dictionary</span><span class="br0">{</span><span class="re0">$w</span><span class="br0">}</span><span class="sy0">;</span><br>            <span class="co1"># Add wc to the dictionary.</span><br>            <span class="re0">$dictionary</span><span class="br0">{</span><span class="re0">$wc</span><span class="br0">}</span> <span class="sy0">=</span> <span class="re0">$dict_size</span><span class="sy0">;</span><br>            <span class="re0">$dict_size</span><span class="sy0">++;</span><br>            <span class="re0">$w</span> <span class="sy0">=</span> <span class="re0">$c</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="co1"># Output the code for w.</span><br>    <span class="kw1">if</span> <span class="br0">(</span><span class="re0">$w</span><span class="br0">)</span> <span class="br0">{</span><br>        <a href="http://perldoc.perl.org/functions/push.html"><span class="kw3">push</span></a> <span class="re0">@result</span><span class="sy0">,</span> <span class="re0">$dictionary</span><span class="br0">{</span><span class="re0">$w</span><span class="br0">}</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>    <a href="http://perldoc.perl.org/functions/return.html"><span class="kw3">return</span></a> <span class="re0">@result</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="co1"># Decompress a list of output ks to a string.</span><br><span class="kw2">sub</span> decompress <span class="br0">{</span><br>    <span class="kw1">my</span> <span class="re0">@compressed</span> <span class="sy0">=</span> <span class="co5">@_</span><span class="sy0">;</span><br>&nbsp;<br>    <span class="co1"># Build the dictionary.</span><br>    <span class="kw1">my</span> <span class="re0">$dict_size</span> <span class="sy0">=</span> <span class="nu0">256</span><span class="sy0">;</span><br>    <span class="kw1">my</span> <span class="re0">%dictionary</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/map.html"><span class="kw3">map</span></a> <span class="br0">{</span><a href="http://perldoc.perl.org/functions/chr.html"><span class="kw3">chr</span></a> <span class="co5">$_</span> <span class="sy0">=&gt;</span> <a href="http://perldoc.perl.org/functions/chr.html"><span class="kw3">chr</span></a> <span class="co5">$_</span><span class="br0">}</span> <span class="nu0">0</span><span class="sy0">..</span><span class="re0">$dict_size</span><span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span><br>&nbsp;<br>    <span class="kw1">my</span> <span class="re0">$w</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/shift.html"><span class="kw3">shift</span></a> <span class="re0">@compressed</span><span class="sy0">;</span><br>    <span class="kw1">my</span> <span class="re0">$result</span> <span class="sy0">=</span> <span class="re0">$w</span><span class="sy0">;</span><br>    <span class="kw1">foreach</span> <span class="kw1">my</span> <span class="re0">$k</span> <span class="br0">(</span><span class="re0">@compressed</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw1">my</span> <span class="re0">$entry</span><span class="sy0">;</span><br>        <span class="kw1">if</span> <span class="br0">(</span><a href="http://perldoc.perl.org/functions/exists.html"><span class="kw3">exists</span></a> <span class="re0">$dictionary</span><span class="br0">{</span><span class="re0">$k</span><span class="br0">}</span><span class="br0">)</span> <span class="br0">{</span><br>            <span class="re0">$entry</span> <span class="sy0">=</span> <span class="re0">$dictionary</span><span class="br0">{</span><span class="re0">$k</span><span class="br0">}</span><span class="sy0">;</span><br>        <span class="br0">}</span> <span class="kw1">elsif</span> <span class="br0">(</span><span class="re0">$k</span> <span class="sy0">==</span> <span class="re0">$dict_size</span><span class="br0">)</span> <span class="br0">{</span><br>            <span class="re0">$entry</span> <span class="sy0">=</span> <span class="re0">$w</span> <span class="sy0">.</span> <a href="http://perldoc.perl.org/functions/substr.html"><span class="kw3">substr</span></a><span class="br0">(</span><span class="re0">$w</span><span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>            <a href="http://perldoc.perl.org/functions/die.html"><span class="kw3">die</span></a> <span class="st0">"Bad compressed k: $k"</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>        <span class="re0">$result</span> <span class="sy0">.=</span> <span class="re0">$entry</span><span class="sy0">;</span><br>&nbsp;<br>        <span class="co1"># Add w+entry[0] to the dictionary.</span><br>        <span class="re0">$dictionary</span><span class="br0">{</span><span class="re0">$dict_size</span><span class="br0">}</span> <span class="sy0">=</span> <span class="re0">$w</span> <span class="sy0">.</span> <a href="http://perldoc.perl.org/functions/substr.html"><span class="kw3">substr</span></a><span class="br0">(</span><span class="re0">$entry</span><span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="re0">$dict_size</span><span class="sy0">++;</span><br>&nbsp;<br>        <span class="re0">$w</span> <span class="sy0">=</span> <span class="re0">$entry</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>    <a href="http://perldoc.perl.org/functions/return.html"><span class="kw3">return</span></a> <span class="re0">$result</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="co1"># How to use:</span><br><span class="kw1">my</span> <span class="re0">@compressed</span> <span class="sy0">=</span> compress<span class="br0">(</span><span class="st_h">'TOBEORNOTTOBEORTOBEORNOT'</span><span class="br0">)</span><span class="sy0">;</span><br><a href="http://perldoc.perl.org/functions/print.html"><span class="kw3">print</span></a> <span class="st0">"@compressed<span class="es0">\n</span>"</span><span class="sy0">;</span><br><span class="kw1">my</span> <span class="re0">$decompressed</span> <span class="sy0">=</span> decompress<span class="br0">(</span><span class="re0">@compressed</span><span class="br0">)</span><span class="sy0">;</span><br><a href="http://perldoc.perl.org/functions/print.html"><span class="kw3">print</span></a> <span class="st0">"$decompressed<span class="es0">\n</span>"</span><span class="sy0">;</span></pre>
<p>Output:
</p>
<pre>T O B E O R N O T 256 258 260 265 259 261 263
TOBEORNOTTOBEORTOBEORNOT
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=22" title="Edit section: PicoLisp">edit</a>]</span> <span class="mw-headline" id="PicoLisp"><a href="http://rosettacode.org/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></span></h2>
<pre class="text highlighted_source">(de lzwCompress (Lst)<br>   (let (Codes 255  Dict)<br>      (balance 'Dict<br>         (make<br>            (for C Codes<br>               (link (cons (char C) C)) ) ) )<br>      (make<br>         (let W (pop 'Lst)<br>            (for C Lst<br>               (let WC (pack W C)<br>                  (if (lup Dict WC)<br>                     (setq W WC)<br>                     (link (cdr (lup Dict W)))<br>                     (idx 'Dict (cons WC (inc 'Codes)) T)<br>                     (setq W C) ) ) )<br>            (and W (link (cdr (lup Dict W)))) ) ) ) )<br>&nbsp;<br>(de lzwDecompress (Lst)<br>   (let (Codes 255  Dict)<br>      (balance 'Dict<br>         (make<br>            (for C Codes<br>               (link (list C (char C))) ) ) )<br>      (make<br>         (let W NIL<br>            (for N Lst<br>               (let WC (if (lup Dict N) (cdr @) (cons (last W) W))<br>                  (chain (reverse WC))<br>                  (when W<br>                     (idx 'Dict (cons (inc 'Codes) (cons (last WC) W)) T) )<br>                  (setq W WC) ) ) ) ) ) )</pre>
<p>Test:
</p>
<pre>: (lzwCompress (chop "TOBEORNOTTOBEORTOBEORNOT"))
-&gt; (84 79 66 69 79 82 78 79 84 256 258 260 265 259 261 263)

: (pack (lzwDecompress @))
-&gt; "TOBEORNOTTOBEORTOBEORNOT"</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=23" title="Edit section: PureBasic">edit</a>]</span> <span class="mw-headline" id="PureBasic"><a href="http://rosettacode.org/wiki/Category:PureBasic" title="Category:PureBasic">PureBasic</a></span></h2>
<p>This version encodes character sequences as 16-bit values.  Because this version only encodes an input string it won't handle Null values. This is because PureBasic uses these to terminate strings.  Only slight modifications are necessary to handle Null values that would be present for a more generic routine that could be used with a buffer containing any data type.
</p>
<pre class="purebasic highlighted_source"><span class="kw1">Procedure</span> compress<span class="br0">(</span>uncompressed.s, List result.u<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="co1">;Compress a string to a list of output symbols</span><br>&nbsp;<br>  <span class="co1">;Build the dictionary.</span><br>  <span class="kw1">Protected</span>  dict_size <span class="sy0">=</span> <span class="nu0">255</span>, i<br>  newmap dict.u<span class="br0">(</span><span class="br0">)</span><br>  <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> <span class="nu0">254</span><br>    dict<span class="br0">(</span><span class="kw2">Chr</span><span class="br0">(</span>i <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">=</span> i<br>  <span class="kw1">Next</span> <br>&nbsp;<br>  <span class="kw1">Protected</span> w.s, wc.s, <span class="sy0">*</span>c.Character <span class="sy0">=</span> @uncompressed<br>  w <span class="sy0">=</span> <span class="st0">""</span><br>  <span class="kw2">LastElement</span><span class="br0">(</span>result<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="kw1">While</span> <span class="sy0">*</span>c<span class="sy0">\</span>c <span class="sy0">&lt;&gt;</span> #Null<br>    wc <span class="sy0">=</span> w <span class="sy0">+</span> <span class="kw2">Chr</span><span class="br0">(</span><span class="sy0">*</span>c<span class="sy0">\</span>c<span class="br0">)</span><br>    <span class="kw1">If</span> FindMapElement<span class="br0">(</span>dict<span class="br0">(</span><span class="br0">)</span>, wc<span class="br0">)</span><br>      w <span class="sy0">=</span> wc<br>    <span class="kw1">Else</span><br>      <span class="kw2">AddElement</span><span class="br0">(</span>result<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>      result<span class="br0">(</span><span class="br0">)</span> <span class="sy0">=</span> dict<span class="br0">(</span>w<span class="br0">)</span><br>      <span class="co1">;Add wc to the dictionary</span><br>      dict<span class="br0">(</span>wc<span class="br0">)</span> <span class="sy0">=</span> dict_size<br>      dict_size <span class="sy0">+</span> <span class="nu0">1</span> <span class="co1">;no check is performed for overfilling the dictionary.</span><br>      w <span class="sy0">=</span> <span class="kw2">Chr</span><span class="br0">(</span><span class="sy0">*</span>c<span class="sy0">\</span>c<span class="br0">)</span><br>    <span class="kw1">EndIf</span> <br>    <span class="sy0">*</span>c <span class="sy0">+</span> <span class="nu0">1</span><br>  <span class="kw1">Wend</span><br>&nbsp;<br>  <span class="co1">;Output the code for w</span><br>  <span class="kw1">If</span> w<br>    <span class="kw2">AddElement</span><span class="br0">(</span>result<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>    result<span class="br0">(</span><span class="br0">)</span> <span class="sy0">=</span> dict<span class="br0">(</span>w<span class="br0">)</span><br>  <span class="kw1">EndIf</span> <br><span class="kw1">EndProcedure</span><br>&nbsp;<br><span class="kw1">Procedure</span>.s decompress<span class="br0">(</span>List compressed.u<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="co1">;Decompress a list of encoded values to a string</span><br>  <span class="kw1">If</span> ListSize<span class="br0">(</span>compressed<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">=</span> <span class="nu0">0</span>: <span class="kw1">ProcedureReturn</span> <span class="st0">""</span>: <span class="kw1">EndIf</span> <br>&nbsp;<br>  <span class="co1">;Build the dictionary.</span><br>  <span class="kw1">Protected</span>  dict_size <span class="sy0">=</span> <span class="nu0">255</span>, i<br>&nbsp;<br>  <span class="kw1">Dim</span> dict.s<span class="br0">(</span><span class="nu0">255</span><span class="br0">)</span><br>  <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">To</span> <span class="nu0">255</span><br>    dict<span class="br0">(</span>i <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">=</span> <span class="kw2">Chr</span><span class="br0">(</span>i<span class="br0">)</span><br>  <span class="kw1">Next</span> <br>&nbsp;<br>  <span class="kw1">Protected</span> w.s, entry.s, result.s<br>  <span class="kw2">FirstElement</span><span class="br0">(</span>compressed<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>  w <span class="sy0">=</span> dict<span class="br0">(</span>compressed<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>  result <span class="sy0">=</span> w<br>&nbsp;<br>  i <span class="sy0">=</span> <span class="nu0">0</span><br>  <span class="kw1">While</span> <span class="kw2">NextElement</span><span class="br0">(</span>compressed<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>    i <span class="sy0">+</span> <span class="nu0">1</span><br>    <span class="kw1">If</span> compressed<span class="br0">(</span><span class="br0">)</span> <span class="sy0">&lt;</span> dict_size<br>    entry <span class="sy0">=</span> dict<span class="br0">(</span>compressed<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="kw1">ElseIf</span> i <span class="sy0">=</span> dict_size<br>      entry <span class="sy0">=</span> w <span class="sy0">+</span> <span class="kw2">Left</span><span class="br0">(</span>w, <span class="nu0">1</span><span class="br0">)</span><br>    <span class="kw1">Else</span><br>      <span class="kw2">MessageRequester</span><span class="br0">(</span><span class="st0">"Error"</span>,<span class="st0">"Bad compression at ["</span> <span class="sy0">+</span> <span class="kw2">Str</span><span class="br0">(</span>i<span class="br0">)</span> <span class="sy0">+</span> <span class="st0">"]"</span><span class="br0">)</span><br>      <span class="kw1">ProcedureReturn</span> result<span class="co1">;abort</span><br>    <span class="kw1">EndIf</span> <br>    result <span class="sy0">+</span> entry<br>    <span class="co1">;Add w + Left(entry, 1) to the dictionary</span><br>    <span class="kw1">If</span> ArraySize<span class="br0">(</span>dict<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">&lt;=</span> dict_size<br>      <span class="kw1">Redim</span> dict<span class="br0">(</span>dict_size <span class="sy0">+</span> <span class="nu0">256</span><span class="br0">)</span><br>    <span class="kw1">EndIf</span> <br>    dict<span class="br0">(</span>dict_size<span class="br0">)</span> <span class="sy0">=</span> w <span class="sy0">+</span> <span class="kw2">Left</span><span class="br0">(</span>entry, <span class="nu0">1</span><span class="br0">)</span><br>    dict_size <span class="sy0">+</span> <span class="nu0">1</span> <span class="co1">;no check is performed for overfilling the dictionary.</span><br>&nbsp;<br>    w <span class="sy0">=</span> entry<br>  <span class="kw1">Wend</span> <br>  <span class="kw1">ProcedureReturn</span> result<br><span class="kw1">EndProcedure</span><br>&nbsp;<br><span class="kw1">If</span> <span class="kw2">OpenConsole</span><span class="br0">(</span><span class="br0">)</span><br>  <span class="co1">;How to use:</span><br>&nbsp;<br>  <span class="kw1">Define</span> initial.s, decompressed.s<br>&nbsp;<br>  <span class="kw2">Print</span><span class="br0">(</span><span class="st0">"Type something: "</span><span class="br0">)</span><br>  initial <span class="sy0">=</span> <span class="kw2">Input</span><span class="br0">(</span><span class="br0">)</span><br>  <span class="kw1">NewList</span> compressed.u<span class="br0">(</span><span class="br0">)</span><br>  compress<span class="br0">(</span>initial, compressed<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="kw1">ForEach</span> compressed<span class="br0">(</span><span class="br0">)</span><br>    <span class="kw2">Print</span><span class="br0">(</span><span class="kw2">Str</span><span class="br0">(</span>compressed<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">+</span> <span class="st0">" "</span><span class="br0">)</span><br>  <span class="kw1">Next</span> <br>  <span class="kw2">PrintN</span><span class="br0">(</span><span class="st0">""</span><span class="br0">)</span><br>&nbsp;<br>  decompressed <span class="sy0">=</span> decompress<span class="br0">(</span>compressed<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="kw2">PrintN</span><span class="br0">(</span>decompressed<span class="br0">)</span><br>&nbsp;<br>  <span class="kw2">Print</span><span class="br0">(</span>#CRLF$ <span class="sy0">+</span> #CRLF$ <span class="sy0">+</span> <span class="st0">"Press ENTER to exit"</span><span class="br0">)</span><br>  <span class="kw2">Input</span><span class="br0">(</span><span class="br0">)</span><br>  <span class="kw2">CloseConsole</span><span class="br0">(</span><span class="br0">)</span><br><span class="kw1">EndIf</span></pre>
<p>Sample output:
</p>
<pre>Type something: TOBEORNOTTOBEORTOBEORNOT
83 78 65 68 78 81 77 78 83 255 257 259 264 258 260 262
TOBEORNOTTOBEORTOBEORNOT</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=24" title="Edit section: Python">edit</a>]</span> <span class="mw-headline" id="Python"><a href="http://rosettacode.org/wiki/Category:Python" title="Category:Python">Python</a></span></h2>
<p>In this version the dicts contain mixed typed data:
</p>
<pre class="python highlighted_source"><span class="kw1">def</span> compress<span class="br0">(</span>uncompressed<span class="br0">)</span>:<br>    <span class="st0">"""Compress a string to a list of output symbols."""</span><br>&nbsp;<br>    <span class="co1"># Build the dictionary.</span><br>    dict_size <span class="sy0">=</span> <span class="nu0">256</span><br>    dictionary <span class="sy0">=</span> <span class="kw2">dict</span><span class="br0">(</span><span class="br0">(</span><span class="kw2">chr</span><span class="br0">(</span>i<span class="br0">)</span><span class="sy0">,</span> <span class="kw2">chr</span><span class="br0">(</span>i<span class="br0">)</span><span class="br0">)</span> <span class="kw1">for</span> i <span class="kw1">in</span> <span class="kw2">xrange</span><span class="br0">(</span>dict_size<span class="br0">)</span><span class="br0">)</span><br>    <span class="co1"># in Python 3: dictionary = {chr(i): chr(i) for i in range(dict_size)}</span><br>&nbsp;<br>    w <span class="sy0">=</span> <span class="st0">""</span><br>    result <span class="sy0">=</span> <span class="br0">[</span><span class="br0">]</span><br>    <span class="kw1">for</span> c <span class="kw1">in</span> uncompressed:<br>        wc <span class="sy0">=</span> w + c<br>        <span class="kw1">if</span> wc <span class="kw1">in</span> dictionary:<br>            w <span class="sy0">=</span> wc<br>        <span class="kw1">else</span>:<br>            result.<span class="me1">append</span><span class="br0">(</span>dictionary<span class="br0">[</span>w<span class="br0">]</span><span class="br0">)</span><br>            <span class="co1"># Add wc to the dictionary.</span><br>            dictionary<span class="br0">[</span>wc<span class="br0">]</span> <span class="sy0">=</span> dict_size<br>            dict_size +<span class="sy0">=</span> <span class="nu0">1</span><br>            w <span class="sy0">=</span> c<br>&nbsp;<br>    <span class="co1"># Output the code for w.</span><br>    <span class="kw1">if</span> w:<br>        result.<span class="me1">append</span><span class="br0">(</span>dictionary<span class="br0">[</span>w<span class="br0">]</span><span class="br0">)</span><br>    <span class="kw1">return</span> result<br>&nbsp;<br>&nbsp;<br><span class="kw1">def</span> decompress<span class="br0">(</span>compressed<span class="br0">)</span>:<br>    <span class="st0">"""Decompress a list of output ks to a string."""</span><br>&nbsp;<br>    <span class="co1"># Build the dictionary.</span><br>    dict_size <span class="sy0">=</span> <span class="nu0">256</span><br>    dictionary <span class="sy0">=</span> <span class="kw2">dict</span><span class="br0">(</span><span class="br0">(</span><span class="kw2">chr</span><span class="br0">(</span>i<span class="br0">)</span><span class="sy0">,</span> <span class="kw2">chr</span><span class="br0">(</span>i<span class="br0">)</span><span class="br0">)</span> <span class="kw1">for</span> i <span class="kw1">in</span> <span class="kw2">xrange</span><span class="br0">(</span>dict_size<span class="br0">)</span><span class="br0">)</span><br>    <span class="co1"># in Python 3: dictionary = {chr(i): chr(i) for i in range(dict_size)}</span><br>&nbsp;<br>    w <span class="sy0">=</span> result <span class="sy0">=</span> compressed.<span class="me1">pop</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><br>    <span class="kw1">for</span> k <span class="kw1">in</span> compressed:<br>        <span class="kw1">if</span> k <span class="kw1">in</span> dictionary:<br>            entry <span class="sy0">=</span> dictionary<span class="br0">[</span>k<span class="br0">]</span><br>        <span class="kw1">elif</span> k <span class="sy0">==</span> dict_size:<br>            entry <span class="sy0">=</span> w + w<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><br>        <span class="kw1">else</span>:<br>            <span class="kw1">raise</span> <span class="kw2">ValueError</span><span class="br0">(</span><span class="st0">'Bad compressed k:&nbsp;%s'</span>&nbsp;% k<span class="br0">)</span><br>        result +<span class="sy0">=</span> entry<br>&nbsp;<br>        <span class="co1"># Add w+entry[0] to the dictionary.</span><br>        dictionary<span class="br0">[</span>dict_size<span class="br0">]</span> <span class="sy0">=</span> w + entry<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><br>        dict_size +<span class="sy0">=</span> <span class="nu0">1</span><br>&nbsp;<br>        w <span class="sy0">=</span> entry<br>    <span class="kw1">return</span> result<br>&nbsp;<br>&nbsp;<br><span class="co1"># How to use:</span><br>compressed <span class="sy0">=</span> compress<span class="br0">(</span><span class="st0">'TOBEORNOTTOBEORTOBEORNOT'</span><span class="br0">)</span><br><span class="kw1">print</span> <span class="br0">(</span>compressed<span class="br0">)</span><br>decompressed <span class="sy0">=</span> decompress<span class="br0">(</span>compressed<span class="br0">)</span><br><span class="kw1">print</span> <span class="br0">(</span>decompressed<span class="br0">)</span></pre>
<p>Output:
</p>
<pre>['T', 'O', 'B', 'E', 'O', 'R', 'N', 'O', 'T', 256, 258, 260, 265, 259, 261, 263]
TOBEORNOTTOBEORTOBEORNOT
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=25" title="Edit section: Ruby">edit</a>]</span> <span class="mw-headline" id="Ruby"><a href="http://rosettacode.org/wiki/Category:Ruby" title="Category:Ruby">Ruby</a></span></h2>
<p>In this version the hashes contain mixed typed data:
</p>
<pre class="ruby highlighted_source"><span class="co1"># Compress a string to a list of output symbols.</span><br><span class="kw1">def</span> compress<span class="br0">(</span>uncompressed<span class="br0">)</span><br>    <span class="co1"># Build the dictionary.</span><br>    dict_size = <span class="nu0">256</span><br>    dictionary = <span class="kw4">Hash</span><span class="br0">[</span> <span class="kw3">Array</span>.<span class="me1">new</span><span class="br0">(</span>dict_size<span class="br0">)</span> <span class="br0">{</span><span class="sy0">|</span>i<span class="sy0">|</span> <span class="br0">[</span>i.<span class="me1">chr</span>, i.<span class="me1">chr</span><span class="br0">]</span><span class="br0">}</span> <span class="br0">]</span><br>&nbsp;<br>    w = <span class="st0">""</span><br>    result = <span class="br0">[</span><span class="br0">]</span><br>    <span class="kw1">for</span> c <span class="kw1">in</span> uncompressed.<span class="kw3">split</span><span class="br0">(</span><span class="st0">''</span><span class="br0">)</span><br>        wc = w <span class="sy0">+</span> c<br>        <span class="kw1">if</span> dictionary.<span class="me1">has_key</span>?<span class="br0">(</span>wc<span class="br0">)</span><br>            w = wc<br>        <span class="kw1">else</span><br>            result <span class="sy0">&lt;&lt;</span> dictionary<span class="br0">[</span>w<span class="br0">]</span><br>            <span class="co1"># Add wc to the dictionary.</span><br>            dictionary<span class="br0">[</span>wc<span class="br0">]</span> = dict_size<br>            dict_size <span class="sy0">+</span>= <span class="nu0">1</span><br>            w = c<br>        <span class="kw1">end</span><br>    <span class="kw1">end</span><br>&nbsp;<br>    <span class="co1"># Output the code for w.</span><br>    result <span class="sy0">&lt;&lt;</span> dictionary<span class="br0">[</span>w<span class="br0">]</span> <span class="kw1">unless</span> w.<span class="me1">empty</span>?<br>    result<br><span class="kw1">end</span><br>&nbsp;<br><span class="co1"># Decompress a list of output ks to a string.</span><br><span class="kw1">def</span> decompress<span class="br0">(</span>compressed<span class="br0">)</span><br>    <span class="co1"># Build the dictionary.</span><br>    dict_size = <span class="nu0">256</span><br>    dictionary = <span class="kw4">Hash</span><span class="br0">[</span> <span class="kw3">Array</span>.<span class="me1">new</span><span class="br0">(</span>dict_size<span class="br0">)</span> <span class="br0">{</span><span class="sy0">|</span>i<span class="sy0">|</span> <span class="br0">[</span>i.<span class="me1">chr</span>, i.<span class="me1">chr</span><span class="br0">]</span><span class="br0">}</span> <span class="br0">]</span><br>&nbsp;<br>    w = result = compressed.<span class="me1">shift</span><br>    <span class="kw1">for</span> k <span class="kw1">in</span> compressed<br>        <span class="kw1">if</span> dictionary.<span class="me1">has_key</span>?<span class="br0">(</span>k<span class="br0">)</span><br>            entry = dictionary<span class="br0">[</span>k<span class="br0">]</span><br>        <span class="kw1">elsif</span> k == dict_size<br>            entry = w <span class="sy0">+</span> w<span class="br0">[</span><span class="nu0">0</span>,<span class="nu0">1</span><span class="br0">]</span><br>        <span class="kw1">else</span><br>            <span class="kw3">raise</span> <span class="st0">'Bad compressed k:&nbsp;%s'</span> <span class="sy0">%</span> k<br>        <span class="kw1">end</span><br>        result <span class="sy0">+</span>= entry<br>&nbsp;<br>        <span class="co1"># Add w+entry[0] to the dictionary.</span><br>        dictionary<span class="br0">[</span>dict_size<span class="br0">]</span> = w <span class="sy0">+</span> entry<span class="br0">[</span><span class="nu0">0</span>,<span class="nu0">1</span><span class="br0">]</span><br>        dict_size <span class="sy0">+</span>= <span class="nu0">1</span><br>&nbsp;<br>        w = entry<br>    <span class="kw1">end</span><br>    result<br><span class="kw1">end</span><br>&nbsp;<br><span class="co1"># How to use:</span><br>compressed = compress<span class="br0">(</span><span class="st0">'TOBEORNOTTOBEORTOBEORNOT'</span><span class="br0">)</span><br><span class="kw3">p</span> compressed<br>decompressed = decompress<span class="br0">(</span>compressed<span class="br0">)</span><br><span class="kw3">puts</span> decompressed</pre>
<p>Output:
</p>
<pre>["T", "O", "B", "E", "O", "R", "N", "O", "T", 256, 258, 260, 265, 259, 261, 263]
TOBEORNOTTOBEORTOBEORNOT
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=26" title="Edit section: Scheme">edit</a>]</span> <span class="mw-headline" id="Scheme"><a href="http://rosettacode.org/wiki/Category:Scheme" title="Category:Scheme">Scheme</a></span></h2>
<pre class="scheme highlighted_source"><span class="co1">; Get the list reference number for a member or #f if not found</span><br><span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>member<span class="sy0">-</span><span class="kw1">string-ref</span> m <span class="kw1">l</span><span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">define</span> r #f<span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">let</span> loop <span class="br0">(</span><span class="br0">(</span>i <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="sy0">&lt;</span> i <span class="br0">(</span><span class="kw1">length</span> <span class="kw1">l</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">not</span> <span class="br0">(</span><span class="kw1">string=?</span> <span class="br0">(</span><span class="kw1">list-ref</span> <span class="kw1">l</span> i<span class="br0">)</span> m<span class="br0">)</span><span class="br0">)</span><br>            <span class="br0">(</span>loop <span class="br0">(</span><span class="sy0">+</span> i <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>            <span class="br0">(</span><span class="kw1">set!</span> r i<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>  r<span class="br0">)</span><br>&nbsp;<br><span class="co1">;; Compress a string with LZW</span><br><span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>lzw<span class="sy0">-</span>compress uncompressed<span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">define</span> dictionary '<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">define</span> n <span class="nu0">0</span><span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">define</span> result '<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">set!</span> uncompressed <span class="br0">(</span>string<span class="sy0">-&gt;</span><span class="kw1">list</span> uncompressed<span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br>  <span class="co1">;; Setup Dictionary</span><br>  <span class="br0">(</span><span class="kw1">let</span> dict<span class="sy0">-</span>setup <span class="br0">(</span><span class="br0">(</span>c <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="sy0">&gt;</span> <span class="nu0">256</span> c<span class="br0">)</span><br>        <span class="br0">(</span><span class="kw1">begin</span><br>          <span class="br0">(</span><span class="kw1">set!</span> dictionary <span class="br0">(</span><span class="kw1">append</span> dictionary<br>                                   <span class="br0">(</span><span class="kw1">list</span> <span class="br0">(</span><span class="kw1">string</span> <span class="br0">(</span>integer<span class="sy0">-&gt;</span>char c<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>          <span class="br0">(</span><span class="kw1">set!</span> n <span class="br0">(</span><span class="sy0">+</span> n <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>          <span class="br0">(</span>dict<span class="sy0">-</span>setup <span class="br0">(</span><span class="sy0">+</span> c <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br>  <span class="co1">;; Compress the string</span><br>  <span class="br0">(</span><span class="kw1">let</span> compress <span class="br0">(</span><span class="br0">(</span>w <span class="st0">""</span><span class="br0">)</span> <span class="br0">(</span>ci <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">define</span> c <span class="br0">(</span><span class="kw1">string</span> <span class="br0">(</span><span class="kw1">list-ref</span> uncompressed ci<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">define</span> wc <span class="st0">""</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">set!</span> wc <span class="br0">(</span><span class="kw1">string-append</span> w c<span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>member<span class="sy0">-</span><span class="kw1">string-ref</span> wc dictionary<span class="br0">)</span><br>        <span class="br0">(</span><span class="kw1">set!</span> w wc<span class="br0">)</span><br>        <span class="br0">(</span><span class="kw1">begin</span><br>          <span class="br0">(</span><span class="kw1">set!</span> result <span class="br0">(</span><span class="kw1">append</span> result<br>                               <span class="br0">(</span><span class="kw1">list</span> <span class="br0">(</span>member<span class="sy0">-</span><span class="kw1">string-ref</span> w dictionary<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>          <span class="br0">(</span><span class="kw1">set!</span> dictionary <span class="br0">(</span><span class="kw1">append</span> dictionary <span class="br0">(</span><span class="kw1">list</span> wc<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>          <span class="br0">(</span><span class="kw1">set!</span> n <span class="br0">(</span><span class="sy0">+</span> n <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>          <span class="br0">(</span><span class="kw1">set!</span> w c<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">eqv?</span> ci <span class="br0">(</span><span class="sy0">-</span> <span class="br0">(</span><span class="kw1">length</span> uncompressed<span class="br0">)</span> <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="br0">(</span><span class="kw1">set!</span> result <span class="br0">(</span><span class="kw1">append</span> result<br>                             <span class="br0">(</span><span class="kw1">list</span> <span class="br0">(</span>member<span class="sy0">-</span><span class="kw1">string-ref</span> w dictionary<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="br0">(</span>compress w <span class="br0">(</span><span class="sy0">+</span> ci <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>  result<span class="br0">)</span><br>&nbsp;<br><span class="co1">;; Decompress a LZW compressed string (input should be a list of integers)</span><br><span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>lzw<span class="sy0">-</span>decompress compressed<span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">define</span> dictionary '<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">define</span> n <span class="nu0">0</span><span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">define</span> result <span class="st0">""</span><span class="br0">)</span><br>&nbsp;<br>  <span class="co1">;; Setup Dictionary</span><br>  <span class="br0">(</span><span class="kw1">let</span> dict<span class="sy0">-</span>setup <span class="br0">(</span><span class="br0">(</span>c <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="sy0">&gt;</span> <span class="nu0">256</span> c<span class="br0">)</span><br>        <span class="br0">(</span><span class="kw1">begin</span><br>          <span class="br0">(</span><span class="kw1">set!</span> dictionary <span class="br0">(</span><span class="kw1">append</span> dictionary<br>                                   <span class="br0">(</span><span class="kw1">list</span> <span class="br0">(</span><span class="kw1">string</span> <span class="br0">(</span>integer<span class="sy0">-&gt;</span>char c<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>          <span class="br0">(</span><span class="kw1">set!</span> n <span class="br0">(</span><span class="sy0">+</span> n <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>          <span class="br0">(</span>dict<span class="sy0">-</span>setup <span class="br0">(</span><span class="sy0">+</span> c <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br>  <span class="co1">;; Decompress the list</span><br>  <span class="br0">(</span><span class="kw1">let</span> decompress <span class="br0">(</span><span class="br0">(</span>k <span class="br0">(</span><span class="kw1">list-ref</span> compressed <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span>ci <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">define</span> kn #f<span class="br0">)</span><br>    <span class="co1">;; Add to dictionary</span><br>    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="sy0">&gt;</span> <span class="br0">(</span><span class="kw1">length</span> compressed<span class="br0">)</span> <span class="br0">(</span><span class="sy0">+</span> ci <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="br0">(</span><span class="kw1">begin</span><br>          <span class="br0">(</span><span class="kw1">set!</span> kn <span class="br0">(</span><span class="kw1">list-ref</span> compressed <span class="br0">(</span><span class="sy0">+</span> ci <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>          <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="sy0">&lt;</span> kn <span class="br0">(</span><span class="kw1">length</span> dictionary<span class="br0">)</span><span class="br0">)</span><br>              <span class="br0">(</span><span class="kw1">set!</span> dictionary<br>                    <span class="br0">(</span><span class="kw1">append</span> dictionary<br>                            <span class="br0">(</span><span class="kw1">list</span> <span class="br0">(</span><span class="kw1">string-append</span><br>				   <span class="br0">(</span><span class="kw1">list-ref</span> dictionary k<span class="br0">)</span><br>				   <span class="br0">(</span><span class="kw1">string</span> <span class="br0">(</span><span class="kw1">string-ref</span> <span class="br0">(</span><span class="kw1">list-ref</span> dictionary kn<span class="br0">)</span> <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br>    <span class="co1">;; Build the resulting string</span><br>    <span class="br0">(</span><span class="kw1">set!</span> result <span class="br0">(</span><span class="kw1">string-append</span> result <span class="br0">(</span><span class="kw1">list-ref</span> dictionary k<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br>    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">not</span> <span class="br0">(</span><span class="kw1">eqv?</span> ci <span class="br0">(</span><span class="sy0">-</span> <span class="br0">(</span><span class="kw1">length</span> compressed<span class="br0">)</span> <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="br0">(</span>decompress kn <span class="br0">(</span><span class="sy0">+</span> ci <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>  result<span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">define</span> compressed <span class="br0">(</span>lzw<span class="sy0">-</span>compress <span class="st0">"TOBEORNOTTOBEORTOBEORNOT"</span><span class="br0">)</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">display</span> compressed<span class="br0">)</span> <span class="br0">(</span><span class="kw1">newline</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">define</span> decompressed <span class="br0">(</span>lzw<span class="sy0">-</span>decompress compressed<span class="br0">)</span><span class="br0">)</span><br><span class="br0">(</span><span class="kw1">display</span> decompressed<span class="br0">)</span> <span class="br0">(</span><span class="kw1">newline</span><span class="br0">)</span></pre>
Output:<pre>(84 79 66 69 79 82 78 79 84 256 258 260 265 259 261 263)
TOBEORNOTTOBEORTOBEORNOT</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=27" title="Edit section: Seed7">edit</a>]</span> <span class="mw-headline" id="Seed7"><a href="http://rosettacode.org/wiki/Category:Seed7" title="Category:Seed7">Seed7</a></span></h2>
<pre class="text highlighted_source">$ include "seed7_05.s7i";<br>&nbsp;<br>const func string: lzwCompress (in string: uncompressed) is func<br>  result<br>    var string: result is "";<br>  local<br>    var char: ch is ' ';<br>    var hash [string] char: mydict is (hash [string] char).value;<br>    var string: buffer is "";<br>    var string: xstr is "";<br>  begin<br>    for ch range chr(0) to chr(255) do<br>      mydict @:= [str(ch)] ch;<br>    end for;<br>    for ch range uncompressed do<br>      xstr&nbsp;:= buffer &amp; str(ch);<br>      if xstr in mydict then<br>        buffer &amp;:= str(ch)<br>      else<br>        result &amp;:= str(mydict[buffer]);<br>        mydict @:= [xstr] chr(length(mydict));<br>        buffer&nbsp;:= str(ch);<br>      end if;<br>    end for;<br>    if buffer &lt;&gt; "" then<br>      result &amp;:= str(mydict[buffer]);<br>    end if;<br>  end func;<br>&nbsp;<br>const func string: lzwDecompress (in string: compressed) is func<br>  result<br>    var string: result is "";<br>  local<br>    var char: ch is ' ';<br>    var hash [char] string: mydict is (hash [char] string).value;<br>    var string: buffer is "";<br>    var string: current is "";<br>    var string: chain is "";<br>  begin<br>    for ch range chr(0) to chr(255) do<br>      mydict @:= [ch] str(ch);<br>    end for;<br>    for ch range compressed do<br>      if buffer = "" then<br>        buffer&nbsp;:= mydict[ch];<br>        result &amp;:= buffer;<br>      elsif ch &lt;= chr(255) then<br>        current&nbsp;:= mydict[ch];<br>        result &amp;:= current;<br>        chain&nbsp;:= buffer &amp; current;<br>        mydict @:= [chr(length(mydict))] chain;<br>        buffer&nbsp;:= current;<br>      else<br>        if ch in mydict then<br>          chain&nbsp;:= mydict[ch];<br>        else<br>          chain&nbsp;:= buffer &amp; str(buffer[1]);<br>        end if;<br>        result &amp;:= chain;<br>        mydict @:= [chr(length(mydict))] buffer &amp; str(chain[1]);<br>        buffer&nbsp;:= chain;<br>      end if;<br>    end for;<br>  end func;<br>&nbsp;<br>const proc: main is func<br>  local<br>    var string: compressed is "";<br>    var string: uncompressed is "";<br>  begin<br>    compressed&nbsp;:= lzwCompress("TOBEORNOTTOBEORTOBEORNOT");<br>    writeln(literal(compressed));<br>    uncompressed&nbsp;:= lzwDecompress(compressed);<br>    writeln(uncompressed);<br>  end func;</pre>
<p>Output:
</p>
<pre>"TOBEORNOT\256\\258\\260\\265\\259\\261\\263\"
TOBEORNOTTOBEORTOBEORNOT
</pre>
<p>Original source: <a rel="nofollow" class="external autonumber" href="http://seed7.sourceforge.net/algorith/string.htm#lzwCompress">[1]</a> and <a rel="nofollow" class="external autonumber" href="http://seed7.sourceforge.net/algorith/string.htm#lzwDecompress">[2]</a>
</p>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit&section=28" title="Edit section: Tcl">edit</a>]</span> <span class="mw-headline" id="Tcl"><a href="http://rosettacode.org/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></span></h2>
<pre class="tcl highlighted_source"><span class="kw1">namespace</span> <span class="kw1">eval</span> LZW <span class="br0">{</span><br>    <span class="kw1">variable</span> char2int<br>    <span class="kw1">variable</span> chars<br>    <span class="kw1">for</span> <span class="br0">{</span><span class="kw1">set</span> i <span class="nu0">0</span><span class="br0">}</span> <span class="br0">{</span><span class="re0">$i</span> <span class="sy0">&lt;</span> <span class="nu0">256</span><span class="br0">}</span> <span class="br0">{</span><span class="kw2">incr</span> i<span class="br0">}</span> <span class="br0">{</span><br>        <span class="kw1">set</span> char <span class="br0">[</span><span class="kw2">binary</span> <span class="kw2">format</span> c <span class="re0">$i</span><span class="br0">]</span><br>        <span class="kw1">set</span> char2int<span class="br0">(</span><span class="re0">$char</span><span class="br0">)</span> <span class="re0">$i</span><br>        <span class="kw2">lappend</span> chars <span class="re0">$char</span><br>    <span class="br0">}</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw1">proc</span> LZW::<span class="me1">encode</span> <span class="br0">{</span>data<span class="br0">}</span> <span class="br0">{</span><br>    <span class="kw1">variable</span> char2int<br>    array <span class="kw1">set</span> dict <span class="br0">[</span>array get char2int<span class="br0">]</span><br>&nbsp;<br>    <span class="kw1">set</span> w <span class="st0">""</span><br>    <span class="kw1">set</span> result <span class="br0">[</span><span class="kw2">list</span><span class="br0">]</span><br>&nbsp;<br>    <span class="kw1">foreach</span> c <span class="br0">[</span><span class="kw2">split</span> <span class="re0">$data</span> <span class="st0">""</span><span class="br0">]</span> <span class="br0">{</span><br>        <span class="kw1">set</span> wc <span class="re0">$w</span><span class="re0">$c</span><br>        <span class="kw1">if</span> <span class="br0">{</span><span class="br0">[</span><span class="kw2">info</span> exists dict<span class="br0">(</span><span class="re0">$wc</span><span class="br0">)</span><span class="br0">]</span><span class="br0">}</span> <span class="br0">{</span><br>            <span class="kw1">set</span> w <span class="re0">$wc</span><br>        <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>            <span class="kw2">lappend</span> result <span class="re0">$dict</span><span class="br0">(</span><span class="re0">$w</span><span class="br0">)</span><br>            <span class="kw1">set</span> dict<span class="br0">(</span><span class="re0">$wc</span><span class="br0">)</span> <span class="br0">[</span>array size dict<span class="br0">]</span><br>            <span class="kw1">set</span> w <span class="re0">$c</span><br>        <span class="br0">}</span><br>    <span class="br0">}</span><br>    <span class="kw2">lappend</span> result <span class="re0">$dict</span><span class="br0">(</span><span class="re0">$w</span><span class="br0">)</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw1">proc</span> LZW::<span class="me1">decode</span> <span class="br0">{</span>cdata<span class="br0">}</span> <span class="br0">{</span><br>    <span class="kw1">variable</span> chars<br>    <span class="kw1">set</span> dict <span class="re0">$chars</span><br>&nbsp;<br>    <span class="kw1">set</span> k <span class="br0">[</span><span class="kw2">lindex</span> <span class="re0">$cdata</span> <span class="nu0">0</span><span class="br0">]</span><br>    <span class="kw1">set</span> w <span class="br0">[</span><span class="kw2">lindex</span> <span class="re0">$dict</span> <span class="re0">$k</span><span class="br0">]</span><br>    <span class="kw1">set</span> result <span class="re0">$w</span><br>&nbsp;<br>    <span class="kw1">foreach</span> k <span class="br0">[</span><span class="kw2">lrange</span> <span class="re0">$cdata</span> <span class="nu0">1</span> end<span class="br0">]</span> <span class="br0">{</span><br>        <span class="kw1">set</span> currSizeDict <span class="br0">[</span><span class="kw2">llength</span> <span class="re0">$dict</span><span class="br0">]</span><br>        <span class="kw1">if</span> <span class="br0">{</span><span class="re0">$k</span> <span class="sy0">&lt;</span> <span class="re0">$currSizeDict</span><span class="br0">}</span> <span class="br0">{</span><br>            <span class="kw1">set</span> entry <span class="br0">[</span><span class="kw2">lindex</span> <span class="re0">$dict</span> <span class="re0">$k</span><span class="br0">]</span><br>        <span class="br0">}</span> <span class="kw1">elseif</span> <span class="br0">{</span><span class="re0">$k</span> == <span class="re0">$currSizeDict</span><span class="br0">}</span> <span class="br0">{</span><br>            <span class="kw1">set</span> entry <span class="re0">$w</span><span class="br0">[</span><span class="kw2">string</span> index <span class="re0">$w</span> <span class="nu0">0</span><span class="br0">]</span><br>        <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>            <span class="kw1">error</span> <span class="st0">"invalid code ($k) in ($cdata)"</span><br>        <span class="br0">}</span><br>        <span class="kw2">append</span> result <span class="re0">$entry</span><br>        <span class="kw2">lappend</span> dict <span class="re0">$w</span><span class="br0">[</span><span class="kw2">string</span> index <span class="re0">$entry</span> <span class="nu0">0</span><span class="br0">]</span><br>        <span class="kw1">set</span> w <span class="re0">$entry</span><br>    <span class="br0">}</span><br>    <span class="kw1">return</span> <span class="re0">$result</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw1">set</span> s TOBEORNOTTOBEORTOBEORNOT<span class="co1">#</span><br><span class="kw1">set</span> e <span class="br0">[</span>LZW::<span class="me1">encode</span> <span class="re0">$s</span><span class="br0">]</span> <span class="sy0">;</span><span class="co1"># ==&gt; 84 79 66 69 79 82 78 79 84 256 258 260 265 259 261 263 35</span><br><span class="kw1">set</span> d <span class="br0">[</span>LZW::<span class="me1">decode</span> <span class="re0">$e</span><span class="br0">]</span> <span class="sy0">;</span><span class="co1"># ==&gt; TOBEORNOTTOBEORTOBEORNOT#</span><br>&nbsp;<br><span class="co1"># or</span><br><span class="kw1">if</span> <span class="br0">{</span><span class="re0">$s</span> eq <span class="br0">[</span>LZW::<span class="me1">decode</span> <span class="br0">[</span>LZW::<span class="me1">encode</span> <span class="re0">$s</span><span class="br0">]</span><span class="br0">]</span><span class="br0">}</span> <span class="kw1">then</span> <span class="br0">{</span><span class="kw2">puts</span> success<span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><span class="kw2">puts</span> fail<span class="br0">}</span> <span class="sy0">;</span><span class="co1"># ==&gt; success</span></pre>

<!-- 
NewPP limit report
Preprocessor node count: 1299/1000000
Post-expand include size: 4738/2097152 bytes
Template argument size: 876/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key rosettacode:pcache:idhash:2981-0!*!0!!en!2!* and timestamp 20121111122809 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://rosettacode.org/mw/index.php?title=LZW_compression&oldid=146744">http://rosettacode.org/mw/index.php?title=LZW_compression&amp;oldid=146744</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id="catlinks" class="catlinks"><div id="mw-normal-catlinks"><a href="http://rosettacode.org/wiki/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="http://rosettacode.org/wiki/Category:Programming_Tasks" title="Category:Programming Tasks">Programming Tasks</a></li><li><a href="http://rosettacode.org/wiki/Category:Compression" title="Category:Compression">Compression</a></li><li><a href="http://rosettacode.org/wiki/Category:Ada" title="Category:Ada">Ada</a></li><li><a href="http://rosettacode.org/wiki/Category:BBC_BASIC" title="Category:BBC BASIC">BBC BASIC</a></li><li><a href="http://rosettacode.org/wiki/Category:C" title="Category:C">C</a></li><li><a href="http://rosettacode.org/wiki/Category:CoffeeScript" title="Category:CoffeeScript">CoffeeScript</a></li><li><a href="http://rosettacode.org/wiki/Category:Common_Lisp" title="Category:Common Lisp">Common Lisp</a></li><li><a href="http://rosettacode.org/wiki/Category:Babel_(library)" title="Category:Babel (library)">Babel (library)</a></li><li><a href="http://rosettacode.org/wiki/Category:C%2B%2B" title="Category:C++">C++</a></li><li><a href="http://rosettacode.org/wiki/Category:C_sharp" title="Category:C sharp">C sharp</a></li><li><a href="http://rosettacode.org/wiki/Category:Clojure" title="Category:Clojure">Clojure</a></li><li><a href="http://rosettacode.org/wiki/Category:D" title="Category:D">D</a></li><li><a href="http://rosettacode.org/wiki/Category:Dylan" title="Category:Dylan">Dylan</a></li><li><a href="http://rosettacode.org/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></li><li><a href="http://rosettacode.org/wiki/Category:Forth" title="Category:Forth">Forth</a></li><li><a href="http://rosettacode.org/wiki/Category:Go" title="Category:Go">Go</a></li><li><a href="http://rosettacode.org/wiki/Category:Haskell" title="Category:Haskell">Haskell</a></li><li><a href="http://rosettacode.org/wiki/Category:J" title="Category:J">J</a></li><li><a href="http://rosettacode.org/wiki/Category:Java" title="Category:Java">Java</a></li><li><a href="http://rosettacode.org/wiki/Category:JavaScript" title="Category:JavaScript">JavaScript</a></li><li><a href="http://rosettacode.org/wiki/Category:Objective-C" title="Category:Objective-C">Objective-C</a></li><li><a href="http://rosettacode.org/wiki/Category:OCaml" title="Category:OCaml">OCaml</a></li><li><a href="http://rosettacode.org/wiki/Category:Perl" title="Category:Perl">Perl</a></li><li><a href="http://rosettacode.org/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></li><li><a href="http://rosettacode.org/wiki/Category:PureBasic" title="Category:PureBasic">PureBasic</a></li><li><a href="http://rosettacode.org/wiki/Category:Python" title="Category:Python">Python</a></li><li><a href="http://rosettacode.org/wiki/Category:Ruby" title="Category:Ruby">Ruby</a></li><li><a href="http://rosettacode.org/wiki/Category:Scheme" title="Category:Scheme">Scheme</a></li><li><a href="http://rosettacode.org/wiki/Category:Seed7" title="Category:Seed7">Seed7</a></li><li><a href="http://rosettacode.org/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://rosettacode.org/mw/index.php?title=Special:UserLogin&returnto=LZW_compression" title="You are encouraged to log in; however, it is not mandatory [alt-o]" accesskey="o">Log in / create account</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li id="ca-nstab-main" class="selected"><span><a href="http://rosettacode.org/wiki/LZW_compression" title="View the content page [alt-c]" accesskey="c">Page</a></span></li>
					<li id="ca-talk"><span><a href="http://rosettacode.org/wiki/Talk:LZW_compression" title="Discussion about the content page [alt-t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="http://rosettacode.org/wiki/LZW_compression#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="http://rosettacode.org/wiki/LZW_compression">Read</a></span></li>
					<li id="ca-edit"><span><a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=edit" title="You can edit this page. Please use the preview button before saving [alt-e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://rosettacode.org/mw/index.php?title=LZW_compression&action=history" title="Past revisions of this page [alt-h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="http://rosettacode.org/wiki/LZW_compression#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://rosettacode.org/mw/index.php" id="searchform">
		<input type="hidden" name="title" value="Special:Search">
				<input type="search" name="search" title="Search Rosetta Code [alt-f]" accesskey="f" id="searchInput">		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton">		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton">			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/mw/title.png);" href="http://rosettacode.org/wiki/Rosetta_Code" title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- Community -->
<div class="portal" id="p-Community">
	<h5>Community</h5>
	<div class="body">
		<ul>
			<li id="n-Twitter"><a href="http://twitter.com/rosettacode" rel="nofollow">Twitter</a></li>
			<li id="n-Chat.2FIRC"><a href="http://rosettacode.org/wiki/Special:WebChat">Chat/IRC</a></li>
			<li id="n-Planet"><a href="http://rosettacode.org/planet" rel="nofollow">Planet</a></li>
			<li id="n-The-Village-Pump"><a href="http://rosettacode.org/wiki/Rosetta_Code:Village_Pump">The Village Pump</a></li>
			<li id="n-Finances"><a href="http://rosettacode.org/wiki/Rosetta_Code:Finances">Finances</a></li>
		</ul>
	</div>
</div>

<!-- /Community -->

<!-- Explore -->
<div class="portal" id="p-Explore">
	<h5>Explore</h5>
	<div class="body">
		<ul>
			<li id="n-Languages"><a href="http://rosettacode.org/wiki/Category:Programming_Languages">Languages</a></li>
			<li id="n-Tasks"><a href="http://rosettacode.org/wiki/Category:Programming_Tasks">Tasks</a></li>
			<li id="n-recentchanges"><a href="http://rosettacode.org/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [alt-r]" accesskey="r">Recent changes</a></li>
			<li id="n-Similar-sites"><a href="http://rosettacode.org/wiki/Help:Similar_Sites">Similar sites</a></li>
			<li id="n-randompage"><a href="http://rosettacode.org/wiki/Special:Random" title="Load a random page [alt-x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /Explore -->

<!-- Misc -->
<div class="portal" id="p-Misc">
	<h5>Misc</h5>
	<div class="body">
		<!-- Place this tag where you want the +1 button to render -->
<div style="height: 24px; width: 106px; display: inline-block; text-indent: 0px; margin: 0px; padding: 0px; background-color: transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; background-position: initial initial; background-repeat: initial initial;" id="___plusone_0"><iframe allowtransparency="true" frameborder="0" hspace="0" marginheight="0" marginwidth="0" scrolling="no" style="position: static; top: 0px; width: 106px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 24px;" tabindex="0" vspace="0" width="100%" id="I0_1352720826906" name="I0_1352720826906" src="./LZW compression - Rosetta Code_files/fastbutton.htm" title="+1"></iframe></div>

<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
<iframe allowtransparency="true" frameborder="0" scrolling="no" src="./LZW compression - Rosetta Code_files/tweet_button.1352365724.htm" class="twitter-share-button twitter-count-horizontal" style="width: 139px; height: 28px;" title="Twitter Tweet Button" data-twttr-rendered="true"></iframe>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
<script src="./LZW compression - Rosetta Code_files/hostedbadge.php"></script><iframe scrolling="no" frameborder="0" allowtransparency="true" style="overflow: hidden; margin: 0px; padding: 0px; border: 0px;" src="./LZW compression - Rosetta Code_files/saved_resource.htm" width="65" height="18" id="iframe-stmblpn-widget-1"></iframe> <script type="text/javascript">   (function() {     var li = document.createElement('script'); li.type = 'text/javascript'; li.async = true;     li.src = window.location.protocol + '//platform.stumbleupon.com/1/widgets.js';     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(li, s);   })(); </script>	</div>
</div>

<!-- /Misc -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id="p-tb">
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://rosettacode.org/wiki/Special:WhatLinksHere/LZW_compression" title="A list of all wiki pages that link here [alt-j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://rosettacode.org/wiki/Special:RecentChangesLinked/LZW_compression" title="Recent changes in pages linked from this page [alt-k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://rosettacode.org/wiki/Special:SpecialPages" title="A list of all special pages [alt-q]" accesskey="q">Special pages</a></li>
			<li><a href="http://rosettacode.org/mw/index.php?title=LZW_compression&printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://rosettacode.org/mw/index.php?title=LZW_compression&oldid=146744" title="Permanent link to this revision of the page">Permanent link</a></li>
<li id="t-smwbrowselink"><a href="http://rosettacode.org/wiki/Special:Browse/LZW_compression" title="Special:Browse/LZW compression">Browse properties</a></li>		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 8 November 2012, at 04:22.</li>
											<li id="footer-info-copyright">Content is available under <a class="external" href="http://www.gnu.org/licenses/fdl-1.2.html">GNU Free Documentation License 1.2</a>.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://rosettacode.org/wiki/Rosetta_Code:Privacy_policy" title="Rosetta Code:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://rosettacode.org/wiki/Rosetta_Code:About" title="Rosetta Code:About">About Rosetta Code</a></li>
											<li id="footer-places-disclaimer"><a href="http://rosettacode.org/wiki/Rosetta_Code:General_disclaimer" title="Rosetta Code:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<a href="http://www.gnu.org/licenses/fdl-1.2.html"><img src="./LZW compression - Rosetta Code_files/gnu-fdl.png" alt="GNU Free Documentation License 1.2" width="88" height="31"></a>
					</li>
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="./LZW compression - Rosetta Code_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31"></a>
						<a href="http://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki"><img src="./LZW compression - Rosetta Code_files/smw_button.png" alt="Powered by Semantic MediaWiki" width="88" height="31"></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="./LZW compression - Rosetta Code_files/load(3).php"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script><script type="text/javascript" src="./LZW compression - Rosetta Code_files/load(4).php"></script>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(["_setAccount", "UA-1219419-1"]);
  _gaq.push(["_trackPageview"]);

  (function() {
    var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
    ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
    var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<script src="./LZW compression - Rosetta Code_files/load(5).php"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs102":false,"searchNs103":false,"searchNs106":false,"searchNs107":false,"searchNs108":false,"searchNs109":false,"searchNs110":false,"searchNs111":false,"searchNs112":false,"searchNs113":false,"searchNs114":false,"searchNs115":false,"searchNs170":false,"searchNs171":false,"searchNs274":false,"searchNs275":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: rosettacode:resourceloader:filter:minify-js:4:53430b334a211d12bb807ccec9845ab3 */
}
</script><!-- Served in 0.352 secs. -->
	

</body></html>